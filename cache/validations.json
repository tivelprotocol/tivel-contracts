{
  "version": "3.4",
  "log": [
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "85d2c2879eed398e3c2110e8ed12f1ddc118e442763f8370ab28db65ab0f9377",
          "withoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1",
          "linkedWithoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "b2a9dac1ecb5315d14c099739d262b5c8794b3356d4bbd727958a4262de96430",
          "withoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8",
          "linkedWithoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "ab1acbfd52cd07fd448a754f273c88bf160757cb67c3e8fb572d4b5cde9778c5",
          "withoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9",
          "linkedWithoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "3478c5ab8f74f9d7ed85ee9088f081f6f5fdd94e52df15bacedc815955218bf5",
          "withoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c",
          "linkedWithoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5665_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5665_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5665_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "9beab36b207e04446f8b5a42fe5e8cc1b1ad190f08e1110e837f6e319611eb6d",
          "withoutMetadata": "16c215e497e9ce295f4c31efbc9bf302c00a60ad83e9ba77c688697455016c9c",
          "linkedWithoutMetadata": "16c215e497e9ce295f4c31efbc9bf302c00a60ad83e9ba77c688697455016c9c"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)16410_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)16410_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)16410_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "d0b8d38411844da03d4f5f4bb49e1f7642d9afd686bb5c285a154d0fa28cc0c1",
          "withoutMetadata": "ec22f9d977e12fac877b33827a2b53fe999d1c013313b6ccc0dea8738bff889c",
          "linkedWithoutMetadata": "ec22f9d977e12fac877b33827a2b53fe999d1c013313b6ccc0dea8738bff889c"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "876593045b8a83814b06a770eccee0dc5e604afae5b8ac01547b1ff8f1a393a1",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "ef0d84f77c8595315e6c945a525d4ace61b307f5d3807086c7d625495b616c73",
          "withoutMetadata": "fb7a2320c457ba3051701b3a7e32245a8ec424b6ae41d7311d2017d830717d60",
          "linkedWithoutMetadata": "fb7a2320c457ba3051701b3a7e32245a8ec424b6ae41d7311d2017d830717d60"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)16691_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)16691_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)16627_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)16643_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)16632_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)16660_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)16691_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)16627_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)16632_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)16643_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)16660_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "9d29a16da0de06867e8636126dc421831f848878bed2d3571a0e32f6658dbd45",
          "withoutMetadata": "b5a2030402fbd4da84b16257f1094d24ab92c3d80f91138c4168e925d269200b",
          "linkedWithoutMetadata": "b5a2030402fbd4da84b16257f1094d24ab92c3d80f91138c4168e925d269200b"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "bc163b9856e9b69cce77f6ee233cfbd2ee89a0873affdf234df01f19c7f6f72f",
          "withoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1",
          "linkedWithoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "a72609902f06977bd4e74a81e701511bfa76124f64df8782aadff606be511f61",
          "withoutMetadata": "c7e6e9dee4230b7efcf65a5dbf7cd546b08b8e3840281bcb5a60e9bb9285caea",
          "linkedWithoutMetadata": "c7e6e9dee4230b7efcf65a5dbf7cd546b08b8e3840281bcb5a60e9bb9285caea"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17257_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)17257_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17257_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)17257_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "6384ff4921fcdae9979d3c12fc06afca9f64e187c1f5a915e288eb6804b0c09f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "890b52cf86163caa6f96352ee70aedbcfd6481c9724437aac6a625a169f7650b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "213c50e09842535c6e6c1540f3564b0cb0893c5930705aa06712204fd3a43250",
          "withoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1",
          "linkedWithoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "a57bbb81bea90d790d154007fc918ea56b2f56e77a4d76100a48882ae7c329c0",
          "withoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8",
          "linkedWithoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "f791b8a546200f5ed4dabecb82ffe825b18fcb5cfca69f40fe1f97d1e792127a",
          "withoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9",
          "linkedWithoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "8a1053092e2cc1ba49ee74d1c8956dfb801d0a36acf36ae0f9042994ebceda63",
          "withoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c",
          "linkedWithoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5665_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5665_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5665_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "3ff3df45781b874617b10fefe9d0cf9df44dd3899c8b4cb3f724e51a69c40421",
          "withoutMetadata": "497d179625171abc4e026cdbca6e431961d73b4d07400548de821f250597b0d6",
          "linkedWithoutMetadata": "497d179625171abc4e026cdbca6e431961d73b4d07400548de821f250597b0d6"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)16483_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)16483_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)16483_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "cb9e321a516d4dfd4c7a04f945c6ba58c9e3c81aa015120ba9357e3bf0c05b6d",
          "withoutMetadata": "d780f713e948eff79bc093dba8f81491fddbb2c5c97278556feaedc913ba2a63",
          "linkedWithoutMetadata": "d780f713e948eff79bc093dba8f81491fddbb2c5c97278556feaedc913ba2a63"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "a860f2343d9c021a811ec4866b999fd69aa1cfc14a70896edb7523ad9b4591ec",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "947c03ad90de5cde197ac3ec77017202f72f6c322864358c206412f7c8cfff83",
          "withoutMetadata": "28c210b7eea3174efd85daa2f91bc54bf2a53fe0d3d229d323c4576c09176371",
          "linkedWithoutMetadata": "28c210b7eea3174efd85daa2f91bc54bf2a53fe0d3d229d323c4576c09176371"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)16766_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)16766_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)16702_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)16718_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)16707_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)16735_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)16766_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)16702_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)16707_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)16718_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)16735_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "b05b5f5eeea905cfebadb30677308adcfed054806cfe2f8f00e04b08162c3c06",
          "withoutMetadata": "f881327fe5a30448e0dc8dc0d8653b271e6ca809ab81b8a62a388389ea7b6fee",
          "linkedWithoutMetadata": "f881327fe5a30448e0dc8dc0d8653b271e6ca809ab81b8a62a388389ea7b6fee"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "d9632e33229a8d4b49b5c6fdcf0826a80faf43ebeb7b7a2ebeaec2a480bdcec9",
          "withoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1",
          "linkedWithoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "84906001d3a6c405e6d707b078fc9cae7a59eeb61a05332a699f461273a24d43",
          "withoutMetadata": "c7e6e9dee4230b7efcf65a5dbf7cd546b08b8e3840281bcb5a60e9bb9285caea",
          "linkedWithoutMetadata": "c7e6e9dee4230b7efcf65a5dbf7cd546b08b8e3840281bcb5a60e9bb9285caea"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17336_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)17336_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17336_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)17336_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "955c97e299095b18bbe228f3a7770a5a6b5eb9a3781dc07dff0870e53f1b8c0b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "890b52cf86163caa6f96352ee70aedbcfd6481c9724437aac6a625a169f7650b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "b6eb5f0f39736cde31697d0be07eb6596f5816f74d9cc04fae353e2b42836122",
          "withoutMetadata": "55136abd631a010e9487a076f671fcbb6734bb62f12a880c75e4918945342058",
          "linkedWithoutMetadata": "55136abd631a010e9487a076f671fcbb6734bb62f12a880c75e4918945342058"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)3044_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3044_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2980_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2996_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2985_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3013_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3044_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2980_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2985_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2996_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3013_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "c5b8715bdd7d7133d44577b9414f7762487bea31142a28c5e03cf22e198d4f4b",
          "withoutMetadata": "d3c970686f8faa429b1fd6fa624f47bdb934da51cfbb33795fe117073fe04ac6",
          "linkedWithoutMetadata": "d3c970686f8faa429b1fd6fa624f47bdb934da51cfbb33795fe117073fe04ac6"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)3043_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3043_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2979_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2995_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2984_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3012_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3043_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2979_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2984_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2995_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3012_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "3af0f7d93910360a9272b42d77eaf5beef8bfee92924478a6c3009e8134c288d",
          "withoutMetadata": "be099228d4fdfef6b66103f99a6523ab2ff77a665b9dc04e665fe7d0f0474b5c",
          "linkedWithoutMetadata": "be099228d4fdfef6b66103f99a6523ab2ff77a665b9dc04e665fe7d0f0474b5c"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)3043_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3043_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2979_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2995_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2984_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3012_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3043_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2979_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2984_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2995_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3012_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "cd1aa032b5a9e0e6f31da8957778aee57aadb314524a8ba908e46ec74fae7fdd",
          "withoutMetadata": "be099228d4fdfef6b66103f99a6523ab2ff77a665b9dc04e665fe7d0f0474b5c",
          "linkedWithoutMetadata": "be099228d4fdfef6b66103f99a6523ab2ff77a665b9dc04e665fe7d0f0474b5c"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)3043_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3043_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2979_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2995_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2984_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3012_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3043_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2979_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2984_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2995_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3012_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "d7d03a0b620976dc6b27534f75f16d91d0f45eb5f4557760fa4713b143c04502",
          "withoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1",
          "linkedWithoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "9ace0764a9a01864364ec3e28ba1cf364dfa51854e3621ab951d88f8b67d681f",
          "withoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8",
          "linkedWithoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "7c2b6ff020292c0230931d59a2feb66c32c3b746972368b72a05f2f6fe173ac1",
          "withoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9",
          "linkedWithoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "50873da6a55569abf29b65dbe296015aa027d7374cfa8c14055afcbee4e31c0f",
          "withoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c",
          "linkedWithoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5665_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5665_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5665_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "6cd6d98ee0849af990e4d76b89518d5da5b3c4d31ca295aacb65e82e18327749",
          "withoutMetadata": "497d179625171abc4e026cdbca6e431961d73b4d07400548de821f250597b0d6",
          "linkedWithoutMetadata": "497d179625171abc4e026cdbca6e431961d73b4d07400548de821f250597b0d6"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)16511_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)16511_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)16511_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "6e5838e231657b6867197953fab986f63d94a7aa1459163cd34f7a4aaab0f63a",
          "withoutMetadata": "4cf09034497f1a47a92f47f1b7d411ada7dba3a7d50738371323771a3b3fd711",
          "linkedWithoutMetadata": "4cf09034497f1a47a92f47f1b7d411ada7dba3a7d50738371323771a3b3fd711"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "2d02e51903383af0fc22d37ee34e332bcce318be8872a8040a9f57c3c0e0f7c0",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "24d7e1f53d6c50700e9aa015f57e18801d77f274e0e9064fd87c30074dac7359",
          "withoutMetadata": "6e1967cf1a09890b8fc0364634175bc49f3318975f8703d556ec0e40a97b4760",
          "linkedWithoutMetadata": "6e1967cf1a09890b8fc0364634175bc49f3318975f8703d556ec0e40a97b4760"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)16794_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)16794_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)16730_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)16746_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)16735_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)16763_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)16794_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)16730_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)16735_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)16746_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)16763_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "d6bc499b62256d229b7b59310ec74cdbd7c50652eaebf68b2c246c76f677a793",
          "withoutMetadata": "f881327fe5a30448e0dc8dc0d8653b271e6ca809ab81b8a62a388389ea7b6fee",
          "linkedWithoutMetadata": "f881327fe5a30448e0dc8dc0d8653b271e6ca809ab81b8a62a388389ea7b6fee"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "7e359b34721424784a7acb4252942569c85ab2919568ebfc8d138c154b344aa9",
          "withoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1",
          "linkedWithoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "d9fa556d45f66359807102bf325939da379b63e59f07a002aaf47df360f85308",
          "withoutMetadata": "c7e6e9dee4230b7efcf65a5dbf7cd546b08b8e3840281bcb5a60e9bb9285caea",
          "linkedWithoutMetadata": "c7e6e9dee4230b7efcf65a5dbf7cd546b08b8e3840281bcb5a60e9bb9285caea"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17366_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)17366_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17366_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)17366_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "ad021428ca8d2470441295da573d3baa42564e5e24c32c82ec51090e40093b93",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "890b52cf86163caa6f96352ee70aedbcfd6481c9724437aac6a625a169f7650b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/ChainlinkPriceFeedIntegration.sol:ChainlinkPriceFeedIntegration": {
        "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "787d1a5ae2be7e2ce9c3b26395ec0d27e6c5a23131808645a16660d65309d352",
          "withoutMetadata": "a1b4c6a8deb24a2deebaeb9f3a4b0bd3cbcb2d7ea8fe00232e8378e959b5b912",
          "linkedWithoutMetadata": "a1b4c6a8deb24a2deebaeb9f3a4b0bd3cbcb2d7ea8fe00232e8378e959b5b912"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setPriceFeed(address,address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ChainlinkPriceFeedIntegration",
            "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:9"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/GMXPriceFeedIntegration.sol:GMXPriceFeedIntegration": {
        "src": "contracts/integrations/GMXPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "5d37c566e86efc9f3bc1d5283eb8aa25861e46ff43b70f6b462da0c79e36d340",
          "withoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1",
          "linkedWithoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GMXPriceFeedIntegration",
            "src": "contracts/integrations/GMXPriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "feed",
            "src": "contracts/integrations/GMXPriceFeedIntegration.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/MuteDEXIntegration.sol:MuteDEXIntegration": {
        "src": "contracts/integrations/MuteDEXIntegration.sol:10",
        "version": {
          "withMetadata": "43948f186b11ab705a7ddb837cbee63de385d775d320104b8b9eed36a51b3c48",
          "withoutMetadata": "8b8e7afbb09d5ac36fb39177c42b74d719d1c16c9e52a91628d71e80624898b2",
          "linkedWithoutMetadata": "8b8e7afbb09d5ac36fb39177c42b74d719d1c16c9e52a91628d71e80624898b2"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MuteDEXIntegration",
            "src": "contracts/integrations/MuteDEXIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/MuteDEXIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/MutePriceFeedIntegration.sol:MutePriceFeedIntegration": {
        "src": "contracts/integrations/MutePriceFeedIntegration.sol:8",
        "version": {
          "withMetadata": "c321b1ee3db476ca412e996c654064176306eb6dcfb8a02c34dd81c4e3d6b48e",
          "withoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1",
          "linkedWithoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MutePriceFeedIntegration",
            "src": "contracts/integrations/MutePriceFeedIntegration.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/MutePriceFeedIntegration.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapClassicDEXIntegration.sol:SyncswapClassicDEXIntegration": {
        "src": "contracts/integrations/SyncswapClassicDEXIntegration.sol:11",
        "version": {
          "withMetadata": "d3279455d34710580a1d2c550e4372961f606f89a813dc524ec801a2be94e19f",
          "withoutMetadata": "f20daf4c647aa1191f989195becb6c540c96d0fd89f3d823e8fdee63216b0cc0",
          "linkedWithoutMetadata": "f20daf4c647aa1191f989195becb6c540c96d0fd89f3d823e8fdee63216b0cc0"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicDEXIntegration",
            "src": "contracts/integrations/SyncswapClassicDEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapClassicDEXIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:SyncswapClassicPriceFeedIntegration": {
        "src": "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "0e9edf31b8bacb3f13cf7d184c43863d4538f92e8ddab3ae832d5f4be43ce138",
          "withoutMetadata": "af2ddd1d80eadb8479f1cebfcd666127ad12cf304b922704e60faa9c1de7f8a6",
          "linkedWithoutMetadata": "af2ddd1d80eadb8479f1cebfcd666127ad12cf304b922704e60faa9c1de7f8a6"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicPriceFeedIntegration",
            "src": "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapStableDEXIntegration.sol:SyncswapStableDEXIntegration": {
        "src": "contracts/integrations/SyncswapStableDEXIntegration.sol:11",
        "version": {
          "withMetadata": "06a74472a38644b7c66cbb9bb6fc5513e2923e25e8bde4c109688147c24ab64a",
          "withoutMetadata": "f6554bbbed89234323a4fc77457b32c5ea88da4819e34002f939ef2d1323501c",
          "linkedWithoutMetadata": "f6554bbbed89234323a4fc77457b32c5ea88da4819e34002f939ef2d1323501c"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStableDEXIntegration",
            "src": "contracts/integrations/SyncswapStableDEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapStableDEXIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:SyncswapStablePriceFeedIntegration": {
        "src": "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "f1c94f41a72396654ec491ffde576b2a0b24581e6f282063798cb7f10e256750",
          "withoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e",
          "linkedWithoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStablePriceFeedIntegration",
            "src": "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV3DEXIntegration.sol:UniswapV3DEXIntegration": {
        "src": "contracts/integrations/UniswapV3DEXIntegration.sol:13",
        "version": {
          "withMetadata": "b94f6e45f27cccc5867e517ce04eaab86cad53e90ece9202298cf9f743c25b75",
          "withoutMetadata": "3379e0a8cf4cfba52050b6ce73fe28a0a2c10df43e346d7cad27d3913ea625df",
          "linkedWithoutMetadata": "3379e0a8cf4cfba52050b6ce73fe28a0a2c10df43e346d7cad27d3913ea625df"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3DEXIntegration",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "quoter",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3DEXIntegration",
              "src": "contracts/integrations/UniswapV3DEXIntegration.sol:17"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV3PriceFeedIntegration.sol:UniswapV3PriceFeedIntegration": {
        "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "d33e85db1a105f16db8dba0f3023cb5d251bd0b90b4537a17d89788937228cc5",
          "withoutMetadata": "dd59876f07e21a9fd702f486b4120e238a28f285c2f84045b6d82a7bc8b49ac4",
          "linkedWithoutMetadata": "dd59876f07e21a9fd702f486b4120e238a28f285c2f84045b6d82a7bc8b49ac4"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3PriceFeedIntegration",
            "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3PriceFeedIntegration",
              "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IChainlinkPriceFeed.sol:IChainlinkPriceFeed": {
        "src": "contracts/interfaces/IChainlinkPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IGMXPriceFeed.sol:IGMXPriceFeed": {
        "src": "contracts/interfaces/IGMXPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "prices(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUniswapV3StaticQuoter.sol:IUniswapV3StaticQuoter": {
        "src": "contracts/interfaces/IUniswapV3StaticQuoter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quoteExactInput(bytes,uint256)",
          "quoteExactInputSingle((address,address,uint256,uint24,uint160))",
          "quoteExactOutput(bytes,uint256)",
          "quoteExactOutputSingle((address,address,uint256,uint24,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IMuteRouter.sol:IMuteRouter": {
        "src": "contracts/interfaces/external/IMuteRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pairFor(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,bool[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapFactory.sol:ISyncswapFactory": {
        "src": "contracts/interfaces/external/ISyncswapFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapPool.sol:ISyncswapPool": {
        "src": "contracts/interfaces/external/ISyncswapPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token0()",
          "token1()",
          "getReserves()",
          "getSwapFee(address,address,address,bytes)",
          "getAmountOut(address,uint256,address)",
          "getAmountIn(address,uint256,address)",
          "swap(bytes,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/MuteDEXIntegration.sol:MuteDEXIntegration": {
        "src": "contracts/MuteDEXIntegration.sol:10",
        "version": {
          "withMetadata": "036f148c76a2c474999df61c31b697d543f0373f270e79398530e897d0098c52",
          "withoutMetadata": "8b8e7afbb09d5ac36fb39177c42b74d719d1c16c9e52a91628d71e80624898b2",
          "linkedWithoutMetadata": "8b8e7afbb09d5ac36fb39177c42b74d719d1c16c9e52a91628d71e80624898b2"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MuteDEXIntegration",
            "src": "contracts/MuteDEXIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/MuteDEXIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/MutePriceFeedIntegration.sol:MutePriceFeedIntegration": {
        "src": "contracts/MutePriceFeedIntegration.sol:8",
        "version": {
          "withMetadata": "9248e7f76ab6606f79ae525b4925c4151aef9828209d47e567fa5910d08708a8",
          "withoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1",
          "linkedWithoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MutePriceFeedIntegration",
            "src": "contracts/MutePriceFeedIntegration.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/MutePriceFeedIntegration.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IMuteRouter.sol:IMuteRouter": {
        "src": "contracts/interfaces/external/IMuteRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pairFor(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,bool[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/MutePriceFeedIntegration.sol:MutePriceFeedIntegration": {
        "src": "contracts/MutePriceFeedIntegration.sol:8",
        "version": {
          "withMetadata": "01c45d14d6a648da6f05de7c51199dacddf772b2a56cf9b209f9040da40443d0",
          "withoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1",
          "linkedWithoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MutePriceFeedIntegration",
            "src": "contracts/MutePriceFeedIntegration.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/MutePriceFeedIntegration.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapClassicPriceFeedIntegration.sol:SyncswapClassicPriceFeedIntegration": {
        "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "33f296f6a7c41fd7002b112edfc8d85b96a8d2da0cb49bd52ad20d5286378624",
          "withoutMetadata": "af2ddd1d80eadb8479f1cebfcd666127ad12cf304b922704e60faa9c1de7f8a6",
          "linkedWithoutMetadata": "af2ddd1d80eadb8479f1cebfcd666127ad12cf304b922704e60faa9c1de7f8a6"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicPriceFeedIntegration",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IMuteRouter.sol:IMuteRouter": {
        "src": "contracts/interfaces/external/IMuteRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAmountOut(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapFactory.sol:ISyncswapFactory": {
        "src": "contracts/interfaces/external/ISyncswapFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapPool.sol:ISyncswapPool": {
        "src": "contracts/interfaces/external/ISyncswapPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token0()",
          "token1()",
          "getReserves()",
          "getSwapFee(address,address,address,bytes)",
          "getAmountOut(address,uint256,address)",
          "getAmountIn(address,uint256,address)",
          "swap(bytes,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/SyncswapClassicPriceFeedIntegration.sol:SyncswapClassicPriceFeedIntegration": {
        "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "a124facd8c64df473794aa076eb41fdf17aa4243b8bfe3d98d867ac8b04f4ca0",
          "withoutMetadata": "cf4aafa942b683c448ba9dd6a23ba0d4a0d378ea3d7fb288f483f430c4b7a39d",
          "linkedWithoutMetadata": "cf4aafa942b683c448ba9dd6a23ba0d4a0d378ea3d7fb288f483f430c4b7a39d"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicPriceFeedIntegration",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapStableDEXIntegration.sol:SyncswapStableDEXIntegration": {
        "src": "contracts/SyncswapStableDEXIntegration.sol:11",
        "version": {
          "withMetadata": "6b5f16b7bfbc43613a5dd2f95168b9ee3e240f6c15647f9d51f4b0ae025629e0",
          "withoutMetadata": "f6554bbbed89234323a4fc77457b32c5ea88da4819e34002f939ef2d1323501c",
          "linkedWithoutMetadata": "f6554bbbed89234323a4fc77457b32c5ea88da4819e34002f939ef2d1323501c"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStableDEXIntegration",
            "src": "contracts/SyncswapStableDEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapStableDEXIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapStablePriceFeedIntegration.sol:SyncswapStablePriceFeedIntegration": {
        "src": "contracts/SyncswapStablePriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "4d0c2ea7d369f240891bd6f4b64d77468f316cb09753d5408c74e2ae16aebafe",
          "withoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e",
          "linkedWithoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStablePriceFeedIntegration",
            "src": "contracts/SyncswapStablePriceFeedIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapStablePriceFeedIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapFactory.sol:ISyncswapFactory": {
        "src": "contracts/interfaces/external/ISyncswapFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapPool.sol:ISyncswapPool": {
        "src": "contracts/interfaces/external/ISyncswapPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token0()",
          "token1()",
          "getReserves()",
          "getSwapFee(address,address,address,bytes)",
          "getAmountOut(address,uint256,address)",
          "getAmountIn(address,uint256,address)",
          "swap(bytes,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapClassicDEXIntegration.sol:SyncswapClassicDEXIntegration": {
        "src": "contracts/SyncswapClassicDEXIntegration.sol:11",
        "version": {
          "withMetadata": "9aec985ae040f90f2d58fcb26b5d48f6f8072e0a3a3239bd2c10c8595fb90122",
          "withoutMetadata": "f20daf4c647aa1191f989195becb6c540c96d0fd89f3d823e8fdee63216b0cc0",
          "linkedWithoutMetadata": "f20daf4c647aa1191f989195becb6c540c96d0fd89f3d823e8fdee63216b0cc0"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicDEXIntegration",
            "src": "contracts/SyncswapClassicDEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapClassicDEXIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapClassicPriceFeedIntegration.sol:SyncswapClassicPriceFeedIntegration": {
        "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:11",
        "version": {
          "withMetadata": "cf09b155cc469d0e2c0192790c0a3659e1c03b8429abdbfbf424fb0792f6edda",
          "withoutMetadata": "cf4aafa942b683c448ba9dd6a23ba0d4a0d378ea3d7fb288f483f430c4b7a39d",
          "linkedWithoutMetadata": "cf4aafa942b683c448ba9dd6a23ba0d4a0d378ea3d7fb288f483f430c4b7a39d"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicPriceFeedIntegration",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapStablePriceFeedIntegration.sol:SyncswapStablePriceFeedIntegration": {
        "src": "contracts/SyncswapStablePriceFeedIntegration.sol:11",
        "version": {
          "withMetadata": "66389b58c866e86e605830649d810dabfe8f49ff499825c84733bf6d080de4c4",
          "withoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e",
          "linkedWithoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStablePriceFeedIntegration",
            "src": "contracts/SyncswapStablePriceFeedIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapStablePriceFeedIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapFactory.sol:ISyncswapFactory": {
        "src": "contracts/interfaces/external/ISyncswapFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapPool.sol:ISyncswapPool": {
        "src": "contracts/interfaces/external/ISyncswapPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token0()",
          "token1()",
          "getReserves()",
          "getSwapFee(address,address,address,bytes)",
          "getAmountOut(address,uint256,address)",
          "getAmountIn(address,uint256,address)",
          "swap(bytes,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapClassicDEXIntegration.sol:SyncswapClassicDEXIntegration": {
        "src": "contracts/SyncswapClassicDEXIntegration.sol:11",
        "version": {
          "withMetadata": "f188378ad684a3fe2fd2a1d1d10e0875e4cb9b70aa62f698beda863d7085bcd3",
          "withoutMetadata": "f20daf4c647aa1191f989195becb6c540c96d0fd89f3d823e8fdee63216b0cc0",
          "linkedWithoutMetadata": "f20daf4c647aa1191f989195becb6c540c96d0fd89f3d823e8fdee63216b0cc0"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicDEXIntegration",
            "src": "contracts/SyncswapClassicDEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapClassicDEXIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapClassicPriceFeedIntegration.sol:SyncswapClassicPriceFeedIntegration": {
        "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:11",
        "version": {
          "withMetadata": "37fabbd7cdabd0007455268d82a892349895bc5a799cc87266f352645256816a",
          "withoutMetadata": "cf4aafa942b683c448ba9dd6a23ba0d4a0d378ea3d7fb288f483f430c4b7a39d",
          "linkedWithoutMetadata": "cf4aafa942b683c448ba9dd6a23ba0d4a0d378ea3d7fb288f483f430c4b7a39d"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicPriceFeedIntegration",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapStablePriceFeedIntegration.sol:SyncswapStablePriceFeedIntegration": {
        "src": "contracts/SyncswapStablePriceFeedIntegration.sol:11",
        "version": {
          "withMetadata": "7236dbc25b0db8f23abdf914b6cccaacad10068415da289d0ae4de01c83b1277",
          "withoutMetadata": "b211c9f06af1904ecde164607b916d839a1b1ca87fb4dfb1b5bb6f56dd0e6374",
          "linkedWithoutMetadata": "b211c9f06af1904ecde164607b916d839a1b1ca87fb4dfb1b5bb6f56dd0e6374"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStablePriceFeedIntegration",
            "src": "contracts/SyncswapStablePriceFeedIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapStablePriceFeedIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapFactory.sol:ISyncswapFactory": {
        "src": "contracts/interfaces/external/ISyncswapFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address)",
          "getSwapFee(address,address,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapPool.sol:ISyncswapPool": {
        "src": "contracts/interfaces/external/ISyncswapPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token0()",
          "token1()",
          "getReserves()",
          "getAmountOut(address,uint256,address)",
          "getAmountIn(address,uint256,address)",
          "swap(bytes,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/SyncswapClassicDEXIntegration.sol:SyncswapClassicDEXIntegration": {
        "src": "contracts/SyncswapClassicDEXIntegration.sol:11",
        "version": {
          "withMetadata": "54fc62371729807862a7235e57384c23567dc78afc363b91a91efab25f776a1e",
          "withoutMetadata": "f20daf4c647aa1191f989195becb6c540c96d0fd89f3d823e8fdee63216b0cc0",
          "linkedWithoutMetadata": "f20daf4c647aa1191f989195becb6c540c96d0fd89f3d823e8fdee63216b0cc0"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicDEXIntegration",
            "src": "contracts/SyncswapClassicDEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapClassicDEXIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapFactory.sol:ISyncswapFactory": {
        "src": "contracts/interfaces/external/ISyncswapFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapPool.sol:ISyncswapPool": {
        "src": "contracts/interfaces/external/ISyncswapPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token0()",
          "token1()",
          "getReserves()",
          "getAmountOut(address,uint256,address)",
          "getAmountIn(address,uint256,address)",
          "swap(bytes,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapClassicDEXIntegration.sol:SyncswapClassicDEXIntegration": {
        "src": "contracts/SyncswapClassicDEXIntegration.sol:11",
        "version": {
          "withMetadata": "1689c87a0bb03d529dd005f656f18b95a065b0fb1bd514c4f9e262862c6271e7",
          "withoutMetadata": "9e6a2cbc1608ce3fa34741a127bc5035aa9c463ff58e591508230af37511ad1c",
          "linkedWithoutMetadata": "9e6a2cbc1608ce3fa34741a127bc5035aa9c463ff58e591508230af37511ad1c"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicDEXIntegration",
            "src": "contracts/SyncswapClassicDEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapClassicDEXIntegration.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/SyncswapClassicDEXIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/SyncswapClassicPriceFeedIntegration.sol:SyncswapClassicPriceFeedIntegration": {
        "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:11",
        "version": {
          "withMetadata": "71ca353a85eefd333664f3b516aaf0287dbbc107027ebbd293450e4553f2fccc",
          "withoutMetadata": "cf4aafa942b683c448ba9dd6a23ba0d4a0d378ea3d7fb288f483f430c4b7a39d",
          "linkedWithoutMetadata": "cf4aafa942b683c448ba9dd6a23ba0d4a0d378ea3d7fb288f483f430c4b7a39d"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicPriceFeedIntegration",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/SyncswapClassicPriceFeedIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UniswapV3DEXIntegration.sol:UniswapV3DEXIntegration": {
        "src": "contracts/UniswapV3DEXIntegration.sol:13",
        "version": {
          "withMetadata": "e8097ca5016d20dfb9a67d783e1458f1cb1f65648af3e789372df3656a647b7b",
          "withoutMetadata": "3379e0a8cf4cfba52050b6ce73fe28a0a2c10df43e346d7cad27d3913ea625df",
          "linkedWithoutMetadata": "3379e0a8cf4cfba52050b6ce73fe28a0a2c10df43e346d7cad27d3913ea625df"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3DEXIntegration",
            "src": "contracts/UniswapV3DEXIntegration.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/UniswapV3DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "quoter",
            "src": "contracts/UniswapV3DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/UniswapV3DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3DEXIntegration",
              "src": "contracts/UniswapV3DEXIntegration.sol:17"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUniswapV3StaticQuoter.sol:IUniswapV3StaticQuoter": {
        "src": "contracts/interfaces/IUniswapV3StaticQuoter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quoteExactInput(bytes,uint256)",
          "quoteExactInputSingle((address,address,uint256,uint24,uint160))",
          "quoteExactOutput(bytes,uint256)",
          "quoteExactOutputSingle((address,address,uint256,uint24,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapFactory.sol:ISyncswapFactory": {
        "src": "contracts/interfaces/external/ISyncswapFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapPool.sol:ISyncswapPool": {
        "src": "contracts/interfaces/external/ISyncswapPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token0()",
          "token1()",
          "getReserves()",
          "getAmountOut(address,uint256,address)",
          "getAmountIn(address,uint256,address)",
          "swap(bytes,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "bbc59087ab1f99190e6eff9ffb45019d7c117c1fe3bce85ce95fa62b87fb1579",
          "withoutMetadata": "7e65b04d413369b738c5fc7270e891d1ef38d1e8ecc0ce1d9711ce68636d8e87",
          "linkedWithoutMetadata": "7e65b04d413369b738c5fc7270e891d1ef38d1e8ecc0ce1d9711ce68636d8e87"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "5c3f0d6a31045e3c9ce1181d47cd36f2e4b31e7ef47cc7f1b5b6e36b20778e37",
          "withoutMetadata": "c7e6e9dee4230b7efcf65a5dbf7cd546b08b8e3840281bcb5a60e9bb9285caea",
          "linkedWithoutMetadata": "c7e6e9dee4230b7efcf65a5dbf7cd546b08b8e3840281bcb5a60e9bb9285caea"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)2398_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)2398_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)2398_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)2398_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "2b950d05288b20749ff04489789ae42e7962264202dda761b0d6d2c081593719",
          "withoutMetadata": "fd1a7c37473ef16b2cb66892b46fca34d53fdbdce1e7552464960a1966393dd9",
          "linkedWithoutMetadata": "fd1a7c37473ef16b2cb66892b46fca34d53fdbdce1e7552464960a1966393dd9"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,uint256,uint256,uint256)",
          "setManager(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep()",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "97549827ac30106268e00ecbda53fd87e6ea784d3e0c073cb02d45b6afc9d5a7",
          "withoutMetadata": "ce0db52b9605b7c6acb4d075bfc6e5f98252e19c0cce9008c082e2719f6a8eed",
          "linkedWithoutMetadata": "ce0db52b9605b7c6acb4d075bfc6e5f98252e19c0cce9008c082e2719f6a8eed"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep()",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:14"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)1321_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:16"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)1321_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)1321_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)1321_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "7bc504a71aecaf3d506b179a9af6da1fcb1c705ca5961377e3ab0a9a97a7bd31",
          "withoutMetadata": "ce0db52b9605b7c6acb4d075bfc6e5f98252e19c0cce9008c082e2719f6a8eed",
          "linkedWithoutMetadata": "ce0db52b9605b7c6acb4d075bfc6e5f98252e19c0cce9008c082e2719f6a8eed"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep()",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:14"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)1321_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:16"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)1321_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)1321_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)1321_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "b5f40a700deb6ba895f478369383a8ff71ba1fe893f5f345b56d447bc755a636",
          "withoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d",
          "linkedWithoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/ChainlinkPriceFeedIntegration.sol:ChainlinkPriceFeedIntegration": {
        "src": "contracts/ChainlinkPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "986661259314b8dda5bc235e738e8918f7acf6a64bca87d9f5c1fb79948db123",
          "withoutMetadata": "a1b4c6a8deb24a2deebaeb9f3a4b0bd3cbcb2d7ea8fe00232e8378e959b5b912",
          "linkedWithoutMetadata": "a1b4c6a8deb24a2deebaeb9f3a4b0bd3cbcb2d7ea8fe00232e8378e959b5b912"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setPriceFeed(address,address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ChainlinkPriceFeedIntegration",
            "src": "contracts/ChainlinkPriceFeedIntegration.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/ChainlinkPriceFeedIntegration.sol:9"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/ChainlinkPriceFeedIntegration.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/DEXAggregator.sol:DEXAggregator": {
        "src": "contracts/DEXAggregator.sol:10",
        "version": {
          "withMetadata": "652b61467d1c998e3b1aaaa7f83518d2b7fc5d9a6e372f2d63755cb58408dcff",
          "withoutMetadata": "c848892088092598fada4d1da902c15b4f32c7b11f019e1cde9123cfce5d97a4",
          "linkedWithoutMetadata": "c848892088092598fada4d1da902c15b4f32c7b11f019e1cde9123cfce5d97a4"
        },
        "inherit": [
          "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "dexLength()",
          "setManager(address)",
          "addDEX(address,string)",
          "removeDEX(address)",
          "validatePair(address,address,address)",
          "getAmountOut(address,address,address,uint256)",
          "getAmountIn(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)",
          "rescueFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DEXAggregator",
            "src": "contracts/DEXAggregator.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:11"
            },
            {
              "label": "dexes",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:12"
            },
            {
              "label": "dexNames",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:13"
            },
            {
              "label": "dexIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "c8e009465a14cc1443f19cef13f61d8cb2e656e82c4b26252c65afb290d0071f",
          "withoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1",
          "linkedWithoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/GMXPriceFeedIntegration.sol:GMXPriceFeedIntegration": {
        "src": "contracts/GMXPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "56bcc38192a9966d1a4d801b094ed1dc7f04b18fa5a196a69f1284052f703c87",
          "withoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1",
          "linkedWithoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GMXPriceFeedIntegration",
            "src": "contracts/GMXPriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "feed",
            "src": "contracts/GMXPriceFeedIntegration.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "97bc813a41c903adce8f217d8850def7cbd25336bb20d6b9448be468eef5e55e",
          "withoutMetadata": "ad5baf3c50c60e7046a1c9bbea9acb151509b64ee81f21289402e32128a3e778",
          "linkedWithoutMetadata": "ad5baf3c50c60e7046a1c9bbea9acb151509b64ee81f21289402e32128a3e778"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "9beddaf04eb84f55ec6a8cbcd223626f548d39d2d5be9fd8e28876a3ea33b642",
          "withoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c",
          "linkedWithoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)7386_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)7386_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)7386_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "90716d57182e6fe886ef0049ee0e6d122cfb76034265f6dfbf872d8d5cde85ea",
          "withoutMetadata": "d537e217aac6adeea55746520162b784d1ba6f517403e2fdbf9a5f25a6b298cf",
          "linkedWithoutMetadata": "d537e217aac6adeea55746520162b784d1ba6f517403e2fdbf9a5f25a6b298cf"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)20799_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)20799_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)20799_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "8f5343aaae78696bc10b365a21060e577f2633e584f1b25263dde0979cdc5ac8",
          "withoutMetadata": "c6ed6e0ea6b8d49cf880d6f4058a2a374701bcb8bb414aa625fa35b26781fd63",
          "linkedWithoutMetadata": "c6ed6e0ea6b8d49cf880d6f4058a2a374701bcb8bb414aa625fa35b26781fd63"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "8b310ff979ae3068eee54ba5f0b2725ce68533f2cf8c2059e39775f27eba90ad",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "1b585cf304570ce93c3b1bf7b73a9c4e5e9e7bfeab22ed3be3a119b579236fb1",
          "withoutMetadata": "aa5ebac7ad629cd2b104c03689f69a06847b8646d435c0e16ecac232d52bf4ff",
          "linkedWithoutMetadata": "aa5ebac7ad629cd2b104c03689f69a06847b8646d435c0e16ecac232d52bf4ff"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)21080_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)21080_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)21018_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)21034_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)21023_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)21051_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)21080_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)21018_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)21023_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)21034_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)21051_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:8",
        "version": {
          "withMetadata": "f5336d04bd9fc4052af373bf59d10f769e789a77157cb2326855242cff98fffa",
          "withoutMetadata": "b283620c8f3045649c1b429d323c04add024ed4f1bc995ed229fd1d17ad16ae0",
          "linkedWithoutMetadata": "b283620c8f3045649c1b429d323c04add024ed4f1bc995ed229fd1d17ad16ae0"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "29ec5fd59a4fbf453132280701cc446585d53d24755939a5751b639ada76d32d",
          "withoutMetadata": "c064f83e6f32654fba1ed74835fbf5fd05cefbf1c13a0ff353d852237a88d9a3",
          "linkedWithoutMetadata": "c064f83e6f32654fba1ed74835fbf5fd05cefbf1c13a0ff353d852237a88d9a3"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TokenReader.sol:TokenReader": {
        "src": "contracts/TokenReader.sol:7",
        "version": {
          "withMetadata": "52212c71b527901f7ed2b87d48831b9f07dcd926905c390834a4bb7d20c65844",
          "withoutMetadata": "0be53cc073628c4c85649aa0069c1ae0af9b142c4d826ffea9e4d244edf0a446",
          "linkedWithoutMetadata": "0be53cc073628c4c85649aa0069c1ae0af9b142c4d826ffea9e4d244edf0a446"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenSupplies(address[])",
          "getTokenDecimals(address[])",
          "getTokensBalance(address,address[])",
          "getTokenBalances(address[],address)",
          "getTokensAllowance(address,address[],address)",
          "getTokenAllowances(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "293d8da9e2eab79f70460e4ec5b2759185dac0e8dceefa15be96560b20b9e648",
          "withoutMetadata": "167be4e0f660145748b07789e9e9bc7a9223bd2cf5a05228f979082a806e00ab",
          "linkedWithoutMetadata": "167be4e0f660145748b07789e9e9bc7a9223bd2cf5a05228f979082a806e00ab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UniswapV3DEXIntegration.sol:UniswapV3DEXIntegration": {
        "src": "contracts/UniswapV3DEXIntegration.sol:13",
        "version": {
          "withMetadata": "b27650581a9d9ac1899a1f33ee65fccddc78d70a7bf03567f3e73c15f5efde51",
          "withoutMetadata": "4b55ceedeeb554e53bbb0eeb3377b22db63d8f84097a3b9b2b044ec36d13a30a",
          "linkedWithoutMetadata": "4b55ceedeeb554e53bbb0eeb3377b22db63d8f84097a3b9b2b044ec36d13a30a"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3DEXIntegration",
            "src": "contracts/UniswapV3DEXIntegration.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/UniswapV3DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "quoter",
            "src": "contracts/UniswapV3DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/UniswapV3DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3DEXIntegration",
              "src": "contracts/UniswapV3DEXIntegration.sol:17"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UniswapV3PriceFeedIntegration.sol:UniswapV3PriceFeedIntegration": {
        "src": "contracts/UniswapV3PriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "00d6366cf11b76cdbbb9dc2a6fb8b901796a67626f061964385e0e73a5103258",
          "withoutMetadata": "dd59876f07e21a9fd702f486b4120e238a28f285c2f84045b6d82a7bc8b49ac4",
          "linkedWithoutMetadata": "dd59876f07e21a9fd702f486b4120e238a28f285c2f84045b6d82a7bc8b49ac4"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3PriceFeedIntegration",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3PriceFeedIntegration",
              "src": "contracts/UniswapV3PriceFeedIntegration.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UserStorage.sol:UserStorage": {
        "src": "contracts/UserStorage.sol:6",
        "version": {
          "withMetadata": "9efb8255a90cf382cadc4e092a4f15134d7e17c3c8a3a364427323b466d3c2d8",
          "withoutMetadata": "a5a817d3feabd5b3bd55b7fc85da175072baf6b9b650ba7c5c3c3e76adad883d",
          "linkedWithoutMetadata": "a5a817d3feabd5b3bd55b7fc85da175072baf6b9b650ba7c5c3c3e76adad883d"
        },
        "inherit": [
          "contracts/interfaces/IUserStorage.sol:IUserStorage"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setOperators(address[],bool[])",
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserStorage",
            "src": "contracts/UserStorage.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:7"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:8"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(User)21665_storage)",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)21665_storage)": {
              "label": "mapping(address => struct IUserStorage.User)",
              "numberOfBytes": "32"
            },
            "t_struct(User)21665_storage": {
              "label": "struct IUserStorage.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ref",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "membershipLevel",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "0713178c3be099c947f196230ed5db908f76b854140d5a756ca838de45f5b1cf",
          "withoutMetadata": "72e1ce643a9c8397725f0787c521cc4ab0d1a2bba64f854f27bf2412f48904ed",
          "linkedWithoutMetadata": "72e1ce643a9c8397725f0787c521cc4ab0d1a2bba64f854f27bf2412f48904ed"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)21721_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)21721_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)21721_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)21721_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BancorConverterRegistry.sol:BancorConverterRegistry": {
        "src": "contracts/base/BancorConverterRegistry.sol:19",
        "version": {
          "withMetadata": "1a995fa9a87f1aef582e6f09a348162d62afb54ea7b59e39204ed1365ff93c8d",
          "withoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4",
          "linkedWithoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4"
        },
        "inherit": [
          "contracts/base/Utils.sol:Utils",
          "contracts/base/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "()",
          "tokenCount()",
          "converterCount(address)",
          "converterAddress(address,uint32)",
          "tokenAddress(address)",
          "registerConverter(address,address)",
          "unregisterConverter(address,uint32)",
          "blockStamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:5"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            },
            {
              "label": "tokensRegistered",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:20"
            },
            {
              "label": "tokensToConverters",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:21"
            },
            {
              "label": "convertersToTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:22"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Owned.sol:Owned": {
        "src": "contracts/base/Owned.sol:4",
        "version": {
          "withMetadata": "93af4148f55906b4f83e6c2eeee5574e4a11d315b096e92bbe4ffa75fbf8d016",
          "withoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e",
          "linkedWithoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/base/Owned.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:5"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Utils.sol:Utils": {
        "src": "contracts/base/Utils.sol:5",
        "version": {
          "withMetadata": "1319214db52a256fca678a8aace0fabd358c97435d582ffe66a9800a7cfe378f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IChainlinkPriceFeed.sol:IChainlinkPriceFeed": {
        "src": "contracts/interfaces/IChainlinkPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IGMXPriceFeed.sol:IGMXPriceFeed": {
        "src": "contracts/interfaces/IGMXPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "prices(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMulticall.sol:IMulticall": {
        "src": "contracts/interfaces/IMulticall.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUniswapV3StaticQuoter.sol:IUniswapV3StaticQuoter": {
        "src": "contracts/interfaces/IUniswapV3StaticQuoter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quoteExactInput(bytes,uint256)",
          "quoteExactInputSingle((address,address,uint256,uint24,uint160))",
          "quoteExactOutput(bytes,uint256)",
          "quoteExactOutputSingle((address,address,uint256,uint24,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "92b96b0e1b0b1ca80d2f1b4eae8b5e368156f63362cbe1562b20d2f14a20ad3c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/Math.sol:Math": {
        "src": "contracts/libraries/Math.sol:6",
        "version": {
          "withMetadata": "b9190c0d994b90df3e266d2e1d1ad480292ffab0d4d6fc0f60b1bcfa86583cf0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "890b52cf86163caa6f96352ee70aedbcfd6481c9724437aac6a625a169f7650b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/MockERC20.sol:MockERC20": {
        "src": "contracts/test/MockERC20.sol:7",
        "version": {
          "withMetadata": "e22f060894d72e4a40ffb029232fd094a5d0b8f49ea2ca30b43adfcd74ffc833",
          "withoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035",
          "linkedWithoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/test/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/test/USDT.sol:Context": {
        "src": "contracts/test/USDT.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:ERC20": {
        "src": "contracts/test/USDT.sol:376",
        "version": {
          "withMetadata": "d6ab05a65c86d041baf1a28ef001020816abdbcf012046909f52cfb8a255bd2b",
          "withoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac",
          "linkedWithoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac"
        },
        "inherit": [
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [
          "contracts/test/USDT.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/USDT.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:IERC20": {
        "src": "contracts/test/USDT.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:LowGasSafeMath": {
        "src": "contracts/test/USDT.sol:127",
        "version": {
          "withMetadata": "20cc5c3d87189c1fa49d3a6113d18cc0ae824a1a5c30083375f9747386ddb5f3",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:Ownable": {
        "src": "contracts/test/USDT.sol:720",
        "inherit": [
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/USDT.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/USDT.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:USDT": {
        "src": "contracts/test/USDT.sol:778",
        "version": {
          "withMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "withoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "linkedWithoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559"
        },
        "inherit": [
          "contracts/test/USDT.sol:ERC20",
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "USDT",
            "src": "contracts/test/USDT.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/USDT.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct USDT.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct USDT.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct USDT.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WBTC.sol:Context": {
        "src": "contracts/test/WBTC.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:ERC20": {
        "src": "contracts/test/WBTC.sol:376",
        "version": {
          "withMetadata": "30f38635d5b2575c3374f2bdc3e0a1f38e76ee4b7ace3587e6d8a07bd389303c",
          "withoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176",
          "linkedWithoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176"
        },
        "inherit": [
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [
          "contracts/test/WBTC.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/WBTC.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:IERC20": {
        "src": "contracts/test/WBTC.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:LowGasSafeMath": {
        "src": "contracts/test/WBTC.sol:127",
        "version": {
          "withMetadata": "2c52ed7f3a33755dbc18e17c0d34a97909802ae73ec7312c33f5dcda63c8122c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:Ownable": {
        "src": "contracts/test/WBTC.sol:720",
        "inherit": [
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/WBTC.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/WBTC.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:WBTC": {
        "src": "contracts/test/WBTC.sol:778",
        "version": {
          "withMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "withoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "linkedWithoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171"
        },
        "inherit": [
          "contracts/test/WBTC.sol:ERC20",
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WBTC",
            "src": "contracts/test/WBTC.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/WBTC.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct WBTC.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct WBTC.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct WBTC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WETH.sol:WETH": {
        "src": "contracts/test/WETH.sol:24",
        "version": {
          "withMetadata": "915665bff19f0dfc1b2bdf84382799d66871950cd15494e34b93266beb48432e",
          "withoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3",
          "linkedWithoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/test/WETH.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/test/WETH.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/test/WETH.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:25"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:26"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "2",
              "type": "t_uint8",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:27"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:34"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    }
  ]
}