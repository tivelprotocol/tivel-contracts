{
  "version": "3.4",
  "log": [
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "749609747480bbef9e6b92641d68faffee514acb16aea8e0ec669d303c27bd54",
          "withoutMetadata": "2e820dc22cab920bbc87eba3274e549f48d84c4b88d6dbc0f1d4f29971ff9c20",
          "linkedWithoutMetadata": "2e820dc22cab920bbc87eba3274e549f48d84c4b88d6dbc0f1d4f29971ff9c20"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3062_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3062_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2998_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3014_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3003_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3031_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3062_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2998_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3003_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3014_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3031_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "04c7fac274f9e9e89fd0bcf64125e5cb8d2b18b71ac7be3ef593a1efabe89592",
          "withoutMetadata": "2e820dc22cab920bbc87eba3274e549f48d84c4b88d6dbc0f1d4f29971ff9c20",
          "linkedWithoutMetadata": "2e820dc22cab920bbc87eba3274e549f48d84c4b88d6dbc0f1d4f29971ff9c20"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3063_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3063_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2999_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3015_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3004_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3032_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3063_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2999_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3004_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3015_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3032_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "8496d0a80f6554511866d03f863c8e353b5b14055c97af68ccd605aee591c2b9",
          "withoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8",
          "linkedWithoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3372_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3372_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3308_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3324_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3313_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3341_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3372_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3308_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3313_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3324_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3341_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "4f796e4c9a97d432e778d033a3024461f63202d19a967ce8d68302287b5e2f25",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "5422482c0bd9f6fbfe2e9d1ce9dd527460abcac2ae7589d79612e9333921c3d6",
          "withoutMetadata": "7c8fd287f3d61a5532fccfe4dc758b078f3d04824c355ed9efd13e0d14fd695a",
          "linkedWithoutMetadata": "7c8fd287f3d61a5532fccfe4dc758b078f3d04824c355ed9efd13e0d14fd695a"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3070_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3070_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3006_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3022_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3011_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3039_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3070_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3006_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3011_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3022_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3039_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "caa2a75f4626955e6aa9d325d3cb4f30e2619163fa56cf2fcbf4ddb67b4d454c",
          "withoutMetadata": "a390c67f01664d1cbe7f2d1ec04e08ef5651cc53d76fe244b1d31b9ac43bc3cc",
          "linkedWithoutMetadata": "a390c67f01664d1cbe7f2d1ec04e08ef5651cc53d76fe244b1d31b9ac43bc3cc"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3100_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3100_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3036_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3052_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3041_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3069_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3100_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3036_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3041_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3052_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3069_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "9427c81ba86d32ab0d65b01c81341e1aaf76da2b74c24ffa143c432d98129738",
          "withoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8",
          "linkedWithoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3057_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3057_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2993_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3009_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2998_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3026_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3057_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2993_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2998_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3009_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3026_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "0b1b6d65e5b8abf0c73eabadb2e6aa5bff7b7639cac570226ad4ad3a9dc4c9c2",
          "withoutMetadata": "b6208d08695ae1aaaa7ddb7ab99f78220f04d6b62d7b22ce333e8b35e3eff16a",
          "linkedWithoutMetadata": "b6208d08695ae1aaaa7ddb7ab99f78220f04d6b62d7b22ce333e8b35e3eff16a"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3080_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3080_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3016_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3032_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3021_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3049_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3080_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3016_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3021_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3032_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3049_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/test/Time.sol:Time": {
        "src": "contracts/test/Time.sol:4",
        "version": {
          "withMetadata": "d71a8a6be76913776ab1c8849df109fa04bde494c96e1dc14ba37fa7d1b44a09",
          "withoutMetadata": "6cd897cbcd3ae411922cd054cdb934f51756c4d6c5c7d937d756049fb5f9862d",
          "linkedWithoutMetadata": "6cd897cbcd3ae411922cd054cdb934f51756c4d6c5c7d937d756049fb5f9862d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "timestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:8",
        "version": {
          "withMetadata": "6e4a7b533d3d7dc8b0b1a6e19ee9decde8e288f290586a626c20429067f6e9e6",
          "withoutMetadata": "bb39a70ade4931b616cfc82d48d58c162f7970640706dc56629967a8f905c4dd",
          "linkedWithoutMetadata": "bb39a70ade4931b616cfc82d48d58c162f7970640706dc56629967a8f905c4dd"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:8",
        "version": {
          "withMetadata": "f051532b3a1d89dedcbb92f92c865828f403d40b31a11d660ac21ccebef43312",
          "withoutMetadata": "2adeabb043c6da7c9dd784af8b9cb33b7f54f29d3f4c966efdebc418531cd6c6",
          "linkedWithoutMetadata": "2adeabb043c6da7c9dd784af8b9cb33b7f54f29d3f4c966efdebc418531cd6c6"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "575997937b5e618d51a36ccae65df6b6e524be04b7adb2942373e018e08fc889",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "cd293b2b15f9fbcb82da35a17af8dabfe8339fabe3c5117abb9025b58cd3dfdf",
          "withoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9",
          "linkedWithoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "9427c81ba86d32ab0d65b01c81341e1aaf76da2b74c24ffa143c432d98129738",
          "withoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8",
          "linkedWithoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)10823_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)10823_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10759_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10775_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10764_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10792_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10823_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10759_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10764_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10775_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10792_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "bf14a92e837e8501feb189e9aeb89b1130398db138ef8a59a55c9629f6dda7ad",
          "withoutMetadata": "d33060710ffbefbaefc3f88350980791452d985579c822f87322ccfd06c925d3",
          "linkedWithoutMetadata": "d33060710ffbefbaefc3f88350980791452d985579c822f87322ccfd06c925d3"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "6752e1dadceda7c65a115c220bad5aeb2b30cfd3cd0264f16cedcc886ffdfdd6",
          "withoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf",
          "linkedWithoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11389_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "6a6eec0149984eb16fd137c5ba5a601e1f72ecc5ece5a23747ceee690f2e6964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "6c6a3125043137214ba9fce2fbc49163378d28fdd84e53dba5c0af27a794e0bf",
          "withoutMetadata": "fb64c411507baf5de0272abb49e667a97d69a0a6f3a4196ad6a4f35c64123a92",
          "linkedWithoutMetadata": "fb64c411507baf5de0272abb49e667a97d69a0a6f3a4196ad6a4f35c64123a92"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3730_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3730_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3730_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "c752fcf0be560ce17b196404281bbe7b12902120a3eb850c244044ac61b42f38",
          "withoutMetadata": "e7c7951e879a5f893f29c629315346340b932694c0aaffdb168405b00a0e2cab",
          "linkedWithoutMetadata": "e7c7951e879a5f893f29c629315346340b932694c0aaffdb168405b00a0e2cab"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:8",
        "version": {
          "withMetadata": "6e4a7b533d3d7dc8b0b1a6e19ee9decde8e288f290586a626c20429067f6e9e6",
          "withoutMetadata": "bb39a70ade4931b616cfc82d48d58c162f7970640706dc56629967a8f905c4dd",
          "linkedWithoutMetadata": "bb39a70ade4931b616cfc82d48d58c162f7970640706dc56629967a8f905c4dd"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "0fc3d26be4a2d1fd08209e2fe72747b957749a66f125ab3a7d25d90522dba2bc",
          "withoutMetadata": "1b43a8dea8f2b6952238ac5cc77450665cf024dd47053f8929b44e31727cea45",
          "linkedWithoutMetadata": "1b43a8dea8f2b6952238ac5cc77450665cf024dd47053f8929b44e31727cea45"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "3d8360257db33b10567a7976913f8af56bec10cd407d67f452daca707a903208",
          "withoutMetadata": "b7c7f7ec1ea65a5f5db6d7483d2e08957d90b1c0db96b2b7a73f8ddc288c5c48",
          "linkedWithoutMetadata": "b7c7f7ec1ea65a5f5db6d7483d2e08957d90b1c0db96b2b7a73f8ddc288c5c48"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)10823_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)10823_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10759_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10775_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10764_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10792_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10823_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10759_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10764_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10775_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10792_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "0407ca631c4486f6be5916055aecc94d343b0641d873da3aa0ca0d25840182b2",
          "withoutMetadata": "ce454d4feebe193293b117677ae45b20ea8cdbf045f1e498aaa31dacf072990c",
          "linkedWithoutMetadata": "ce454d4feebe193293b117677ae45b20ea8cdbf045f1e498aaa31dacf072990c"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "f6fc67f69990ee5ae08e06f73311daa38975d459d6981129ea4a22ad7816bd8b",
          "withoutMetadata": "7a122c55326eef9c180a063387a7a3497f1f7e7e9ced31837508d9c836abbb17",
          "linkedWithoutMetadata": "7a122c55326eef9c180a063387a7a3497f1f7e7e9ced31837508d9c836abbb17"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11389_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "5554cc5e38514c6c0967f07b706ade62dff3944cb294db05359bb0235fdd9f22",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "fa3f27456211afc123f39c0393f116361b6ed7dbe28d5ee4fdecd570d31bc48d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "5bc27b422ca4eb10123cca78a51907153f6f3d3028965bd324ff964c94449822",
          "withoutMetadata": "d42bf93836eb47af6ee79f878974860a5452d0e7b0a5b916ce753c26abfde1f5",
          "linkedWithoutMetadata": "d42bf93836eb47af6ee79f878974860a5452d0e7b0a5b916ce753c26abfde1f5"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3745_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3745_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3745_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "63ad6a077e1b5dd54ee6103049edf187a45ab58e3ffbcc96c7dd5ded6874fd23",
          "withoutMetadata": "6cbe42b619890985464ed3956ce3ba3c2abac173581bf270001f2332e61fd227",
          "linkedWithoutMetadata": "6cbe42b619890985464ed3956ce3ba3c2abac173581bf270001f2332e61fd227"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "9934233a10b869d6de61fa675a07e342d67f69078c09b6e47eb0e6faefbc8c65",
          "withoutMetadata": "22c3a0981a6c24358b20713d2e76a6c6f352656061cafea912e9e9d1c471d0db",
          "linkedWithoutMetadata": "22c3a0981a6c24358b20713d2e76a6c6f352656061cafea912e9e9d1c471d0db"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3735_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3735_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3735_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "c583f8ebbbc48a3bae3328ebe93976e1e46b479f7ed8a4b1df4c8d44cca6a855",
          "withoutMetadata": "508d8ea43c380b9c8b50fa5ce6bb59d1b3528146b5af48e6ef1a0a806630a5a7",
          "linkedWithoutMetadata": "508d8ea43c380b9c8b50fa5ce6bb59d1b3528146b5af48e6ef1a0a806630a5a7"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "b3837324168d3583c7c7b6eba35ffaeeb0e0c680d2041d22c4584909702eac83",
          "withoutMetadata": "89c25d07a38294c2f14e86edf77847dd30a54b836c03a8ed93d75b6dcafb6179",
          "linkedWithoutMetadata": "89c25d07a38294c2f14e86edf77847dd30a54b836c03a8ed93d75b6dcafb6179"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "c34a148459a1b8350114e12e34a6653d1190abe064dd0792a4a03e696deed92b",
          "withoutMetadata": "75da5f862d9d9c4ebaf212449995d576154d03c3227e039c12ff75e163ab6822",
          "linkedWithoutMetadata": "75da5f862d9d9c4ebaf212449995d576154d03c3227e039c12ff75e163ab6822"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)10823_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)10823_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10759_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10775_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10764_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10792_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10823_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10759_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10764_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10775_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10792_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "5e3a334794a75b9848f7fd8890937a19cd05b1dbda9d1e1436ed99ae5c5dcc23",
          "withoutMetadata": "1a98b96e7a25581931531a436de8e2f479d9dd4ce22b4beb8e10e4102f113924",
          "linkedWithoutMetadata": "1a98b96e7a25581931531a436de8e2f479d9dd4ce22b4beb8e10e4102f113924"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "c9efcc7cf212c50af0ecc674b9dd3070fecc6a4e4a4c955d0c1ab460e1c6764e",
          "withoutMetadata": "7655e3260e678ccc3899de978268adbe7c2284fffbaeba553033d08c29a2a7ac",
          "linkedWithoutMetadata": "7655e3260e678ccc3899de978268adbe7c2284fffbaeba553033d08c29a2a7ac"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11389_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "c48ae52f5231b8d067e16de29b588efdd38728b6912928f3d4fc56f309c759f1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "aea99d1126968983b35c9818f2d233d6fed661c6c5956f3afdc2e712d089709b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "7501a77a2a23109d89efb43ba57869ef6125e615b91b41217d8a731738013309",
          "withoutMetadata": "fb64c411507baf5de0272abb49e667a97d69a0a6f3a4196ad6a4f35c64123a92",
          "linkedWithoutMetadata": "fb64c411507baf5de0272abb49e667a97d69a0a6f3a4196ad6a4f35c64123a92"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3730_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3730_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3730_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "ef5c55d869d2fb9fd9492cc3be0aefb54f3a1e229c68c9ddfd51d6588efd19f2",
          "withoutMetadata": "bd5351c590ba26b499992b161a0e8f0e7d05e8276275ce56427f5135d68858f9",
          "linkedWithoutMetadata": "bd5351c590ba26b499992b161a0e8f0e7d05e8276275ce56427f5135d68858f9"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "1e79f24b518a23f933542e1cfc1d796a9ac80180c8514afbfb340a77fb0fbc1f",
          "withoutMetadata": "c084111b1a731525d1557ae3e13576a4b9bf98e32f3c15e5d5a1b15b5479ef24",
          "linkedWithoutMetadata": "c084111b1a731525d1557ae3e13576a4b9bf98e32f3c15e5d5a1b15b5479ef24"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "0e330777ed9c265392b7db126288b819d0c1811037a1f36259263fd55e661ee6",
          "withoutMetadata": "1bbb14285f0f4b152727ca8732db65692fc494dace3f053ce0a3802347528348",
          "linkedWithoutMetadata": "1bbb14285f0f4b152727ca8732db65692fc494dace3f053ce0a3802347528348"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)10823_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)10823_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10759_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10775_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10764_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10792_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10823_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10759_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10764_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10775_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10792_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "2f430a5602a30f6bcf19f4c8b9aabb7e507115dc06ba051fd3c370205c643d9c",
          "withoutMetadata": "10c4e0d7640392d62d6544308da81821bef61fbefe0c7d5e55531b3bcaaa66aa",
          "linkedWithoutMetadata": "10c4e0d7640392d62d6544308da81821bef61fbefe0c7d5e55531b3bcaaa66aa"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "fefac6840fc91efd7505247a00a59ac0673b3b510f161fee123df9784f45e26e",
          "withoutMetadata": "fe764d44597f9505ed2b2270310404dd5571a88af46b6c2eb3e4d32a0cefc516",
          "linkedWithoutMetadata": "fe764d44597f9505ed2b2270310404dd5571a88af46b6c2eb3e4d32a0cefc516"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11389_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "d6295668537afc0a7cb923c19e1760f9b159628d9ededb693c001cc852d8b769",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "290dce3493e72c21763692b96c34bf18c215676e89d73e10cc69361f2e74a999",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "b5f40a700deb6ba895f478369383a8ff71ba1fe893f5f345b56d447bc755a636",
          "withoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d",
          "linkedWithoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/DEXAggregator.sol:DEXAggregator": {
        "src": "contracts/DEXAggregator.sol:10",
        "version": {
          "withMetadata": "652b61467d1c998e3b1aaaa7f83518d2b7fc5d9a6e372f2d63755cb58408dcff",
          "withoutMetadata": "c848892088092598fada4d1da902c15b4f32c7b11f019e1cde9123cfce5d97a4",
          "linkedWithoutMetadata": "c848892088092598fada4d1da902c15b4f32c7b11f019e1cde9123cfce5d97a4"
        },
        "inherit": [
          "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "dexLength()",
          "setManager(address)",
          "addDEX(address,string)",
          "removeDEX(address)",
          "validatePair(address,address,address)",
          "getAmountOut(address,address,address,uint256)",
          "getAmountIn(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)",
          "rescueFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DEXAggregator",
            "src": "contracts/DEXAggregator.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:11"
            },
            {
              "label": "dexes",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:12"
            },
            {
              "label": "dexNames",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:13"
            },
            {
              "label": "dexIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "72cfcbeaaccb1482fd556bc9e02d4461d8df1280d4693d2230db37f567cbd6ee",
          "withoutMetadata": "dc459938d34a78b6e9bb259a50050535f81f2903bad85e28f495269742a2c1c0",
          "linkedWithoutMetadata": "dc459938d34a78b6e9bb259a50050535f81f2903bad85e28f495269742a2c1c0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "b2a9dac1ecb5315d14c099739d262b5c8794b3356d4bbd727958a4262de96430",
          "withoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8",
          "linkedWithoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "3997273e83321690f28dc6a5b766755ebebb49af3336b0e5b57513adc1b8d717",
          "withoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9",
          "linkedWithoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "2318fe197b5f99afc26edec0bb2c14434ece50fd80e26c5c235ba5df9b345f9c",
          "withoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c",
          "linkedWithoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)7834_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)7834_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)7834_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "52c874262fe854c6f5596399a091b83a4d1f1c4fa8e3a2b1e7b2da10513b6f42",
          "withoutMetadata": "d2a4d2db0c520170ed9b2f29402f93323a37225b0595dbf0bb98867c110bde51",
          "linkedWithoutMetadata": "d2a4d2db0c520170ed9b2f29402f93323a37225b0595dbf0bb98867c110bde51"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)23450_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)23450_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)23450_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "5101f430e514db149db2e4e7fbaf15481f68547e603b75d489ba80bc7ef656c8",
          "withoutMetadata": "b7fb20f2bd827a59501f43fdd899fef795207056919b15c4fd83c75718f4c005",
          "linkedWithoutMetadata": "b7fb20f2bd827a59501f43fdd899fef795207056919b15c4fd83c75718f4c005"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "ff154667a5c83a7a7864c4e727b5bf59d055d2298124e00341bab66816ed4313",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "a81a09a1a914758effecce8f646bbc06aeae3dbb478aa6de7232305f615791cd",
          "withoutMetadata": "cead1a4a52717973a729bf931cba7fbe6c4ec886d44082fa6717fce8b8335584",
          "linkedWithoutMetadata": "cead1a4a52717973a729bf931cba7fbe6c4ec886d44082fa6717fce8b8335584"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)23746_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)23746_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)23682_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)23698_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)23687_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)23715_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)23746_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)23682_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)23687_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)23698_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)23715_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:8",
        "version": {
          "withMetadata": "f5336d04bd9fc4052af373bf59d10f769e789a77157cb2326855242cff98fffa",
          "withoutMetadata": "b283620c8f3045649c1b429d323c04add024ed4f1bc995ed229fd1d17ad16ae0",
          "linkedWithoutMetadata": "b283620c8f3045649c1b429d323c04add024ed4f1bc995ed229fd1d17ad16ae0"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "d4a017eb151d6eaa0b3a9306ef72a428cff6bc0e44bd5f36c43acda287f98128",
          "withoutMetadata": "745f0a7d51ed740432993843cc919e3ff29f4b986f75531a8b90a7d25c659502",
          "linkedWithoutMetadata": "745f0a7d51ed740432993843cc919e3ff29f4b986f75531a8b90a7d25c659502"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TokenReader.sol:TokenReader": {
        "src": "contracts/TokenReader.sol:7",
        "version": {
          "withMetadata": "52212c71b527901f7ed2b87d48831b9f07dcd926905c390834a4bb7d20c65844",
          "withoutMetadata": "0be53cc073628c4c85649aa0069c1ae0af9b142c4d826ffea9e4d244edf0a446",
          "linkedWithoutMetadata": "0be53cc073628c4c85649aa0069c1ae0af9b142c4d826ffea9e4d244edf0a446"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenSupplies(address[])",
          "getTokenDecimals(address[])",
          "getTokensBalance(address,address[])",
          "getTokenBalances(address[],address)",
          "getTokensAllowance(address,address[],address)",
          "getTokenAllowances(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "44e133a4ef621ae923a17982fb0a6435e6cd093cdba1f900b62cd8bf7cb2650d",
          "withoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1",
          "linkedWithoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UserStorage.sol:UserStorage": {
        "src": "contracts/UserStorage.sol:6",
        "version": {
          "withMetadata": "7e9a99d08d2e511f6cd13b35769511072808487a08d3134cc4cd3045bd827f91",
          "withoutMetadata": "de4b1f95344e654a4aeea1fe4262d262a1eee9cf95270e3ca16b704d65aa593c",
          "linkedWithoutMetadata": "de4b1f95344e654a4aeea1fe4262d262a1eee9cf95270e3ca16b704d65aa593c"
        },
        "inherit": [
          "contracts/interfaces/IUserStorage.sol:IUserStorage"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setOperators(address[],bool[])",
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserStorage",
            "src": "contracts/UserStorage.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:7"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:8"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(User)24337_storage)",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)24337_storage)": {
              "label": "mapping(address => struct IUserStorage.User)",
              "numberOfBytes": "32"
            },
            "t_struct(User)24337_storage": {
              "label": "struct IUserStorage.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ref",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "membershipLevel",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "277f7da636cfdc25bfba6a3516f4e325313c8ee33ed82d2228987656791a94cc",
          "withoutMetadata": "aff205f46fae874fa1b436f831eb69d45cf49c58f130e404dc68a95ded9eefb3",
          "linkedWithoutMetadata": "aff205f46fae874fa1b436f831eb69d45cf49c58f130e404dc68a95ded9eefb3"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)24393_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)24393_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)24393_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)24393_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BancorConverterRegistry.sol:BancorConverterRegistry": {
        "src": "contracts/base/BancorConverterRegistry.sol:19",
        "version": {
          "withMetadata": "1a995fa9a87f1aef582e6f09a348162d62afb54ea7b59e39204ed1365ff93c8d",
          "withoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4",
          "linkedWithoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4"
        },
        "inherit": [
          "contracts/base/Utils.sol:Utils",
          "contracts/base/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "()",
          "tokenCount()",
          "converterCount(address)",
          "converterAddress(address,uint32)",
          "tokenAddress(address)",
          "registerConverter(address,address)",
          "unregisterConverter(address,uint32)",
          "blockStamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:5"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            },
            {
              "label": "tokensRegistered",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:20"
            },
            {
              "label": "tokensToConverters",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:21"
            },
            {
              "label": "convertersToTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:22"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Owned.sol:Owned": {
        "src": "contracts/base/Owned.sol:4",
        "version": {
          "withMetadata": "93af4148f55906b4f83e6c2eeee5574e4a11d315b096e92bbe4ffa75fbf8d016",
          "withoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e",
          "linkedWithoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/base/Owned.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:5"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Utils.sol:Utils": {
        "src": "contracts/base/Utils.sol:5",
        "version": {
          "withMetadata": "1319214db52a256fca678a8aace0fabd358c97435d582ffe66a9800a7cfe378f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/ChainlinkPriceFeedIntegration.sol:ChainlinkPriceFeedIntegration": {
        "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "787d1a5ae2be7e2ce9c3b26395ec0d27e6c5a23131808645a16660d65309d352",
          "withoutMetadata": "a1b4c6a8deb24a2deebaeb9f3a4b0bd3cbcb2d7ea8fe00232e8378e959b5b912",
          "linkedWithoutMetadata": "a1b4c6a8deb24a2deebaeb9f3a4b0bd3cbcb2d7ea8fe00232e8378e959b5b912"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setPriceFeed(address,address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ChainlinkPriceFeedIntegration",
            "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:9"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/GMXPriceFeedIntegration.sol:GMXPriceFeedIntegration": {
        "src": "contracts/integrations/GMXPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "5d37c566e86efc9f3bc1d5283eb8aa25861e46ff43b70f6b462da0c79e36d340",
          "withoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1",
          "linkedWithoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GMXPriceFeedIntegration",
            "src": "contracts/integrations/GMXPriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "feed",
            "src": "contracts/integrations/GMXPriceFeedIntegration.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/MuteDEXIntegration.sol:MuteDEXIntegration": {
        "src": "contracts/integrations/MuteDEXIntegration.sol:10",
        "version": {
          "withMetadata": "43948f186b11ab705a7ddb837cbee63de385d775d320104b8b9eed36a51b3c48",
          "withoutMetadata": "8b8e7afbb09d5ac36fb39177c42b74d719d1c16c9e52a91628d71e80624898b2",
          "linkedWithoutMetadata": "8b8e7afbb09d5ac36fb39177c42b74d719d1c16c9e52a91628d71e80624898b2"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MuteDEXIntegration",
            "src": "contracts/integrations/MuteDEXIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/MuteDEXIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/MutePriceFeedIntegration.sol:MutePriceFeedIntegration": {
        "src": "contracts/integrations/MutePriceFeedIntegration.sol:8",
        "version": {
          "withMetadata": "c321b1ee3db476ca412e996c654064176306eb6dcfb8a02c34dd81c4e3d6b48e",
          "withoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1",
          "linkedWithoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MutePriceFeedIntegration",
            "src": "contracts/integrations/MutePriceFeedIntegration.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/MutePriceFeedIntegration.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapClassicDEXIntegration.sol:SyncswapClassicDEXIntegration": {
        "src": "contracts/integrations/SyncswapClassicDEXIntegration.sol:12",
        "version": {
          "withMetadata": "3edcda38888bbb81ec69f664b632d703c573f4edf69eeff2aa1017043ec8c653",
          "withoutMetadata": "51886ae8bd3901af09dac5d9833078e293a86d7973365812c20a1811c8c5696d",
          "linkedWithoutMetadata": "51886ae8bd3901af09dac5d9833078e293a86d7973365812c20a1811c8c5696d"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicDEXIntegration",
            "src": "contracts/integrations/SyncswapClassicDEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapClassicDEXIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:SyncswapClassicPriceFeedIntegration": {
        "src": "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "eb517d3258bdc96d63eca9d9680dab3e5ed6a91b4e7f88e3524b85c0fdd7f9a9",
          "withoutMetadata": "af2ddd1d80eadb8479f1cebfcd666127ad12cf304b922704e60faa9c1de7f8a6",
          "linkedWithoutMetadata": "af2ddd1d80eadb8479f1cebfcd666127ad12cf304b922704e60faa9c1de7f8a6"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicPriceFeedIntegration",
            "src": "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapStableDEXIntegration.sol:SyncswapStableDEXIntegration": {
        "src": "contracts/integrations/SyncswapStableDEXIntegration.sol:12",
        "version": {
          "withMetadata": "322b20612379748cc686a3fd0cf2c79c90340cb95ce7c57cdc93c35258c5f507",
          "withoutMetadata": "cf76f864541991b9a56d32de073a932338a7b1675620659353d08d1b1321c742",
          "linkedWithoutMetadata": "cf76f864541991b9a56d32de073a932338a7b1675620659353d08d1b1321c742"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStableDEXIntegration",
            "src": "contracts/integrations/SyncswapStableDEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapStableDEXIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:SyncswapStablePriceFeedIntegration": {
        "src": "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "d8d88decc8aefc6c0958132b50e32fb60f0299a7367ca0283f743aedd040654d",
          "withoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e",
          "linkedWithoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStablePriceFeedIntegration",
            "src": "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV3DEXIntegration.sol:UniswapV3DEXIntegration": {
        "src": "contracts/integrations/UniswapV3DEXIntegration.sol:13",
        "version": {
          "withMetadata": "415913c129b45bdba1b3225fcec18f21b7778b240bbae36ab206243a87de482d",
          "withoutMetadata": "d9f6b03763e4fe238a9ea546d7b3eb47c72954a7ae8c77c5618753048d35f57f",
          "linkedWithoutMetadata": "d9f6b03763e4fe238a9ea546d7b3eb47c72954a7ae8c77c5618753048d35f57f"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3DEXIntegration",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "quoter",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3DEXIntegration",
              "src": "contracts/integrations/UniswapV3DEXIntegration.sol:17"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV3PriceFeedIntegration.sol:UniswapV3PriceFeedIntegration": {
        "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "d33e85db1a105f16db8dba0f3023cb5d251bd0b90b4537a17d89788937228cc5",
          "withoutMetadata": "dd59876f07e21a9fd702f486b4120e238a28f285c2f84045b6d82a7bc8b49ac4",
          "linkedWithoutMetadata": "dd59876f07e21a9fd702f486b4120e238a28f285c2f84045b6d82a7bc8b49ac4"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3PriceFeedIntegration",
            "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3PriceFeedIntegration",
              "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IChainlinkPriceFeed.sol:IChainlinkPriceFeed": {
        "src": "contracts/interfaces/IChainlinkPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IGMXPriceFeed.sol:IGMXPriceFeed": {
        "src": "contracts/interfaces/IGMXPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "prices(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMulticall.sol:IMulticall": {
        "src": "contracts/interfaces/IMulticall.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUniswapV3StaticQuoter.sol:IUniswapV3StaticQuoter": {
        "src": "contracts/interfaces/IUniswapV3StaticQuoter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quoteExactInput(bytes,uint256)",
          "quoteExactInputSingle((address,address,uint256,uint24,uint160))",
          "quoteExactOutput(bytes,uint256)",
          "quoteExactOutputSingle((address,address,uint256,uint24,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IMuteRouter.sol:IMuteRouter": {
        "src": "contracts/interfaces/external/IMuteRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pairFor(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,bool[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapFactory.sol:ISyncswapFactory": {
        "src": "contracts/interfaces/external/ISyncswapFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapPool.sol:ISyncswapPool": {
        "src": "contracts/interfaces/external/ISyncswapPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "token0()",
          "token1()",
          "getReserves()",
          "getSwapFee(address,address,address,bytes)",
          "getAmountOut(address,uint256,address)",
          "getAmountIn(address,uint256,address)",
          "swap(bytes,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapVault.sol:ISyncswapVault": {
        "src": "contracts/interfaces/external/ISyncswapVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "reserves(address)",
          "balanceOf(address,address)",
          "deposit(address,address)",
          "depositETH(address)",
          "transferAndDeposit(address,address,uint256)",
          "transfer(address,address,uint256)",
          "withdraw(address,address,uint256)",
          "withdrawAlternative(address,address,uint256,uint8)",
          "withdrawETH(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "d73566732cb3edec294e75a8f5cf348c0db50ccdace9e25853d6d47b32dc6e15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/Math.sol:Math": {
        "src": "contracts/libraries/Math.sol:6",
        "version": {
          "withMetadata": "b9190c0d994b90df3e266d2e1d1ad480292ffab0d4d6fc0f60b1bcfa86583cf0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "fbe1a3a2be2df36ab65aec95c871a67b77cb08d5c2f0f5cf994afab3fbc086de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/MockERC20.sol:MockERC20": {
        "src": "contracts/test/MockERC20.sol:7",
        "version": {
          "withMetadata": "e22f060894d72e4a40ffb029232fd094a5d0b8f49ea2ca30b43adfcd74ffc833",
          "withoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035",
          "linkedWithoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/test/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/test/USDT.sol:Context": {
        "src": "contracts/test/USDT.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:ERC20": {
        "src": "contracts/test/USDT.sol:376",
        "version": {
          "withMetadata": "d6ab05a65c86d041baf1a28ef001020816abdbcf012046909f52cfb8a255bd2b",
          "withoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac",
          "linkedWithoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac"
        },
        "inherit": [
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [
          "contracts/test/USDT.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/USDT.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:IERC20": {
        "src": "contracts/test/USDT.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:LowGasSafeMath": {
        "src": "contracts/test/USDT.sol:127",
        "version": {
          "withMetadata": "20cc5c3d87189c1fa49d3a6113d18cc0ae824a1a5c30083375f9747386ddb5f3",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:Ownable": {
        "src": "contracts/test/USDT.sol:720",
        "inherit": [
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/USDT.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/USDT.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:USDT": {
        "src": "contracts/test/USDT.sol:778",
        "version": {
          "withMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "withoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "linkedWithoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559"
        },
        "inherit": [
          "contracts/test/USDT.sol:ERC20",
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "USDT",
            "src": "contracts/test/USDT.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/USDT.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct USDT.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct USDT.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct USDT.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WBTC.sol:Context": {
        "src": "contracts/test/WBTC.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:ERC20": {
        "src": "contracts/test/WBTC.sol:376",
        "version": {
          "withMetadata": "30f38635d5b2575c3374f2bdc3e0a1f38e76ee4b7ace3587e6d8a07bd389303c",
          "withoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176",
          "linkedWithoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176"
        },
        "inherit": [
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [
          "contracts/test/WBTC.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/WBTC.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:IERC20": {
        "src": "contracts/test/WBTC.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:LowGasSafeMath": {
        "src": "contracts/test/WBTC.sol:127",
        "version": {
          "withMetadata": "2c52ed7f3a33755dbc18e17c0d34a97909802ae73ec7312c33f5dcda63c8122c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:Ownable": {
        "src": "contracts/test/WBTC.sol:720",
        "inherit": [
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/WBTC.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/WBTC.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:WBTC": {
        "src": "contracts/test/WBTC.sol:778",
        "version": {
          "withMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "withoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "linkedWithoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171"
        },
        "inherit": [
          "contracts/test/WBTC.sol:ERC20",
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WBTC",
            "src": "contracts/test/WBTC.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/WBTC.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct WBTC.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct WBTC.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct WBTC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WETH.sol:WETH": {
        "src": "contracts/test/WETH.sol:24",
        "version": {
          "withMetadata": "915665bff19f0dfc1b2bdf84382799d66871950cd15494e34b93266beb48432e",
          "withoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3",
          "linkedWithoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/test/WETH.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/test/WETH.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/test/WETH.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:25"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:26"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "2",
              "type": "t_uint8",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:27"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:34"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    }
  ]
}