{
  "version": "3.4",
  "log": [
    {
      "contracts/integrations/PythPriceFeedIntegration.sol:PythPriceFeedIntegration": {
        "src": "contracts/integrations/PythPriceFeedIntegration.sol:10",
        "version": {
          "withMetadata": "77ac5536b7a436bd7851855a2a2fbe9f61efc348f468dc385555fb7f80791efb",
          "withoutMetadata": "ff443f687776f85554ef95e81f95286f04ff8df62836410b897bfbd915b31194",
          "linkedWithoutMetadata": "ff443f687776f85554ef95e81f95286f04ff8df62836410b897bfbd915b31194"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "contracts/libraries/PythUtils.sol:PythUtils"
        ],
        "methods": [
          "(address)",
          "setManager(address)",
          "setPythAddress(address)",
          "setPriceFeed(address,bytes32)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PythPriceFeedIntegration",
            "src": "contracts/integrations/PythPriceFeedIntegration.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:13"
            },
            {
              "label": "pythAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:14"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IPyth.sol:IPyth": {
        "src": "contracts/interfaces/external/IPyth.sol:10",
        "inherit": [
          "contracts/interfaces/external/IPythEvents.sol:IPythEvents"
        ],
        "libraries": [],
        "methods": [
          "getValidTimePeriod()",
          "getPrice(bytes32)",
          "getEmaPrice(bytes32)",
          "getPriceUnsafe(bytes32)",
          "getPriceNoOlderThan(bytes32,uint256)",
          "getEmaPriceUnsafe(bytes32)",
          "getEmaPriceNoOlderThan(bytes32,uint256)",
          "updatePriceFeeds(bytes[])",
          "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])",
          "getUpdateFee(bytes[])",
          "parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)",
          "parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IPythEvents.sol:IPythEvents": {
        "src": "contracts/interfaces/external/IPythEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PythStructs.sol:PythStructs": {
        "src": "contracts/libraries/PythStructs.sol:4",
        "version": {
          "withMetadata": "fa37eb3ec25c6c9f7784792ef514c3d0ad49e2d6efc98a8dad0eb7296d6be129",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PythUtils.sol:PythUtils": {
        "src": "contracts/libraries/PythUtils.sol:4",
        "version": {
          "withMetadata": "2a7d592dc768ce076840cf24ca614d7a7af47111d5183cbcbd4845204d24d219",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/integrations/PythPriceFeedIntegration.sol:PythPriceFeedIntegration": {
        "src": "contracts/integrations/PythPriceFeedIntegration.sol:10",
        "version": {
          "withMetadata": "23fc688054d85a4daaa9e582d416ffb10bb24841b92944205bae858f825e86e4",
          "withoutMetadata": "9ea10f027da96061d3cc10c2fa07e51773b66ee36f991df08ea91ae87fb52501",
          "linkedWithoutMetadata": "9ea10f027da96061d3cc10c2fa07e51773b66ee36f991df08ea91ae87fb52501"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/libraries/PythUtils.sol:PythUtils"
        ],
        "methods": [
          "(address)",
          "setManager(address)",
          "setPythAddress(address)",
          "setPriceFeed(address,bytes32)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PythPriceFeedIntegration",
            "src": "contracts/integrations/PythPriceFeedIntegration.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:13"
            },
            {
              "label": "pythAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:14"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IPyth.sol:IPyth": {
        "src": "contracts/interfaces/external/IPyth.sol:10",
        "inherit": [
          "contracts/interfaces/external/IPythEvents.sol:IPythEvents"
        ],
        "libraries": [],
        "methods": [
          "getValidTimePeriod()",
          "getPrice(bytes32)",
          "getEmaPrice(bytes32)",
          "getPriceUnsafe(bytes32)",
          "getPriceNoOlderThan(bytes32,uint256)",
          "getEmaPriceUnsafe(bytes32)",
          "getEmaPriceNoOlderThan(bytes32,uint256)",
          "updatePriceFeeds(bytes[])",
          "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])",
          "getUpdateFee(bytes[])",
          "parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)",
          "parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IPythEvents.sol:IPythEvents": {
        "src": "contracts/interfaces/external/IPythEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PythStructs.sol:PythStructs": {
        "src": "contracts/libraries/PythStructs.sol:4",
        "version": {
          "withMetadata": "fa37eb3ec25c6c9f7784792ef514c3d0ad49e2d6efc98a8dad0eb7296d6be129",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PythUtils.sol:PythUtils": {
        "src": "contracts/libraries/PythUtils.sol:4",
        "version": {
          "withMetadata": "2a7d592dc768ce076840cf24ca614d7a7af47111d5183cbcbd4845204d24d219",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/integrations/PythPriceFeedIntegration.sol:PythPriceFeedIntegration": {
        "src": "contracts/integrations/PythPriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "ef0d62c83b676311462d78699ab52d894314b277abd003fe788581cb6ddb1cf3",
          "withoutMetadata": "0a09c54634b41505aa8e833e36005c3ecffd13c175b4b24f6c3fe172cc0cc90d",
          "linkedWithoutMetadata": "0a09c54634b41505aa8e833e36005c3ecffd13c175b4b24f6c3fe172cc0cc90d"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "contracts/libraries/PythUtils.sol:PythUtils"
        ],
        "methods": [
          "(address)",
          "setManager(address)",
          "setPythAddress(address)",
          "setPriceFeed(address,bytes32)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PythPriceFeedIntegration",
            "src": "contracts/integrations/PythPriceFeedIntegration.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:12"
            },
            {
              "label": "pythAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:13"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IPyth.sol:IPyth": {
        "src": "contracts/interfaces/external/IPyth.sol:10",
        "inherit": [
          "contracts/interfaces/external/IPythEvents.sol:IPythEvents"
        ],
        "libraries": [],
        "methods": [
          "getValidTimePeriod()",
          "getPrice(bytes32)",
          "getEmaPrice(bytes32)",
          "getPriceUnsafe(bytes32)",
          "getPriceNoOlderThan(bytes32,uint256)",
          "getEmaPriceUnsafe(bytes32)",
          "getEmaPriceNoOlderThan(bytes32,uint256)",
          "updatePriceFeeds(bytes[])",
          "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])",
          "getUpdateFee(bytes[])",
          "parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)",
          "parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IPythEvents.sol:IPythEvents": {
        "src": "contracts/interfaces/external/IPythEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PythStructs.sol:PythStructs": {
        "src": "contracts/libraries/PythStructs.sol:4",
        "version": {
          "withMetadata": "fa37eb3ec25c6c9f7784792ef514c3d0ad49e2d6efc98a8dad0eb7296d6be129",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PythUtils.sol:PythUtils": {
        "src": "contracts/libraries/PythUtils.sol:4",
        "version": {
          "withMetadata": "2a7d592dc768ce076840cf24ca614d7a7af47111d5183cbcbd4845204d24d219",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/PancakeswapV3DEXIntegration.sol:PancakeswapV3DEXIntegration": {
        "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:13",
        "version": {
          "withMetadata": "406d7e8189b8989c0be46c5ed7a3a46c6a16c1850533d135d677706fb35f5d98",
          "withoutMetadata": "a60c626ff5c3c3532b4038f4af1f83e2520152cc3e2cb3a46036dbc66fcdfde9",
          "linkedWithoutMetadata": "a60c626ff5c3c3532b4038f4af1f83e2520152cc3e2cb3a46036dbc66fcdfde9"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeswapV3DEXIntegration",
            "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "quoter",
            "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "PancakeswapV3DEXIntegration",
              "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:17"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:PancakeswapV3PriceFeedIntegration": {
        "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "cfdf14962d811163dcbbf32982a8625dd288e28b4679b9282bd767440777aec1",
          "withoutMetadata": "608d30e14db00129f097b0b6a266b9b75c768921c451fabf1c31460899ecfdc2",
          "linkedWithoutMetadata": "608d30e14db00129f097b0b6a266b9b75c768921c451fabf1c31460899ecfdc2"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeswapV3PriceFeedIntegration",
            "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "PancakeswapV3PriceFeedIntegration",
              "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUniswapV3StaticQuoter.sol:IUniswapV3StaticQuoter": {
        "src": "contracts/interfaces/IUniswapV3StaticQuoter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quoteExactInput(bytes,uint256)",
          "quoteExactInputSingle((address,address,uint256,uint24,uint160))",
          "quoteExactOutput(bytes,uint256)",
          "quoteExactOutputSingle((address,address,uint256,uint24,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/integrations/PythPriceFeedIntegration.sol:PythPriceFeedIntegration": {
        "src": "contracts/integrations/PythPriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "74d10fb7c249a6d566bfb375f518256726bbbadc70cdedd8aace3e4bfa3c92b0",
          "withoutMetadata": "c4c5a7afb04c75e336b065993a717c502d52670857cd2d809a1277f15fda22a8",
          "linkedWithoutMetadata": "c4c5a7afb04c75e336b065993a717c502d52670857cd2d809a1277f15fda22a8"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "contracts/libraries/PythUtils.sol:PythUtils"
        ],
        "methods": [
          "(address)",
          "setManager(address)",
          "setPythAddress(address)",
          "setPriceFeed(address,bytes32)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PythPriceFeedIntegration",
            "src": "contracts/integrations/PythPriceFeedIntegration.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:12"
            },
            {
              "label": "pythAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:13"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IPyth.sol:IPyth": {
        "src": "contracts/interfaces/external/IPyth.sol:10",
        "inherit": [
          "contracts/interfaces/external/IPythEvents.sol:IPythEvents"
        ],
        "libraries": [],
        "methods": [
          "getValidTimePeriod()",
          "getPrice(bytes32)",
          "getEmaPrice(bytes32)",
          "getPriceUnsafe(bytes32)",
          "getPriceNoOlderThan(bytes32,uint256)",
          "getEmaPriceUnsafe(bytes32)",
          "getEmaPriceNoOlderThan(bytes32,uint256)",
          "updatePriceFeeds(bytes[])",
          "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])",
          "getUpdateFee(bytes[])",
          "parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)",
          "parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IPythEvents.sol:IPythEvents": {
        "src": "contracts/interfaces/external/IPythEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PythStructs.sol:PythStructs": {
        "src": "contracts/libraries/PythStructs.sol:4",
        "version": {
          "withMetadata": "fa37eb3ec25c6c9f7784792ef514c3d0ad49e2d6efc98a8dad0eb7296d6be129",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PythUtils.sol:PythUtils": {
        "src": "contracts/libraries/PythUtils.sol:4",
        "version": {
          "withMetadata": "2a7d592dc768ce076840cf24ca614d7a7af47111d5183cbcbd4845204d24d219",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@pythnetwork/pyth-sdk-solidity/IPyth.sol:IPyth": {
        "src": "@pythnetwork/pyth-sdk-solidity/IPyth.sol:10",
        "inherit": [
          "@pythnetwork/pyth-sdk-solidity/IPythEvents.sol:IPythEvents"
        ],
        "libraries": [],
        "methods": [
          "getValidTimePeriod()",
          "getPrice(bytes32)",
          "getEmaPrice(bytes32)",
          "getPriceUnsafe(bytes32)",
          "getPriceNoOlderThan(bytes32,uint256)",
          "getEmaPriceUnsafe(bytes32)",
          "getEmaPriceNoOlderThan(bytes32,uint256)",
          "updatePriceFeeds(bytes[])",
          "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])",
          "getUpdateFee(bytes[])",
          "parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)",
          "parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@pythnetwork/pyth-sdk-solidity/IPythEvents.sol:IPythEvents": {
        "src": "@pythnetwork/pyth-sdk-solidity/IPythEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@pythnetwork/pyth-sdk-solidity/PythStructs.sol:PythStructs": {
        "src": "@pythnetwork/pyth-sdk-solidity/PythStructs.sol:4",
        "version": {
          "withMetadata": "389636fef2ca346df8f1964918e7437745f4e2c8f96e77213f1942929f676ff9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@pythnetwork/pyth-sdk-solidity/PythUtils.sol:PythUtils": {
        "src": "@pythnetwork/pyth-sdk-solidity/PythUtils.sol:4",
        "version": {
          "withMetadata": "0b8d77b46824e2d65f907f0ed4632420f673b31f3518372b5c447197f9f6ec57",
          "withoutMetadata": "518e3395e6fcba531314289c653213a58ba554eb80ff4a8042b4c1f570d2dab7",
          "linkedWithoutMetadata": "518e3395e6fcba531314289c653213a58ba554eb80ff4a8042b4c1f570d2dab7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertToUint(int64,int32,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/PythPriceFeedIntegration.sol:PythPriceFeedIntegration": {
        "src": "contracts/integrations/PythPriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "3bdc437216b4da04d99ffa8c5b7cebcecee14ca08dc88c809241e4c1410b4f82",
          "withoutMetadata": "1836c12ad3cd3834e802c434cde263c1f1f9163a97932c377f8364cd6e4c6075",
          "linkedWithoutMetadata": "1836c12ad3cd3834e802c434cde263c1f1f9163a97932c377f8364cd6e4c6075"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "@pythnetwork/pyth-sdk-solidity/PythUtils.sol:PythUtils"
        ],
        "methods": [
          "(address)",
          "setManager(address)",
          "setPythAddress(address)",
          "setPriceFeed(address,bytes32)",
          "getPrice(address,address)"
        ],
        "linkReferences": [
          {
            "src": "@pythnetwork/pyth-sdk-solidity/PythUtils.sol",
            "name": "PythUtils",
            "length": 20,
            "start": 1173,
            "placeholder": "__$2f7d61c278077ad9ff6dabaf3cf2055321$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PythPriceFeedIntegration",
            "src": "contracts/integrations/PythPriceFeedIntegration.sol:23"
          },
          {
            "kind": "external-library-linking",
            "name": "PythUtils",
            "src": "@pythnetwork/pyth-sdk-solidity/PythUtils.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:12"
            },
            {
              "label": "pythAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:13"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@pythnetwork/pyth-sdk-solidity/IPyth.sol:IPyth": {
        "src": "@pythnetwork/pyth-sdk-solidity/IPyth.sol:10",
        "inherit": [
          "@pythnetwork/pyth-sdk-solidity/IPythEvents.sol:IPythEvents"
        ],
        "libraries": [],
        "methods": [
          "getValidTimePeriod()",
          "getPrice(bytes32)",
          "getEmaPrice(bytes32)",
          "getPriceUnsafe(bytes32)",
          "getPriceNoOlderThan(bytes32,uint256)",
          "getEmaPriceUnsafe(bytes32)",
          "getEmaPriceNoOlderThan(bytes32,uint256)",
          "updatePriceFeeds(bytes[])",
          "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])",
          "getUpdateFee(bytes[])",
          "parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)",
          "parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@pythnetwork/pyth-sdk-solidity/IPythEvents.sol:IPythEvents": {
        "src": "@pythnetwork/pyth-sdk-solidity/IPythEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@pythnetwork/pyth-sdk-solidity/PythStructs.sol:PythStructs": {
        "src": "@pythnetwork/pyth-sdk-solidity/PythStructs.sol:4",
        "version": {
          "withMetadata": "389636fef2ca346df8f1964918e7437745f4e2c8f96e77213f1942929f676ff9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@pythnetwork/pyth-sdk-solidity/PythUtils.sol:PythUtils": {
        "src": "@pythnetwork/pyth-sdk-solidity/PythUtils.sol:4",
        "version": {
          "withMetadata": "0b8d77b46824e2d65f907f0ed4632420f673b31f3518372b5c447197f9f6ec57",
          "withoutMetadata": "518e3395e6fcba531314289c653213a58ba554eb80ff4a8042b4c1f570d2dab7",
          "linkedWithoutMetadata": "518e3395e6fcba531314289c653213a58ba554eb80ff4a8042b4c1f570d2dab7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "convertToUint(int64,int32,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/PancakeswapV3DEXIntegration.sol:UniswapV3DEXIntegration": {
        "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:13",
        "version": {
          "withMetadata": "ad345748b72b4898e1261f3afdab1f7a6dfb6d4fd84095740460e13f49f7259e",
          "withoutMetadata": "a60c626ff5c3c3532b4038f4af1f83e2520152cc3e2cb3a46036dbc66fcdfde9",
          "linkedWithoutMetadata": "a60c626ff5c3c3532b4038f4af1f83e2520152cc3e2cb3a46036dbc66fcdfde9"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3DEXIntegration",
            "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "quoter",
            "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3DEXIntegration",
              "src": "contracts/integrations/PancakeswapV3DEXIntegration.sol:17"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:UniswapV3PriceFeedIntegration": {
        "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "2508abfe87e091eb03a372b7dacd4ab1b6576599021d624ba6ab22680a3e53cc",
          "withoutMetadata": "608d30e14db00129f097b0b6a266b9b75c768921c451fabf1c31460899ecfdc2",
          "linkedWithoutMetadata": "608d30e14db00129f097b0b6a266b9b75c768921c451fabf1c31460899ecfdc2"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3PriceFeedIntegration",
            "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3PriceFeedIntegration",
              "src": "contracts/integrations/PancakeswapV3PriceFeedIntegration.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/PythPriceFeedIntegration.sol:PythPriceFeedIntegration": {
        "src": "contracts/integrations/PythPriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "5feec106b653c2e5d84a49b624f180c8ec6948901b0473cb620c195e73588080",
          "withoutMetadata": "1836c12ad3cd3834e802c434cde263c1f1f9163a97932c377f8364cd6e4c6075",
          "linkedWithoutMetadata": "1836c12ad3cd3834e802c434cde263c1f1f9163a97932c377f8364cd6e4c6075"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "@pythnetwork/pyth-sdk-solidity/PythUtils.sol:PythUtils"
        ],
        "methods": [
          "(address)",
          "setManager(address)",
          "setPythAddress(address)",
          "setPriceFeed(address,bytes32)",
          "getPrice(address,address)"
        ],
        "linkReferences": [
          {
            "src": "@pythnetwork/pyth-sdk-solidity/PythUtils.sol",
            "name": "PythUtils",
            "length": 20,
            "start": 1173,
            "placeholder": "__$2f7d61c278077ad9ff6dabaf3cf2055321$__"
          }
        ],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PythPriceFeedIntegration",
            "src": "contracts/integrations/PythPriceFeedIntegration.sol:23"
          },
          {
            "kind": "external-library-linking",
            "name": "PythUtils",
            "src": "@pythnetwork/pyth-sdk-solidity/PythUtils.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:12"
            },
            {
              "label": "pythAddress",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:13"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bytes32)",
              "contract": "PythPriceFeedIntegration",
              "src": "contracts/integrations/PythPriceFeedIntegration.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bytes32)": {
              "label": "mapping(address => bytes32)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUniswapV3StaticQuoter.sol:IUniswapV3StaticQuoter": {
        "src": "contracts/interfaces/IUniswapV3StaticQuoter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quoteExactInput(bytes,uint256)",
          "quoteExactInputSingle((address,address,uint256,uint24,uint160))",
          "quoteExactOutput(bytes,uint256)",
          "quoteExactOutputSingle((address,address,uint256,uint24,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "a1b96a725107810b1a66f025444f6bbd7344c150414ea22b04d98242824a64ee",
          "withoutMetadata": "eadadcc65417921fd7bf00a5290721d89694d8b2681b22e56a70eb0cc86af35a",
          "linkedWithoutMetadata": "eadadcc65417921fd7bf00a5290721d89694d8b2681b22e56a70eb0cc86af35a"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "6cd4a6096c06c1e9424b222ea1215a86949922ab5c86624458ff9afb98713b39",
          "withoutMetadata": "f0b1e8582fef885e6d12a5dd1b96eccce185bddfc71cebcccf457bbe1010d096",
          "linkedWithoutMetadata": "f0b1e8582fef885e6d12a5dd1b96eccce185bddfc71cebcccf457bbe1010d096"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateTPnSL((bytes32,uint256,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10483_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10483_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10425_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10441_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10430_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10450_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10483_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10425_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10430_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10441_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10450_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "cb55e3f5d4804ec1dd0903c8e8f1621f5fc65fb2c09b9a197bf393386efa4d91",
          "withoutMetadata": "ceab28bf90bbb0dde815e174e2cd3f806b2b2cecc65764815f74ff32036897d0",
          "linkedWithoutMetadata": "ceab28bf90bbb0dde815e174e2cd3f806b2b2cecc65764815f74ff32036897d0"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateTPnSL((address,bytes32,uint256,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "b11382d96c8cd2bb3e304b71c132b836369e312bc1e0e66b00953fa9a35b4722",
          "withoutMetadata": "b726e7767d78e983671d3d199d5ee11d5908ccd5df0f4ec2c8e78455abec3b57",
          "linkedWithoutMetadata": "b726e7767d78e983671d3d199d5ee11d5908ccd5df0f4ec2c8e78455abec3b57"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11030_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11030_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11030_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11030_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateTPnSLFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateTPnSL((bytes32,uint256,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateTPnSL((address,bytes32,uint256,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "4f5f81cd88eed32c909d49716e694ecc48a9bb0bacc1a9f84324d7825d5a425b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "01a2c9f5c86068aa73b0ba4dbe5b840372d3019abe5a4514c7a6b75e68bbaef4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "13338629e3017bba0237e93248da24b09bb85388b5bce446d3de1d4a98d659f5",
          "withoutMetadata": "dc515dd7f0aa0d27787c1c7d83ab1c4388de0a8eaf963976c0d8838db6037301",
          "linkedWithoutMetadata": "dc515dd7f0aa0d27787c1c7d83ab1c4388de0a8eaf963976c0d8838db6037301"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateTPnSLFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateTPnSLFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "a2977d041ef52f6041b25b1df4bef5fc2b2794c5e73d00332e81aeb4deb0c2a1",
          "withoutMetadata": "005717812fb7ce1246ea9de64c4769888d711ca0ac2257d053aaf88642818564",
          "linkedWithoutMetadata": "005717812fb7ce1246ea9de64c4769888d711ca0ac2257d053aaf88642818564"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "97715517df25c517398fbbe54a667de6ef413508b79973b34332510288641f12",
          "withoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c",
          "linkedWithoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "8a651925ad91001c8b1e821e27a8e13a988f3207f3065b018b585743f9ecb249",
          "withoutMetadata": "e4838bc5e9f0a0e5342beb42ac743df2ad75d66c526847dda78880c3e99724fa",
          "linkedWithoutMetadata": "e4838bc5e9f0a0e5342beb42ac743df2ad75d66c526847dda78880c3e99724fa"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5686_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5686_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5686_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "f1036993f1275518585918ce3130714428155c415f20bed4b4bdbb1d7d87aa71",
          "withoutMetadata": "0a259848e631bc2ab7e18c705c4d7ee56b765f6527dbbb767217a9c4a2718dd2",
          "linkedWithoutMetadata": "0a259848e631bc2ab7e18c705c4d7ee56b765f6527dbbb767217a9c4a2718dd2"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)16105_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)16105_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)16105_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "567c7598366b54dc66e80d7c93bfe06204b783dd7cf226a626883e2bccd51ffd",
          "withoutMetadata": "05eaa19f9b5a4a7f016f3c2f8622fb77aa1282bbfbd7509b850949a53afc43db",
          "linkedWithoutMetadata": "05eaa19f9b5a4a7f016f3c2f8622fb77aa1282bbfbd7509b850949a53afc43db"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "7bb5b69b97ceb20984ff1ed6058d11fc47c6612c519de7861852284ae18e37d7",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "1f031f2077f69726d1c190189bda39f08458c279271a88ce633eaaa7f470106f",
          "withoutMetadata": "5e3f655a5be2df60b04c7a75f4c499b1bd81731faae2ebe3897ecb169b286b94",
          "linkedWithoutMetadata": "5e3f655a5be2df60b04c7a75f4c499b1bd81731faae2ebe3897ecb169b286b94"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateTPnSL((bytes32,uint256,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)16399_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)16399_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)16341_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)16357_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)16346_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)16366_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)16399_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)16341_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)16346_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)16357_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)16366_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "bd6474c11c940e33780814b714b4cf5f3540debe66d5c4d8d5b439397b2765f0",
          "withoutMetadata": "2ada71d3edf81f5acfd52b3389f0c522979e3852aee20f14263cfbb91bf13e33",
          "linkedWithoutMetadata": "2ada71d3edf81f5acfd52b3389f0c522979e3852aee20f14263cfbb91bf13e33"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateTPnSL((address,bytes32,uint256,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "989fb2528e5024abdcf38a41be68ec308e19c13312c633b24c8bc958d9106945",
          "withoutMetadata": "56aa7fa4d4f372347eeb778616c385d52a3193c65157a6a1ae3bed6e4bc166c3",
          "linkedWithoutMetadata": "56aa7fa4d4f372347eeb778616c385d52a3193c65157a6a1ae3bed6e4bc166c3"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16946_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)16946_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16946_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)16946_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateTPnSLFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateTPnSL((bytes32,uint256,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateTPnSL((address,bytes32,uint256,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "f21062348401187de53b3f64fd9a46d70c2c104d6f5055270790acf3241fc5f6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "7e9021eac4b6e908792393cb1986ae847bce061c4de922adfca03ca42524c84c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "8ffad76a80932a0e4259b5ce7076c521ab14b5667ee11592ab6ff1da22d3fda4",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "87269460d27340b973583c28d8e8a2c2f595ddb1d324824db18741984d9fe159",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "aacba79b1e719ec761bb681f0f8360dcd596d73c5847ce8acfec78e77f544a35",
          "withoutMetadata": "06905b88a5a7bfef672df7d734372a7ed259c4fa92faf8097a3c022928885747",
          "linkedWithoutMetadata": "06905b88a5a7bfef672df7d734372a7ed259c4fa92faf8097a3c022928885747"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)2833_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)2833_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2775_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2791_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2780_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2800_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2833_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2775_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2780_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2791_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2800_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "7e9021eac4b6e908792393cb1986ae847bce061c4de922adfca03ca42524c84c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "c6a26415e199b1a380ab23e554b3054b0eccdd8118e3ced80796893cb210d5f3",
          "withoutMetadata": "507b4502d9e5115c497fe82c4fd5d09438dba127feece081194c21de81f82ab5",
          "linkedWithoutMetadata": "507b4502d9e5115c497fe82c4fd5d09438dba127feece081194c21de81f82ab5"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)2842_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)2842_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2784_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2800_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2789_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2809_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2842_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2784_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2789_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2800_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2809_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "7e9021eac4b6e908792393cb1986ae847bce061c4de922adfca03ca42524c84c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "be38f2ddd0e8a93da85288d1e7766e45d356f156722411b418a53a997ff3c3c7",
          "withoutMetadata": "43840983d3b1e5577dc92a5a62a45cac73afb6bc74fcd89a0cc879e7da1735cd",
          "linkedWithoutMetadata": "43840983d3b1e5577dc92a5a62a45cac73afb6bc74fcd89a0cc879e7da1735cd"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)2842_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)2842_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2784_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2800_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2789_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2809_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2842_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2784_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2789_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2800_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2809_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "7e9021eac4b6e908792393cb1986ae847bce061c4de922adfca03ca42524c84c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "ba39ebe9300a1621c5906514b1a2d6d3a879121af5817d1a0e0cd4865ea835e7",
          "withoutMetadata": "e02449f5be8c23fc4ac93d1bb5a97fa08c9e611de5d4430ef2bd4009b42685eb",
          "linkedWithoutMetadata": "e02449f5be8c23fc4ac93d1bb5a97fa08c9e611de5d4430ef2bd4009b42685eb"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)2842_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)2842_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2784_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2800_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2789_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2809_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2842_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2784_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2789_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2800_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2809_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "7e9021eac4b6e908792393cb1986ae847bce061c4de922adfca03ca42524c84c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "4a10148ef864969441b3815d1fcb3546d35802fa0736da44c8b296e04293d40e",
          "withoutMetadata": "08710be37bc1f93781aff7c3cbfdc0b00916a8bd39efbf6ba0dd9ba24c95bf39",
          "linkedWithoutMetadata": "08710be37bc1f93781aff7c3cbfdc0b00916a8bd39efbf6ba0dd9ba24c95bf39"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)2820_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)2820_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2762_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2778_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2767_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2787_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2820_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2762_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2767_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2778_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2787_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "7e9021eac4b6e908792393cb1986ae847bce061c4de922adfca03ca42524c84c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "82d78d6ed5f419bc6c949d3fdbf8ea3c5ffce738d72e413a3f0e99b3947eef05",
          "withoutMetadata": "e4838bc5e9f0a0e5342beb42ac743df2ad75d66c526847dda78880c3e99724fa",
          "linkedWithoutMetadata": "e4838bc5e9f0a0e5342beb42ac743df2ad75d66c526847dda78880c3e99724fa"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "be38f2ddd0e8a93da85288d1e7766e45d356f156722411b418a53a997ff3c3c7",
          "withoutMetadata": "43840983d3b1e5577dc92a5a62a45cac73afb6bc74fcd89a0cc879e7da1735cd",
          "linkedWithoutMetadata": "43840983d3b1e5577dc92a5a62a45cac73afb6bc74fcd89a0cc879e7da1735cd"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10702_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10702_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10644_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10660_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10649_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10669_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10702_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10644_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10649_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10660_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10669_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "b28c3d10948d7cf3567b19275cdc4500d8b31fe88894e9f1cbe3c9eda3dbe473",
          "withoutMetadata": "6aad176b4dccbfdbecb35dda147f003bd735ba688ba5b11d427cfe6b17fafc26",
          "linkedWithoutMetadata": "6aad176b4dccbfdbecb35dda147f003bd735ba688ba5b11d427cfe6b17fafc26"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "391b24eda176e5740c0aac31ca34b5dd8cd53152e981a8c336cacc31baa96b0c",
          "withoutMetadata": "56aa7fa4d4f372347eeb778616c385d52a3193c65157a6a1ae3bed6e4bc166c3",
          "linkedWithoutMetadata": "56aa7fa4d4f372347eeb778616c385d52a3193c65157a6a1ae3bed6e4bc166c3"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11277_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11277_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11277_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11277_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "9eea0482d98ead005ff2d7c0cb6240367cacd583414521a7d23651abb126a021",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "7e9021eac4b6e908792393cb1986ae847bce061c4de922adfca03ca42524c84c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "758638d7f322876fdb20b0ff0329de92d0c26f809303ea25ce284749a269d30b",
          "withoutMetadata": "0a259848e631bc2ab7e18c705c4d7ee56b765f6527dbbb767217a9c4a2718dd2",
          "linkedWithoutMetadata": "0a259848e631bc2ab7e18c705c4d7ee56b765f6527dbbb767217a9c4a2718dd2"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3466_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3466_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3466_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "cce98b070641ecb9c35c6d03d633358f39b46d831c8dd76a48b97f36c74e6b8b",
          "withoutMetadata": "02e8a77151350612567f5c9dc97a3434f85c0aeacb76d228894266005b22fd59",
          "linkedWithoutMetadata": "02e8a77151350612567f5c9dc97a3434f85c0aeacb76d228894266005b22fd59"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "dc31eca3cc7f9942ec07458661aba90621af2b588e44ae48423fba90e26fbe64",
          "withoutMetadata": "bae7d55e42ca3e4cda3f08e99e0da02ccada16b2a0c108f931397736f58a5712",
          "linkedWithoutMetadata": "bae7d55e42ca3e4cda3f08e99e0da02ccada16b2a0c108f931397736f58a5712"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "eb0811ffae71abf83451ba8efa932d919bd21f86154d42cf6ed60d23bb91dea2",
          "withoutMetadata": "a5d0f595fe5dcafa959f94aa6e1658b67a61b1db69dae06028f224444c9327bf",
          "linkedWithoutMetadata": "a5d0f595fe5dcafa959f94aa6e1658b67a61b1db69dae06028f224444c9327bf"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10702_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10702_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10644_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10660_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10649_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10669_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10702_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10644_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10649_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10660_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10669_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "96cb09cc84424a6fbaf45a1f807e540e7e50a3cb8e18fb4f67e097fe7262d56e",
          "withoutMetadata": "4a610dd3165956f5e9a60fb003706a85218b83d168790e6a03f32fe969c2a860",
          "linkedWithoutMetadata": "4a610dd3165956f5e9a60fb003706a85218b83d168790e6a03f32fe969c2a860"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "f6fb54f78bf1e8d2b7288e9a9340cd8c8099575d9ca0411c4aa5d6c7b4c226a2",
          "withoutMetadata": "4833d3eb9eecafa528987fdc84e39274d6aa0652cd7a4f54c3adfab4a3a16a05",
          "linkedWithoutMetadata": "4833d3eb9eecafa528987fdc84e39274d6aa0652cd7a4f54c3adfab4a3a16a05"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11277_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11277_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11277_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11277_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "ba6b428a5e371ee88d7c6f9516e0eb74102bf4d684a82076f5eee992d69517a7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "0be626aeea5eec0a2569ea9463ea6b112825acfaf1dddfac19a85474b02c80e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "b2a678295df98dd7dfdf0bbe3fc7893ed543b07ece3d45f574b561d37f2906df",
          "withoutMetadata": "a4d4001c75e399634d18cbe1cea5b1a034d4be5fcb5997234895950737ecab0c",
          "linkedWithoutMetadata": "a4d4001c75e399634d18cbe1cea5b1a034d4be5fcb5997234895950737ecab0c"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3636_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3636_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3636_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "5dd195c6512351dd7e5b4dcb98ec4dff66feaa24ff3e9e8b6b327a31dd304b28",
          "withoutMetadata": "57cecdd3186b788708d59e8d7bd9882d2f88c18d65ca17773b314c71a2dba529",
          "linkedWithoutMetadata": "57cecdd3186b788708d59e8d7bd9882d2f88c18d65ca17773b314c71a2dba529"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "5d27468e5edb964875b70a652b93285692b70d754f6b1f89964fcd5330222388",
          "withoutMetadata": "1f14b715bf2d7e3c87b431018b478c40ad486c43c9effc71f499411ad6731bd9",
          "linkedWithoutMetadata": "1f14b715bf2d7e3c87b431018b478c40ad486c43c9effc71f499411ad6731bd9"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)2842_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)2842_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2784_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2800_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2789_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2809_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2842_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2784_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2789_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2800_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2809_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "3fddb1bf1149091731dfc898556794666511736b3d5c352e02f77a9d02a90dca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "f34b2adc547328855245609e4068e773cd55f5aca903abd545776663cf092115",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "0bef0bc3012c701704f0282b8c8eb3544f196a6f43e1754f24698ebb405493cf",
          "withoutMetadata": "005717812fb7ce1246ea9de64c4769888d711ca0ac2257d053aaf88642818564",
          "linkedWithoutMetadata": "005717812fb7ce1246ea9de64c4769888d711ca0ac2257d053aaf88642818564"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "72837b7258b56fd562384d15e0eb3dfe31cdd80f267981a0e57cda71e92ef49b",
          "withoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c",
          "linkedWithoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "7860d82bc0d8c2a14cbee5d798840fc1fa5ff072688eb68391493abf6af6d290",
          "withoutMetadata": "7a3e2a1de513a29577d5deff47d5257ef0cc6e92b48c8ddc29af9e1a14f2353f",
          "linkedWithoutMetadata": "7a3e2a1de513a29577d5deff47d5257ef0cc6e92b48c8ddc29af9e1a14f2353f"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5709_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5709_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5709_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "46e8c8fa4389b6767b88a36d46574e5d4c8f0f1c80c4419f742c83e92bbbbed2",
          "withoutMetadata": "0d12e808ecf449a404229f5c7dc1447b6f37792733620f6bdf6c26f92f8e568e",
          "linkedWithoutMetadata": "0d12e808ecf449a404229f5c7dc1447b6f37792733620f6bdf6c26f92f8e568e"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)16316_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)16316_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)16316_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "ebc7ac8ebaa483fcb80fc0f123875c022644c36054fb8e56c21300be6608b8a5",
          "withoutMetadata": "27f720e46e658149825faf81b558a24532e5604eff8b308d1465cc53f8c882c9",
          "linkedWithoutMetadata": "27f720e46e658149825faf81b558a24532e5604eff8b308d1465cc53f8c882c9"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "bbb88745a60261709f442de56935341a1788b3df271bfd71e979ba8ce83c0353",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "432bab30c30011912e7858d3d953bf722f816e45a05fd9d34f6c3849eb8dd109",
          "withoutMetadata": "379494352be5c00cbbed20a16b24413a4084b3d40b192f3c9eed8600a4b42af2",
          "linkedWithoutMetadata": "379494352be5c00cbbed20a16b24413a4084b3d40b192f3c9eed8600a4b42af2"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)16610_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)16610_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)16552_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)16568_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)16557_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)16577_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)16610_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)16552_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)16557_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)16568_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)16577_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "a0e156b963b960b2c4fed5f6e37b3763234dc78d57bcddbc2d787c905671091a",
          "withoutMetadata": "f81f846d2a9e4ae12098f58ebdcce7a4157a5add82411223936f5feb15c4d989",
          "linkedWithoutMetadata": "f81f846d2a9e4ae12098f58ebdcce7a4157a5add82411223936f5feb15c4d989"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "4d0befce0f410e690eeaf1f4d0b3a7455b30f193754be03ca8286871fcda0df4",
          "withoutMetadata": "7718761a955a0f108c7efc648cad7304fbcd61e1bcc90973a059d6f885e2e958",
          "linkedWithoutMetadata": "7718761a955a0f108c7efc648cad7304fbcd61e1bcc90973a059d6f885e2e958"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17185_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)17185_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17185_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)17185_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "e16190c15e656ce9ec3d12fb137303c04fa9d63f2d0bc76a542c33c0e8c7714f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "3fddb1bf1149091731dfc898556794666511736b3d5c352e02f77a9d02a90dca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "5e1397b9e79c0e1ccc86623d2b87c595d3713626a100be21fb7453bf45c1e947",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "2f7881b33094042d96c8e3dbc1c2d9371ea6abd0a74273b406072e28981920f2",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "9a28676838898241d0699902c2d53adf0e00619f5b3fe6e5acf8154af5c0733c",
          "withoutMetadata": "627a58dcefd323d7df6ed4b82a8bfc14db310471cea997cee5060d4e12f98855",
          "linkedWithoutMetadata": "627a58dcefd323d7df6ed4b82a8bfc14db310471cea997cee5060d4e12f98855"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:13",
        "version": {
          "withMetadata": "5c0401e12bdbcea546624fb8d5fa99b456fc558657c52ac7adc52377b3fdf722",
          "withoutMetadata": "1cd4071b17c9ce15e88f1e1a1177630f9599b9fc36eeaefacc55bd9ca5ad9520",
          "linkedWithoutMetadata": "1cd4071b17c9ce15e88f1e1a1177630f9599b9fc36eeaefacc55bd9ca5ad9520"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10748_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10748_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10690_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10706_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10695_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10715_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10748_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10690_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10695_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10706_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10715_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "d47041fa4535ea4231175ea8d8d5afa4d67093dc04934f3535f755f9aa24d5f1",
          "withoutMetadata": "725f20ea094b825019ea943dec43ee0c20015c4dbdbc5bdbbdd3a0a32a5b070a",
          "linkedWithoutMetadata": "725f20ea094b825019ea943dec43ee0c20015c4dbdbc5bdbbdd3a0a32a5b070a"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "6f15ce78bd6800b4fa0cb01a47d3d1ab49d75ef6e22fec811a8b242e1da74155",
          "withoutMetadata": "43562886573f6c6c3f996a7edb53f6ced5f2c24cd19d55f8c0f74c9643158b92",
          "linkedWithoutMetadata": "43562886573f6c6c3f996a7edb53f6ced5f2c24cd19d55f8c0f74c9643158b92"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11323_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11323_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11323_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11323_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "89885b96e3d21f187cbd870987efa697ab6229c19d60f30ce5455d8a19f814f5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "27a5237150f2ccb71e41dff2cef19f3ee37330d7f4343d9aaaee2be9a75dcebd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "43378c80ce17684e54faaead73c30a5cf1ece1e5fdbc96e14b099e9b963b9414",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "ad5f4888d3344e83b27a84a0ab1ba167f848db68aa3add267ee5e30143afd480",
          "withoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c",
          "linkedWithoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "927199265673a7bd659c1ab5493cc000d2566a067f8e847ac9d9c1c5900544e1",
          "withoutMetadata": "7a3e2a1de513a29577d5deff47d5257ef0cc6e92b48c8ddc29af9e1a14f2353f",
          "linkedWithoutMetadata": "7a3e2a1de513a29577d5deff47d5257ef0cc6e92b48c8ddc29af9e1a14f2353f"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5180_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5180_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5180_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:16",
        "version": {
          "withMetadata": "a480e4cfe4fc5642a6b6dfe8fb52badc7d9253dc741311a05f1d89cb606bf3c7",
          "withoutMetadata": "0d12e808ecf449a404229f5c7dc1447b6f37792733620f6bdf6c26f92f8e568e",
          "linkedWithoutMetadata": "0d12e808ecf449a404229f5c7dc1447b6f37792733620f6bdf6c26f92f8e568e"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)13266_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)13266_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)13266_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "9d0cebd8831b24597f6ef964aca98adf037b1699c8a4c93cdaa946e6cffbb480",
          "withoutMetadata": "555ffcdbac5647864561b4551ed2ed9ab4bb1ba9dde901a6f43a0f221209dbb6",
          "linkedWithoutMetadata": "555ffcdbac5647864561b4551ed2ed9ab4bb1ba9dde901a6f43a0f221209dbb6"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "efcd0f90a3d79c559c3563935684fdb7344dd4a5ba27d1e83448b109c7bc5903",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "fef8a248b832240ccba173145fe72d3cb6338f81257ca43205f6450bee799f97",
          "withoutMetadata": "f81f846d2a9e4ae12098f58ebdcce7a4157a5add82411223936f5feb15c4d989",
          "linkedWithoutMetadata": "f81f846d2a9e4ae12098f58ebdcce7a4157a5add82411223936f5feb15c4d989"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "79ca323df9d22979939d75ee93c15f2a3ab1a7d3dfaab451e5cec0df25dfe542",
          "withoutMetadata": "7718761a955a0f108c7efc648cad7304fbcd61e1bcc90973a059d6f885e2e958",
          "linkedWithoutMetadata": "7718761a955a0f108c7efc648cad7304fbcd61e1bcc90973a059d6f885e2e958"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14051_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)14051_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14051_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)14051_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "a1f6db5f7719343bea4a49a0907ea1c440a141ffa9be45e7e44eebfd18d46416",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "3fddb1bf1149091731dfc898556794666511736b3d5c352e02f77a9d02a90dca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "84758f62364f56e2d47cc4e39fd0ee136c9602d351e02bac7a0be7d10452f6e6",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "6276c146a592a7737181285d1df1892a650d0c76002a052d2bef126f894d6c62",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "c3e6632a16bf2403212459b5264f17c1db90691575fda0fa13eab2a4868fbd1d",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "024cd5fc07264ab4498614e7b402e33c292774cf97def4cbf7ae6f14f4b654d1",
          "withoutMetadata": "005717812fb7ce1246ea9de64c4769888d711ca0ac2257d053aaf88642818564",
          "linkedWithoutMetadata": "005717812fb7ce1246ea9de64c4769888d711ca0ac2257d053aaf88642818564"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "5beed1f1ee04f0402e3f92e35c2c4c78b1c18d743055783b09f1dac812b798ae",
          "withoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c",
          "linkedWithoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "4dec31cc192ba10c17be2bb53e36082181052084d917d0369302971eb6acf29c",
          "withoutMetadata": "7a3e2a1de513a29577d5deff47d5257ef0cc6e92b48c8ddc29af9e1a14f2353f",
          "linkedWithoutMetadata": "7a3e2a1de513a29577d5deff47d5257ef0cc6e92b48c8ddc29af9e1a14f2353f"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5709_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5709_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5709_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "2c231b15e40ad7ac080d6faa6b258b4b5e16d3b5bd6bb6916faf7a21da269ae0",
          "withoutMetadata": "0d12e808ecf449a404229f5c7dc1447b6f37792733620f6bdf6c26f92f8e568e",
          "linkedWithoutMetadata": "0d12e808ecf449a404229f5c7dc1447b6f37792733620f6bdf6c26f92f8e568e"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)16353_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)16353_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)16353_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "b434819402e56547d589dd3ce168a00716833f61f9154962226b771d6abe3789",
          "withoutMetadata": "79cb039dc5d28fab1e8bfe1729d99b42820b45ab9beff8071d905d5d16fd6fbb",
          "linkedWithoutMetadata": "79cb039dc5d28fab1e8bfe1729d99b42820b45ab9beff8071d905d5d16fd6fbb"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "f566a140fcc1c59b925b3dd8e8c2528b1c80a3d2c4ed3b37f52b19dbf788dd03",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:13",
        "version": {
          "withMetadata": "6f7d184c48faeb0878fdc22f2dad9234343c923316df94be217c191e93546dc6",
          "withoutMetadata": "31a8ff7b9dac43fde9bcf349d0731dc2cf8dcbf7e97d72ac4735f6cccc38fa93",
          "linkedWithoutMetadata": "31a8ff7b9dac43fde9bcf349d0731dc2cf8dcbf7e97d72ac4735f6cccc38fa93"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)16648_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)16648_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)16590_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)16606_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)16595_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)16615_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)16648_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)16590_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)16595_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)16606_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)16615_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "592aaa934483e7d0de22bd4bbbf1cab0cde0efd259eb7a20666241421ba01303",
          "withoutMetadata": "f81f846d2a9e4ae12098f58ebdcce7a4157a5add82411223936f5feb15c4d989",
          "linkedWithoutMetadata": "f81f846d2a9e4ae12098f58ebdcce7a4157a5add82411223936f5feb15c4d989"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "859fa25038daa11e88dbd72a061723d3f1b256fc82a03e3d94fff90f69910ec9",
          "withoutMetadata": "7718761a955a0f108c7efc648cad7304fbcd61e1bcc90973a059d6f885e2e958",
          "linkedWithoutMetadata": "7718761a955a0f108c7efc648cad7304fbcd61e1bcc90973a059d6f885e2e958"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17223_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)17223_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17223_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)17223_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "98586ebeaa0abcd4785f9b46f92cb744d2abfdf896447575068c073d9a4cad15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "3fddb1bf1149091731dfc898556794666511736b3d5c352e02f77a9d02a90dca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "d50480514b61dfe51482fede2881c7ea29f8951f6dd3a07281860edda5dbc9f6",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "936235e31acafccb2bb95ef540147726d2cabb2aec3bb1a5ee344265f61ff4ab",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:13",
        "version": {
          "withMetadata": "acf75f4d214513d1a7e5d7937f316c559304d84ba059e0510d417adf2b64e798",
          "withoutMetadata": "31a8ff7b9dac43fde9bcf349d0731dc2cf8dcbf7e97d72ac4735f6cccc38fa93",
          "linkedWithoutMetadata": "31a8ff7b9dac43fde9bcf349d0731dc2cf8dcbf7e97d72ac4735f6cccc38fa93"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)2886_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)2886_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2828_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2844_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2833_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2853_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2886_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2828_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2833_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2844_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2853_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "3fddb1bf1149091731dfc898556794666511736b3d5c352e02f77a9d02a90dca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "7860d82bc0d8c2a14cbee5d798840fc1fa5ff072688eb68391493abf6af6d290",
          "withoutMetadata": "7a3e2a1de513a29577d5deff47d5257ef0cc6e92b48c8ddc29af9e1a14f2353f",
          "linkedWithoutMetadata": "7a3e2a1de513a29577d5deff47d5257ef0cc6e92b48c8ddc29af9e1a14f2353f"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "80ee4c9f4aa514d05ae7344f8c54feafc90ae797de73dc4d2b07e666d32b87d8",
          "withoutMetadata": "31a8ff7b9dac43fde9bcf349d0731dc2cf8dcbf7e97d72ac4735f6cccc38fa93",
          "linkedWithoutMetadata": "31a8ff7b9dac43fde9bcf349d0731dc2cf8dcbf7e97d72ac4735f6cccc38fa93"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10745_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10745_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10687_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10703_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10692_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10712_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10745_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10687_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10692_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10703_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10712_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "a0e156b963b960b2c4fed5f6e37b3763234dc78d57bcddbc2d787c905671091a",
          "withoutMetadata": "f81f846d2a9e4ae12098f58ebdcce7a4157a5add82411223936f5feb15c4d989",
          "linkedWithoutMetadata": "f81f846d2a9e4ae12098f58ebdcce7a4157a5add82411223936f5feb15c4d989"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "4d0befce0f410e690eeaf1f4d0b3a7455b30f193754be03ca8286871fcda0df4",
          "withoutMetadata": "7718761a955a0f108c7efc648cad7304fbcd61e1bcc90973a059d6f885e2e958",
          "linkedWithoutMetadata": "7718761a955a0f108c7efc648cad7304fbcd61e1bcc90973a059d6f885e2e958"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11320_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11320_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11320_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11320_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "e16190c15e656ce9ec3d12fb137303c04fa9d63f2d0bc76a542c33c0e8c7714f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "3fddb1bf1149091731dfc898556794666511736b3d5c352e02f77a9d02a90dca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "f34b2adc547328855245609e4068e773cd55f5aca903abd545776663cf092115",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "72837b7258b56fd562384d15e0eb3dfe31cdd80f267981a0e57cda71e92ef49b",
          "withoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c",
          "linkedWithoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "dfc0fb8de6601c382cdf2d424a798ed59d48509d6a9f9dd2b967b60f9a566afd",
          "withoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3",
          "linkedWithoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5180_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5180_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5180_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "46e8c8fa4389b6767b88a36d46574e5d4c8f0f1c80c4419f742c83e92bbbbed2",
          "withoutMetadata": "0d12e808ecf449a404229f5c7dc1447b6f37792733620f6bdf6c26f92f8e568e",
          "linkedWithoutMetadata": "0d12e808ecf449a404229f5c7dc1447b6f37792733620f6bdf6c26f92f8e568e"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)15823_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)15823_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)15823_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "ebc7ac8ebaa483fcb80fc0f123875c022644c36054fb8e56c21300be6608b8a5",
          "withoutMetadata": "27f720e46e658149825faf81b558a24532e5604eff8b308d1465cc53f8c882c9",
          "linkedWithoutMetadata": "27f720e46e658149825faf81b558a24532e5604eff8b308d1465cc53f8c882c9"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "bbb88745a60261709f442de56935341a1788b3df271bfd71e979ba8ce83c0353",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "bb5fcd5c52c237d977a7093e0ba456974ffc09fa52a4e72687fb1bc4d27e700b",
          "withoutMetadata": "a83a3828b791ab77e9e0c5f9132fe0a91da3497983b0bba00e6c924be61946b4",
          "linkedWithoutMetadata": "a83a3828b791ab77e9e0c5f9132fe0a91da3497983b0bba00e6c924be61946b4"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)16117_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)16117_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)16059_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)16075_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)16064_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)16084_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)16117_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)16059_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)16064_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)16075_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)16084_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "81b616defdd0b18b3ad724eb5f53d3a7332b15eff010dad390540e286d60b6a6",
          "withoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5",
          "linkedWithoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "890af05b7e8f9532092ae1a6196ec3c01f5d444f69243985ee15183b5c243dd6",
          "withoutMetadata": "74a153c55a68f51fe901c2f67175689e4036d19c56c4d7da2d01ddb5189d4623",
          "linkedWithoutMetadata": "74a153c55a68f51fe901c2f67175689e4036d19c56c4d7da2d01ddb5189d4623"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16692_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)16692_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16692_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)16692_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "80da04ee45c07abcb008c6adb3dd478a39b2ba4c4155426acf9fa558585b3f17",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "5e1397b9e79c0e1ccc86623d2b87c595d3713626a100be21fb7453bf45c1e947",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "2f7881b33094042d96c8e3dbc1c2d9371ea6abd0a74273b406072e28981920f2",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "6e3dbec508f1422ddb8b2b7f5765c72cbcc68b13428b719d310610ed39ccadce",
          "withoutMetadata": "a83a3828b791ab77e9e0c5f9132fe0a91da3497983b0bba00e6c924be61946b4",
          "linkedWithoutMetadata": "a83a3828b791ab77e9e0c5f9132fe0a91da3497983b0bba00e6c924be61946b4"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionLength",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)2885_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)2885_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2827_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2843_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2832_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2852_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2885_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2827_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2832_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2843_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2852_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "7745e0649c30d326614a795227f9fa7c0cefc17f4d07988887bc79183f1f3e45",
          "withoutMetadata": "24c4fcc6ed86e39bcd1c3e8e06b0cfca998e8d813daaa9cbbb3e8eef8cca4d9d",
          "linkedWithoutMetadata": "24c4fcc6ed86e39bcd1c3e8e06b0cfca998e8d813daaa9cbbb3e8eef8cca4d9d"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)2893_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)2893_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2835_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2851_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2840_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2860_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2893_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2835_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2840_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2851_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2860_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "32c9ae17c8e52bf8e21febbc8de4a9e5b3731f3ccff3b6abd683720d2d014963",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "025edf78fa0ab9d219b104b21c2ab2db450e97b1202bf8a43bb4b7aade54cc00",
          "withoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c",
          "linkedWithoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "5a5c947abda6a012cb20d6fc829229d6d57af0821dfaf63e702348677a6e87e9",
          "withoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3",
          "linkedWithoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5180_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5180_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5180_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "2618fdbd352142da6b61dd3ee59ffc4daa530aee082d3aa2c8c733475e8d2c65",
          "withoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726",
          "linkedWithoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)13281_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)13281_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)13281_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "83850bec952a58fd59e8a070217e999e629b6a45bdc12e5f3b4c45c1b41ebea6",
          "withoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e",
          "linkedWithoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "8aa3f3a4a234500c215aaffe3efc2f9af34c0422e23d16e939dab94ab3d216a3",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "2b663dfe2d01f0f0d34152cb4411dd4386ebb9ee80ff3861f60b3809b0f68916",
          "withoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5",
          "linkedWithoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "f37d1a184bef0f437c5a8001a57430ebc17769eebca59c1d46cde43d9b626467",
          "withoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031",
          "linkedWithoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14067_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)14067_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14067_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)14067_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "6450a73430a65a3e1e97731816f633adb2a0eee5f6e5701c98ef103c62c80204",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "c34e2a37ef5df7fefb8aeebf69979f5b9d9298f28d55db2cd5fe1e3b3b570c9e",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "3ae055fe04f1daeb93bbb46eb1f0794416275ff5da9d985d4744866c7a2f3d98",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "ab1ce012aca0a5bfcd9b93dec808f0d066ff4ce6f450baa30b171d0a66fe7856",
          "withoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3",
          "linkedWithoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "7854f14f7a918eb3098210a478cfcf5c59e3d3e318386056e3b76b92d618b364",
          "withoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726",
          "linkedWithoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)13754_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)13754_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)13754_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "4677f6988e076df28a2ac0b8c596e7e8b069fa24f8ae0fc3ccbb58acd973f928",
          "withoutMetadata": "e5000059e91f65db8c589fc27f2d2e6394b470d156403d367fc0ee0d34ffbcd9",
          "linkedWithoutMetadata": "e5000059e91f65db8c589fc27f2d2e6394b470d156403d367fc0ee0d34ffbcd9"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "a2f71a1f8531519c0da0f0af9f70b2ef3ab46d1e39bc4ae8b0b8121571b8b9de",
          "withoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03",
          "linkedWithoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)14048_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)14048_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)13990_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)14006_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)13995_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)14015_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)14048_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)13990_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)13995_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)14006_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)14015_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "0900a2b110a7f0eaf9dc84ea3d7a5dd07c4e9606c52b4ed979adc531734f2658",
          "withoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5",
          "linkedWithoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "ecebbb4a4c4555288eadd429f5f834566b080e9c1efac37014c8d5d7810b8dc9",
          "withoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031",
          "linkedWithoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14625_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)14625_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14625_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)14625_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "24bcf09a52437e24a541afedf7b00d8a0567f8d48f2c6b08906577e662bebcf8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "ca838219a7450f0ac4a3942699172627e3e4ffec627bd91ab8f597504851e4fd",
          "withoutMetadata": "14711d44f26328b9142367a54845b0ca489cc475c7dace62eed2c4225bdcceb2",
          "linkedWithoutMetadata": "14711d44f26328b9142367a54845b0ca489cc475c7dace62eed2c4225bdcceb2"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "ca6b4e0c0fff697220d4e71ef63ccd99f1ceab89bc76c9a74a86b76343918f83",
          "withoutMetadata": "3a3fc939ec1e158aba4e0bb259de27b7d090b038a42d76275ee3fb45d00b7c1a",
          "linkedWithoutMetadata": "3a3fc939ec1e158aba4e0bb259de27b7d090b038a42d76275ee3fb45d00b7c1a"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10712_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10728_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10717_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10737_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10770_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10712_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10717_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10728_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10737_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "0c8eb3309bd779627657c5a51afa9b366fd02f2c04bacca468552b2167f79c8e",
          "withoutMetadata": "76c4902b91be880d186cf60a5d308546f5ad4afd50ed9b3b26e88acb8276b586",
          "linkedWithoutMetadata": "76c4902b91be880d186cf60a5d308546f5ad4afd50ed9b3b26e88acb8276b586"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "1523a92d42f483064ccc4b95f947f0c696f556c8ef9c55bbe75001345928c1e5",
          "withoutMetadata": "12b8a914d957a913bcda0e44a5bc174a00ea571cef28d856f0b21098090896a5",
          "linkedWithoutMetadata": "12b8a914d957a913bcda0e44a5bc174a00ea571cef28d856f0b21098090896a5"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11347_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "c194dffdfe3a751b3b51988769669d7b6ab7482b79fb051d394766c47908ac30",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "8a79a2305b0e2d8ca7ec66f37c99c75ca85e874594fb2f8aeb0abe0d29121e0c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "846d4a94b3430c1da91c0bcfb3e310a1617f9d22662742f4d6b24f97946bc7d8",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "f56af0301eae41d8e7627ddb5bd61ae9f8cfc28c69a4012ce2a9c4581a450ebd",
          "withoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c",
          "linkedWithoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "ab1ce012aca0a5bfcd9b93dec808f0d066ff4ce6f450baa30b171d0a66fe7856",
          "withoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3",
          "linkedWithoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5180_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5180_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5180_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "cfbd773ce1dcc233e8d47668e3f92b535d2c399c1c78ac565c52d94429020d5d",
          "withoutMetadata": "7991a0057eb6614a5eee7f518a58a058dc32d6eca31f814a1d1add319e6305ff",
          "linkedWithoutMetadata": "7991a0057eb6614a5eee7f518a58a058dc32d6eca31f814a1d1add319e6305ff"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)13345_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)13345_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)13345_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "0ed84d7e2532ef096b0e263ce50c2a5dd9dbd9297f9633485ab419c7de9db74a",
          "withoutMetadata": "132bdbdd0a4b287983ea2f112e5daa4f9c0eb0c37615940adcf6bbfe578c2946",
          "linkedWithoutMetadata": "132bdbdd0a4b287983ea2f112e5daa4f9c0eb0c37615940adcf6bbfe578c2946"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "98eef4cfdba475cd9c9b0d7f59ac5584f2ca7a79669511c37e2bbe370eb4b5bf",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "e94aa4e9b900bacfbed4b056560229cd8eef6a8744c2796ff259e803f2f87a26",
          "withoutMetadata": "608a61610cbe030cde21ebec8ff1f483ca76e20c377ab4a09a2e133ea4ef135f",
          "linkedWithoutMetadata": "608a61610cbe030cde21ebec8ff1f483ca76e20c377ab4a09a2e133ea4ef135f"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "ecebbb4a4c4555288eadd429f5f834566b080e9c1efac37014c8d5d7810b8dc9",
          "withoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031",
          "linkedWithoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14131_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)14131_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14131_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)14131_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ImmutableState.sol:ImmutableState": {
        "src": "contracts/base/ImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IImmutableState.sol:IImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ImmutableState",
            "src": "contracts/base/ImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/ImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/base/ImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/base/ImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IImmutableState.sol:IImmutableState": {
        "src": "contracts/interfaces/IImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "24bcf09a52437e24a541afedf7b00d8a0567f8d48f2c6b08906577e662bebcf8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "09a63d166fee84cc2efc30dbb782ebc86229e5804bda7ac6ccf1bf6df7d56c37",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "f6cbe16bdc33fb05e19091feacf27c389db71931353957e3d2d6970ed2dc644d",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "5a5c947abda6a012cb20d6fc829229d6d57af0821dfaf63e702348677a6e87e9",
          "withoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3",
          "linkedWithoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "a2f71a1f8531519c0da0f0af9f70b2ef3ab46d1e39bc4ae8b0b8121571b8b9de",
          "withoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03",
          "linkedWithoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10712_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10728_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10717_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10737_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10770_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10712_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10717_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10728_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10737_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "2b663dfe2d01f0f0d34152cb4411dd4386ebb9ee80ff3861f60b3809b0f68916",
          "withoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5",
          "linkedWithoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "f37d1a184bef0f437c5a8001a57430ebc17769eebca59c1d46cde43d9b626467",
          "withoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031",
          "linkedWithoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11347_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "6450a73430a65a3e1e97731816f633adb2a0eee5f6e5701c98ef103c62c80204",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "2618fdbd352142da6b61dd3ee59ffc4daa530aee082d3aa2c8c733475e8d2c65",
          "withoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726",
          "linkedWithoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3642_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3642_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3642_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "83850bec952a58fd59e8a070217e999e629b6a45bdc12e5f3b4c45c1b41ebea6",
          "withoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e",
          "linkedWithoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "5e346f5671ab3c7f0d96f03005447df6f31f19cc97296d0b770d3da696d3ceac",
          "withoutMetadata": "cb59cc3a9dff123da93690a993d926eb7da4e12e02c4d0a1d1974d80c5361213",
          "linkedWithoutMetadata": "cb59cc3a9dff123da93690a993d926eb7da4e12e02c4d0a1d1974d80c5361213"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "815c77452d5ac975b70c173124badc59c65fca67a283ae0b1cca9d801bf2606c",
          "withoutMetadata": "38caa1aa96a0f5acdaf5791298be74ece0e2027f798f67665e8f460bfe421d98",
          "linkedWithoutMetadata": "38caa1aa96a0f5acdaf5791298be74ece0e2027f798f67665e8f460bfe421d98"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10712_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10728_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10717_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10737_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10770_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10712_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10717_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10728_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10737_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "3d14c660bdb7b7a0c4151d600d8a251f892a7721156623a47fd8a458b9948209",
          "withoutMetadata": "fc4f17ea2aaa91db92a6bd07571e8bc511a3cadffd0bbd6dd941fac5d673f39c",
          "linkedWithoutMetadata": "fc4f17ea2aaa91db92a6bd07571e8bc511a3cadffd0bbd6dd941fac5d673f39c"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "2d4aa0b1b8943cde34e2042004a070e43de47829fac2ce64d8b7adc4b4c21e40",
          "withoutMetadata": "43e7037f91b391ec1fb373524f285acf017964a5b91f6b23966845fa93dab717",
          "linkedWithoutMetadata": "43e7037f91b391ec1fb373524f285acf017964a5b91f6b23966845fa93dab717"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11347_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "8d3577d585f5b0555d11095f67a1ef6d611711116aef11e0bdc99b88354749f4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "3c8cd7fd2ef45a7d12076d2bec39c2cb94133d2809140c971dfce94f523b3e2a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "87cdc7f402f292d79145f129639fc6f79d51523f3d7f080a8d6656830b8772c8",
          "withoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726",
          "linkedWithoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3643_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3643_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3643_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "67fc0658da3dcb02578b20237e8c0970b1774569bfd3c8e78ffe9d79d14826a0",
          "withoutMetadata": "9d3c07fc34e77bedd2cd562448732233780dc91c1f2ca085f66fb15eecf24c60",
          "linkedWithoutMetadata": "9d3c07fc34e77bedd2cd562448732233780dc91c1f2ca085f66fb15eecf24c60"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "5a5c947abda6a012cb20d6fc829229d6d57af0821dfaf63e702348677a6e87e9",
          "withoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3",
          "linkedWithoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "a2f71a1f8531519c0da0f0af9f70b2ef3ab46d1e39bc4ae8b0b8121571b8b9de",
          "withoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03",
          "linkedWithoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10712_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10728_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10717_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10737_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10770_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10712_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10717_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10728_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10737_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "2b663dfe2d01f0f0d34152cb4411dd4386ebb9ee80ff3861f60b3809b0f68916",
          "withoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5",
          "linkedWithoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "f37d1a184bef0f437c5a8001a57430ebc17769eebca59c1d46cde43d9b626467",
          "withoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031",
          "linkedWithoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11347_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "6450a73430a65a3e1e97731816f633adb2a0eee5f6e5701c98ef103c62c80204",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "2618fdbd352142da6b61dd3ee59ffc4daa530aee082d3aa2c8c733475e8d2c65",
          "withoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726",
          "linkedWithoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3642_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3642_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3642_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "83850bec952a58fd59e8a070217e999e629b6a45bdc12e5f3b4c45c1b41ebea6",
          "withoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e",
          "linkedWithoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "a891d22b4fa7c1e61058b54c5761a0976616cc15b2b29cf408320578452e1b91",
          "withoutMetadata": "06ccff071fae0a6fbc74f190068d032b1434eb2d007a142557348bd36371a566",
          "linkedWithoutMetadata": "06ccff071fae0a6fbc74f190068d032b1434eb2d007a142557348bd36371a566"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3629_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3629_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3629_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "b06905e454634ef13b2802fe49c657d2eb8746ddfec8486c1486573996a20af5",
          "withoutMetadata": "7e4adea821b40a6b5a11fab8ae062485bb45f6932227e7420f7526f97f95ed83",
          "linkedWithoutMetadata": "7e4adea821b40a6b5a11fab8ae062485bb45f6932227e7420f7526f97f95ed83"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "2618fdbd352142da6b61dd3ee59ffc4daa530aee082d3aa2c8c733475e8d2c65",
          "withoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726",
          "linkedWithoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3642_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3642_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3642_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "83850bec952a58fd59e8a070217e999e629b6a45bdc12e5f3b4c45c1b41ebea6",
          "withoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e",
          "linkedWithoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "494d6d057c690e7096760ea54fdb0201ea5c79dd85127cfb9a5326fcc7356cec",
          "withoutMetadata": "d91ee03eae4034464bae1677d185d0752f5939073a55543fd01300811e58794a",
          "linkedWithoutMetadata": "d91ee03eae4034464bae1677d185d0752f5939073a55543fd01300811e58794a"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "610b08eb7e52d747b412cc5a7d1cac6d6b518150cdcbf545d6b8fa49f899101d",
          "withoutMetadata": "567bbe11ee175b479d5e8299e03d492615f01f212e461826c5a733abf6e6dacc",
          "linkedWithoutMetadata": "567bbe11ee175b479d5e8299e03d492615f01f212e461826c5a733abf6e6dacc"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10712_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10728_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10717_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10737_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10770_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10712_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10717_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10728_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10737_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "0428478342c32b9af9bee5fd16798c04479b51e318ede9c98b395357151f8b0b",
          "withoutMetadata": "973feac4bca86e5e167431012a8f2f4eab2ce400a38d40e709eb7692dc240373",
          "linkedWithoutMetadata": "973feac4bca86e5e167431012a8f2f4eab2ce400a38d40e709eb7692dc240373"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "2e5fd125dd754ba33b10797091f771bc7bec41c06f0b928d018cf5d16caa7b54",
          "withoutMetadata": "1c31bce27e2d8714348d0b8f486d6958ec004fea9e548ca53437858bdb4665fc",
          "linkedWithoutMetadata": "1c31bce27e2d8714348d0b8f486d6958ec004fea9e548ca53437858bdb4665fc"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11347_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "b5c88c39219c890336306f85ad3ab5aba6fcd51b2cbf41d7c2fed2a233be1699",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "b6bbd68a2a6c5703e9e70c8f5f67e5f9168de0f2d368d14de8b58f0d15866615",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "5a5c947abda6a012cb20d6fc829229d6d57af0821dfaf63e702348677a6e87e9",
          "withoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3",
          "linkedWithoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "a891d22b4fa7c1e61058b54c5761a0976616cc15b2b29cf408320578452e1b91",
          "withoutMetadata": "06ccff071fae0a6fbc74f190068d032b1434eb2d007a142557348bd36371a566",
          "linkedWithoutMetadata": "06ccff071fae0a6fbc74f190068d032b1434eb2d007a142557348bd36371a566"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)13741_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)13741_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)13741_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "b06905e454634ef13b2802fe49c657d2eb8746ddfec8486c1486573996a20af5",
          "withoutMetadata": "7e4adea821b40a6b5a11fab8ae062485bb45f6932227e7420f7526f97f95ed83",
          "linkedWithoutMetadata": "7e4adea821b40a6b5a11fab8ae062485bb45f6932227e7420f7526f97f95ed83"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "a2f71a1f8531519c0da0f0af9f70b2ef3ab46d1e39bc4ae8b0b8121571b8b9de",
          "withoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03",
          "linkedWithoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)14035_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)14035_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)13977_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)13993_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)13982_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)14002_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)14035_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)13977_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)13982_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)13993_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)14002_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "2b663dfe2d01f0f0d34152cb4411dd4386ebb9ee80ff3861f60b3809b0f68916",
          "withoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5",
          "linkedWithoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "f37d1a184bef0f437c5a8001a57430ebc17769eebca59c1d46cde43d9b626467",
          "withoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031",
          "linkedWithoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14612_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)14612_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14612_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)14612_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "6450a73430a65a3e1e97731816f633adb2a0eee5f6e5701c98ef103c62c80204",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "a94d7ed45bb3445c66eec322c0f6cf82e0bc7571c0166fca4ad16bce60cabb61",
          "withoutMetadata": "52af9025b44073ef428402f347baf157eb6da5ac1e64e6fb08f31ba36aa78a80",
          "linkedWithoutMetadata": "52af9025b44073ef428402f347baf157eb6da5ac1e64e6fb08f31ba36aa78a80"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "c8aea3b6cbc6f02293ffb1e1ffb60a3c2ed5773fe21c5e825e5c63b89a442366",
          "withoutMetadata": "5147b7111b61c04e6384ada08635a7839617496f53b4e94c499715b30266747e",
          "linkedWithoutMetadata": "5147b7111b61c04e6384ada08635a7839617496f53b4e94c499715b30266747e"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10712_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10728_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10717_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10737_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10770_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10712_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10717_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10728_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10737_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "c144f84423e3de4d8b2cc38274bc53a902053f5b7cf2d37814525dca25dfa41a",
          "withoutMetadata": "8cd6fb94ed692250dd9970e986285135d81afb4635ba0270829fd61a868e394c",
          "linkedWithoutMetadata": "8cd6fb94ed692250dd9970e986285135d81afb4635ba0270829fd61a868e394c"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "fd1fca3b94c7f6bfa7cea3e6d400372ce88ab1bf47fdbe5a6250b7cb1c59e8fc",
          "withoutMetadata": "913ad6ba032eab736f6badeadcc4a91c2813745fccf10b47c117b9b63ad9a135",
          "linkedWithoutMetadata": "913ad6ba032eab736f6badeadcc4a91c2813745fccf10b47c117b9b63ad9a135"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11347_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "67fb4853a8ddff35957ce7af2984becbdc6ab225dcb7ed5e5f0d77bcd25ed8e3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "b981b3144164bdbefacbc424d1c421d417ff34b469550a01784077da8226b1ff",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "8e0f27df45a1824eaf41e63f18ffbcf3163c4c68defde2d8b9ed139621039a7e",
          "withoutMetadata": "8278ebec5f19fdeb561177592882d3c0a50ed6cfc7f5347dc6ef03f61c6eb71c",
          "linkedWithoutMetadata": "8278ebec5f19fdeb561177592882d3c0a50ed6cfc7f5347dc6ef03f61c6eb71c"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3634_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3634_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3634_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "59d47b7f81a0cbe3c0578f8623426557457e6ac7e1698c451f8fc6d26d1fb462",
          "withoutMetadata": "e9fa044baae1c5ab1ddc66d4e5bc67af694cac7c24eead1f841c4dce6b5e9921",
          "linkedWithoutMetadata": "e9fa044baae1c5ab1ddc66d4e5bc67af694cac7c24eead1f841c4dce6b5e9921"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "5a5c947abda6a012cb20d6fc829229d6d57af0821dfaf63e702348677a6e87e9",
          "withoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3",
          "linkedWithoutMetadata": "0b6bd369d5269691e4bbe4eb9f6f45628704c218be3b3e3d666476b29c3e55f3"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "a2f71a1f8531519c0da0f0af9f70b2ef3ab46d1e39bc4ae8b0b8121571b8b9de",
          "withoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03",
          "linkedWithoutMetadata": "f1f627a6b85e62e9d5825366c4c57f7667ea40283c5be7c17ebbea2bf9173d03"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)10770_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10712_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10728_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10717_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10737_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10770_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10712_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10717_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10728_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10737_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "2b663dfe2d01f0f0d34152cb4411dd4386ebb9ee80ff3861f60b3809b0f68916",
          "withoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5",
          "linkedWithoutMetadata": "d59627ec31fc81f8cffa07abc0ab4955187e19bd6ad2cf6410145398c7bfcec5"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "f37d1a184bef0f437c5a8001a57430ebc17769eebca59c1d46cde43d9b626467",
          "withoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031",
          "linkedWithoutMetadata": "ad0115010babfd2a659afca22eebeaf87a33571220c1b0271e6a2fc29d9c0031"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11347_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11347_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "6450a73430a65a3e1e97731816f633adb2a0eee5f6e5701c98ef103c62c80204",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "24e468b68e161e9c49972c630c2bc53df71f6b010838d7e562cfdf706b4a2d87",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "48fed9225c1f4856d82f067b8ab61a33aac094f65af210a04150aa729e74accf",
          "withoutMetadata": "cf2cc54db3bf40d6aebe41efc7488dabedcd51990b880a76701b44cc8bcbb3b0",
          "linkedWithoutMetadata": "cf2cc54db3bf40d6aebe41efc7488dabedcd51990b880a76701b44cc8bcbb3b0"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Router.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "d6ccbb0d02bf7db3f16d209d9ec57b1a8a31f73fcf4fe8552484672adfb688b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "32c9ae17c8e52bf8e21febbc8de4a9e5b3731f3ccff3b6abd683720d2d014963",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "0bef0bc3012c701704f0282b8c8eb3544f196a6f43e1754f24698ebb405493cf",
          "withoutMetadata": "005717812fb7ce1246ea9de64c4769888d711ca0ac2257d053aaf88642818564",
          "linkedWithoutMetadata": "005717812fb7ce1246ea9de64c4769888d711ca0ac2257d053aaf88642818564"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "025edf78fa0ab9d219b104b21c2ab2db450e97b1202bf8a43bb4b7aade54cc00",
          "withoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c",
          "linkedWithoutMetadata": "907a52d45be807b4e57a3be0c18967fd12213b763920d6d298cda6285d29f61c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "13761b64ddae6a4ae109bcc9b244a554866950194b670abe2b413d2c6a05c3f8",
          "withoutMetadata": "b0b94cf744cc12f7b533faeb4547f871ff992a97f2e2a3c27dc5a80e25620d63",
          "linkedWithoutMetadata": "b0b94cf744cc12f7b533faeb4547f871ff992a97f2e2a3c27dc5a80e25620d63"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5709_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5709_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5709_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "2618fdbd352142da6b61dd3ee59ffc4daa530aee082d3aa2c8c733475e8d2c65",
          "withoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726",
          "linkedWithoutMetadata": "400a3e85c7bc03c91678f0d3db1e530e18f86cc557ab3c635853e8275460f726"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)16379_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)16379_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)16379_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "83850bec952a58fd59e8a070217e999e629b6a45bdc12e5f3b4c45c1b41ebea6",
          "withoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e",
          "linkedWithoutMetadata": "0dd00ec994788b0214d1e3407b9bb3652870ea97d4b61b855fd2a85fd317d91e"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "8aa3f3a4a234500c215aaffe3efc2f9af34c0422e23d16e939dab94ab3d216a3",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "521ca139303caf1d2ff9bd7256de69f20f55a824b9cf664c9a13ae0784ebb9a9",
          "withoutMetadata": "d778be0a5fbb714fd5f2e028f8e7892eda22a339e5059014186501e23c020e9d",
          "linkedWithoutMetadata": "d778be0a5fbb714fd5f2e028f8e7892eda22a339e5059014186501e23c020e9d"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionCounter",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "positionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_struct(TradePosition)16673_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeyToIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(TradePosition)16673_storage)": {
              "label": "mapping(bytes32 => struct IPositionStorage.TradePosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)16615_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)16631_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)16620_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)16640_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)16673_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)16615_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)16620_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)16631_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)16640_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "7546fc87610abd95d9728ced145b3c72503c425b74625cbb1288c5a1e4911e54",
          "withoutMetadata": "f45d003242a17cedaacd6113ef84c6339033bbf02b097011c7e608fcf9c41ade",
          "linkedWithoutMetadata": "f45d003242a17cedaacd6113ef84c6339033bbf02b097011c7e608fcf9c41ade"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "7115d6fcd150c586eb3582b83927e6a0837a519819e822c745e0d6cb3c9ecbac",
          "withoutMetadata": "ba45331647419ea7a517acb2a7a933eb6eb0f2b476126397caab89da2061e7bc",
          "linkedWithoutMetadata": "ba45331647419ea7a517acb2a7a933eb6eb0f2b476126397caab89da2061e7bc"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17250_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)17250_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17250_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)17250_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(bytes32)",
          "positionKeys(uint256)",
          "positionKeyToIndex(bytes32)",
          "positionLength()",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "eabdf5bb50b5db43ca62a38b98e694af90f95a0369eaffc03a968a0a108c8d96",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "d6ccbb0d02bf7db3f16d209d9ec57b1a8a31f73fcf4fe8552484672adfb688b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "c34e2a37ef5df7fefb8aeebf69979f5b9d9298f28d55db2cd5fe1e3b3b570c9e",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "3ae055fe04f1daeb93bbb46eb1f0794416275ff5da9d985d4744866c7a2f3d98",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "de993f86a8b8626a1f7a861ebfefd2432c8065aa23b312910d264a4a9629525d",
          "withoutMetadata": "b0b94cf744cc12f7b533faeb4547f871ff992a97f2e2a3c27dc5a80e25620d63",
          "linkedWithoutMetadata": "b0b94cf744cc12f7b533faeb4547f871ff992a97f2e2a3c27dc5a80e25620d63"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "a4652082c300b63ee2d249accf04566144b339ac324946baeba9c5d5ec537e17",
          "withoutMetadata": "97db3784bca2d1dafafde7b07306903c17502512e7784e9b00a6b0566e39fd14",
          "linkedWithoutMetadata": "97db3784bca2d1dafafde7b07306903c17502512e7784e9b00a6b0566e39fd14"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)11098_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)11098_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)11040_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)11056_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)11045_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)11065_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)11098_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)11040_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)11045_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)11056_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)11065_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "8b3ea7f0f5e4c15844cb7590deaa7c1c61a2e65b8eccc107211369f5949b0b2c",
          "withoutMetadata": "a3c4831ff2ba2b5b79187c74be6bae33677e113e4fb7b8d4332aac5443fe640c",
          "linkedWithoutMetadata": "a3c4831ff2ba2b5b79187c74be6bae33677e113e4fb7b8d4332aac5443fe640c"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "5b6b197a8286b6ff0cc4f7c09938cd0f72248a7de84a64a3ff82285ac3619fc2",
          "withoutMetadata": "ba45331647419ea7a517acb2a7a933eb6eb0f2b476126397caab89da2061e7bc",
          "linkedWithoutMetadata": "ba45331647419ea7a517acb2a7a933eb6eb0f2b476126397caab89da2061e7bc"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11704_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11704_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11704_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11704_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "3eb744b309dc0b6e846011d3b583d4af7d90fa67145f30cebf3ce27e09b4e9e9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "d6ccbb0d02bf7db3f16d209d9ec57b1a8a31f73fcf4fe8552484672adfb688b8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "73c6e18cfc8804d8e9cc9099ab30f7b91354878f256ffcdd2532e12b2ae8fb57",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "209b31d9c8b201ecb240a7e0d3c5187cabe33bde1e529adf8a3f8ee11dc82497",
          "withoutMetadata": "b86559a68f3de50d868f4b5ae4c7dc603c480d66f5b88f8524b95c5b59b2f14e",
          "linkedWithoutMetadata": "b86559a68f3de50d868f4b5ae4c7dc603c480d66f5b88f8524b95c5b59b2f14e"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "c65ae1d8a774101d1244d3dd1abf80258e794b84a9813f28f2b446020372daa8",
          "withoutMetadata": "2a2c9a74e8640aa4aa5d6b7127c3c7c516c729b38c7624291a695f723b591bd1",
          "linkedWithoutMetadata": "2a2c9a74e8640aa4aa5d6b7127c3c7c516c729b38c7624291a695f723b591bd1"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "243486a2f09e9ad5b9bd7546e7dcc8b43d75bb44dff532bbc35667814dfa0101",
          "withoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9",
          "linkedWithoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5722_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5722_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5722_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "67c266cfc1928e3be451fcc2445e25509d2af4d8d25199647bedac9f340fe357",
          "withoutMetadata": "978671fe36597da33f563f6bde82f58077df7317d68ec3456d74af4a8b5772b4",
          "linkedWithoutMetadata": "978671fe36597da33f563f6bde82f58077df7317d68ec3456d74af4a8b5772b4"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)17078_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)17078_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)17078_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "f80906638a6af2efedd50f1560c9af4b6b59399211614024c2f242951722df72",
          "withoutMetadata": "eb14c15ae09c744f1d438b3356e0abf50c7e1f9fd448f062ee820e6aa0dfa391",
          "linkedWithoutMetadata": "eb14c15ae09c744f1d438b3356e0abf50c7e1f9fd448f062ee820e6aa0dfa391"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "337604d184bddcc654046179c049216107931536bc4f33c6825a4f946a9bd9d4",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "93c873953b3a3bc71d6c8ede1b92c0c89f7ee4661b980b8f6a331ccaf8b33c6f",
          "withoutMetadata": "736c28391b87f4172d16d57c5db0c50cbc2095f451581bb470c721151c82cfcf",
          "linkedWithoutMetadata": "736c28391b87f4172d16d57c5db0c50cbc2095f451581bb470c721151c82cfcf"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)17372_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)17372_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)17314_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)17330_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)17319_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)17339_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)17372_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)17314_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)17319_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)17330_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)17339_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "d2fa2fbcae5fd97d36dd73ffc438c58c7d3daaf674ef162e80fddc4b44c694bc",
          "withoutMetadata": "94c2dc14e14fc842f7e57270d5cbae898d820cafbb5496b1d3429d7eae245fbd",
          "linkedWithoutMetadata": "94c2dc14e14fc842f7e57270d5cbae898d820cafbb5496b1d3429d7eae245fbd"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "475c5b50cf318a789fbb90ffb27a3ff847c616854b7c3c239748d7f299d70ccf",
          "withoutMetadata": "c838c72170ea8a42344f8e8f3044f5675829ceb5860fdbdfb369e5b67f5bb678",
          "linkedWithoutMetadata": "c838c72170ea8a42344f8e8f3044f5675829ceb5860fdbdfb369e5b67f5bb678"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "fca0691dea4add4d1b126b61b6453d85c40b5a53c621500aafd999f603d372e3",
          "withoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf",
          "linkedWithoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17978_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)17978_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)17978_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)17978_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "348bb7b9dd83c05e9f365e93fdc5a28da411c6d425097b9941c41339fdf53f4c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "833f84de8590ab8915d68a9f7977a89ec08ff9a67ea759e20cd78d3446af98de",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "37e2b418740499485440ad5921e57479cb997cf352b9b2bec513d60672a8e9e6",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "ae4c42449bcd56022b980cbfabc26b7036c1a5caebd21f1fa7515292da1b8ef2",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "b786fc6e9f54c95d03981b12c0433f9796b3b47b632b7c8ea6ef547a715a92f3",
          "withoutMetadata": "45e02c4802da59a6f109f6466d9ea8e1ba6f8141766f5dfd2af03ea9b0bfefd4",
          "linkedWithoutMetadata": "45e02c4802da59a6f109f6466d9ea8e1ba6f8141766f5dfd2af03ea9b0bfefd4"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "6e2e1efd1dfb56cb9b08e347d824def79d28f7de93a2a599501a0656e4b43125",
          "withoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9",
          "linkedWithoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5178_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5178_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5178_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "9e0c2303541d6dd6bf0caaa963ea3eee78b39b699829ee0c631f4180890c32e5",
          "withoutMetadata": "f05d7fa6280285a3d942a042bfa9e7214508446841ae834838e6c79a4c5a8fba",
          "linkedWithoutMetadata": "f05d7fa6280285a3d942a042bfa9e7214508446841ae834838e6c79a4c5a8fba"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "positionStorage",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "withdrawalMonitor",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:35"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)13641_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)13641_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)13641_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "74a88f0021318083603397611a4ec3a2dd61e30b28e8ffaeaa701290deebd0e4",
          "withoutMetadata": "6b0e0410aff89ac6b20f0817a92cb378a4d93b596a32c00a56ed9d9c078c9970",
          "linkedWithoutMetadata": "6b0e0410aff89ac6b20f0817a92cb378a4d93b596a32c00a56ed9d9c078c9970"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "cc5f1fc001dac89d3268f823904ee8899f8dd648b4805dae98771691fc1e398b",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "4b59c21754528a71dc3ae3ea146787106290e2f8245dbf6323f5f2fcb6b05a66",
          "withoutMetadata": "bb76fd7752f6871c4794af349a4a6bcff850dc22c8960715695cbd909ac75eea",
          "linkedWithoutMetadata": "bb76fd7752f6871c4794af349a4a6bcff850dc22c8960715695cbd909ac75eea"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "7bf37a16002cc7722d0c781a8459dd209b9c888defa8e394f0e3c52fc2a475bf",
          "withoutMetadata": "adf2932d05c6211f5f175c3a836047ace5dc27f825b37828f0d92e664d567eab",
          "linkedWithoutMetadata": "adf2932d05c6211f5f175c3a836047ace5dc27f825b37828f0d92e664d567eab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "e83bf96e85a829c4488f5d2d3683d125e80b00b9835ca3d8911b78e790d440aa",
          "withoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf",
          "linkedWithoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14466_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)14466_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)14466_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)14466_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "positionStorage()",
          "withdrawalMonitor()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "2fdfc0fb727a8162f188facd2a4e1a8c19affab93484576650b5dce7f1421cc3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "efd20e4593957c2112b5798f3b14703306dcc44a77db6fac1219774c24321c4b",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "05056d15db85a5d6f209d28358330616b0ece88eb544e4b449a424dcf4d883d8",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "9fb37e19a0d44ab440df3f06eeb68cc1fae213ca24245a597b1f803728e9a90f",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "8f14afadb663c99f9a018ebc8f6b7eb49555d587dd44e8bfdb78044742fe8e7c",
          "withoutMetadata": "bc1872417ba60b402704fb62af158561f7883466fc53d79033b35ef80e6134af",
          "linkedWithoutMetadata": "bc1872417ba60b402704fb62af158561f7883466fc53d79033b35ef80e6134af"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "265c8684bc24025e910abfc0dc12ddcbd5a7a3c9f138fa48f0d1857aeb40724d",
          "withoutMetadata": "45e02c4802da59a6f109f6466d9ea8e1ba6f8141766f5dfd2af03ea9b0bfefd4",
          "linkedWithoutMetadata": "45e02c4802da59a6f109f6466d9ea8e1ba6f8141766f5dfd2af03ea9b0bfefd4"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "7fd8fbbd11dae2cf1750993d83bc620110c6743edd9bccdfb4141a296e45b260",
          "withoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9",
          "linkedWithoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5722_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5722_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5722_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "6e73ad1cf94d3e622ed9ab4c04f9f8c4b5a93423a550096d761804f22871ccf6",
          "withoutMetadata": "df63fe9a36d2c01b0fe4893822c3853d849e8f462ee16d8fb3c6760c2190c8bf",
          "linkedWithoutMetadata": "df63fe9a36d2c01b0fe4893822c3853d849e8f462ee16d8fb3c6760c2190c8bf"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)17224_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)17224_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)17224_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "28b88d4d02109b1027bf136da739aebcd65a250971977c78c097d58788d9cfe2",
          "withoutMetadata": "48a4cb9a9affa06d79e01d622bc9346647eff853676880128779ce92bc82fddc",
          "linkedWithoutMetadata": "48a4cb9a9affa06d79e01d622bc9346647eff853676880128779ce92bc82fddc"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "fe5f652db35bd45bea96020c8bad086cda1e1249f05dc0886c948fe0529feba6",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "0559470898e77260b52d462f889accdb1137c47ea2ac500086e55c063f655881",
          "withoutMetadata": "1322582f6016424330e30df99504e971ca8c8b18777f0d7dba19eda82396374f",
          "linkedWithoutMetadata": "1322582f6016424330e30df99504e971ca8c8b18777f0d7dba19eda82396374f"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)17518_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)17518_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)17450_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)17466_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)17455_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)17485_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isTakenProfit",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)17518_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)17450_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)17455_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)17466_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)17485_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "9e57972396342faffc7993489be08aa423b3eee18079b86d1b9a7901cd2eb225",
          "withoutMetadata": "bb76fd7752f6871c4794af349a4a6bcff850dc22c8960715695cbd909ac75eea",
          "linkedWithoutMetadata": "bb76fd7752f6871c4794af349a4a6bcff850dc22c8960715695cbd909ac75eea"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "9b64aa4fcdc654ab62acedcf799380391c6ff37a68c3cea971679c32c37dd5bc",
          "withoutMetadata": "adf2932d05c6211f5f175c3a836047ace5dc27f825b37828f0d92e664d567eab",
          "linkedWithoutMetadata": "adf2932d05c6211f5f175c3a836047ace5dc27f825b37828f0d92e664d567eab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "fd61dfa1aeb5e2e33839b56f1f3b1fbd639104b3b174510327374f42e7aec9f5",
          "withoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf",
          "linkedWithoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)18124_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)18124_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)18124_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)18124_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address,address,uint256))",
          "updateTakeProfitPrice((bytes32,uint256,address,address,uint256))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "18cf869910d03a0450f58a37ca8d1d7b1534fa7d89f2beb5a0613a3d108a6601",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "21e3fcd40cd3bc7efd97e64106db48f80bc87136a402eb8cf9e69541b8f22efe",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "1a722235d6254d10a9b2f436e1411a28fd17e3d43a6b5eebccd1972ee0dd4bf7",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "0acece4d7166c55cb15abfc8de180d9d4d46fb8574e9ff2d9100f65bdc12dfa8",
          "withoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b",
          "linkedWithoutMetadata": "1a49ae3fc57e83a944ea80e00ac08e52834f03bfb64fd2afe01af69d70906a5b"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateTakeProfitPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:76"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateTakeProfitPriceFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "17",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "24",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "e72a54fb4241424ce7b0a8616ffe13f0800cbcf10e7cafae488fa43ceb310fd1",
          "withoutMetadata": "bc1872417ba60b402704fb62af158561f7883466fc53d79033b35ef80e6134af",
          "linkedWithoutMetadata": "bc1872417ba60b402704fb62af158561f7883466fc53d79033b35ef80e6134af"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "390ae2369edcdfbc8ea8667bdd2c1d85cea5d94a8e9230d87b2656ce468bd6e7",
          "withoutMetadata": "45e02c4802da59a6f109f6466d9ea8e1ba6f8141766f5dfd2af03ea9b0bfefd4",
          "linkedWithoutMetadata": "45e02c4802da59a6f109f6466d9ea8e1ba6f8141766f5dfd2af03ea9b0bfefd4"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "b14e4e8dbec7161076ced13101788e86548256e0942d500d466beb5789b07118",
          "withoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9",
          "linkedWithoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)5722_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)5722_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)5722_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "4cef769935c0f615856f11773ff2078ad00992f1bcb7c166c2bcff14e632c05c",
          "withoutMetadata": "307a0ba038dfa66592644bfc0fd9b050113c9e3d423a6aae232b9f5f9f72d922",
          "linkedWithoutMetadata": "307a0ba038dfa66592644bfc0fd9b050113c9e3d423a6aae232b9f5f9f72d922"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateTakeProfitPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)17500_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)17500_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)17500_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "948c6f25a2951d81395be01d68831c5a0f3f87cca66f101b55ff87e4f40e0ee0",
          "withoutMetadata": "f7ba4d901319f9e7f1265209f75be309a7e357cb18fc41065d6dc34eeeaefe23",
          "linkedWithoutMetadata": "f7ba4d901319f9e7f1265209f75be309a7e357cb18fc41065d6dc34eeeaefe23"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "49f969677d1b4f16d683936da2bf973662b0aa9579b1bd146ad229353844492e",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "7b8e47a9c7e08b1ec614e7644f7d95251b6e899038b31d6dfe6ae7d3f588b414",
          "withoutMetadata": "5809a065883af87c82523e3c386327fd9bc5fbb2788956620264131bf49fc4a6",
          "linkedWithoutMetadata": "5809a065883af87c82523e3c386327fd9bc5fbb2788956620264131bf49fc4a6"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateTakeProfitPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)17806_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)17806_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)17738_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)17754_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)17743_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)17773_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isTakenProfit",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)17806_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)17738_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)17743_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)17754_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "takeProfitPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)17773_storage",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "5b7ffa272ea0e7076488a913b09d6f5a7a6ab67aae421974abd66ee914751c42",
          "withoutMetadata": "4bbac62945f0c27b41a1b123b53781ab306a3d4c1b78c86735385554ee3f2e21",
          "linkedWithoutMetadata": "4bbac62945f0c27b41a1b123b53781ab306a3d4c1b78c86735385554ee3f2e21"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "44ea83f631893dcb2db94576131a34536cfeb68180bd86f5253791d66cd36724",
          "withoutMetadata": "adf2932d05c6211f5f175c3a836047ace5dc27f825b37828f0d92e664d567eab",
          "linkedWithoutMetadata": "adf2932d05c6211f5f175c3a836047ace5dc27f825b37828f0d92e664d567eab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "6a7ccbf326a31b219118b2c2b854634a8072a654bf38ed9457044b5e18fffc68",
          "withoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf",
          "linkedWithoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)18404_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)18404_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)18404_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)18404_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateTakeProfitPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateTakeProfitPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateTakeProfitPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateTakeProfitPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "ccb007d0ec4a26e42473cd26bddace1e802a41f210864dcde066ac0817024c21",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "c7ec87f56dfb46cc33028745d625ae3dd537805e9b610e752823c1e822e43dbc",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "c2913bff6b9199f6ca5d0b5aafc3876fe4eb8070d79727b158f21de2c57d607b",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "bc588df407f2da16fa79ed85dc06fdb68f19560293acf131f388cd21b95e909f",
          "withoutMetadata": "8b23911e2eadaba9006eaec791112086065e3264178ecdcd4cf13cf3c9edac2d",
          "linkedWithoutMetadata": "8b23911e2eadaba9006eaec791112086065e3264178ecdcd4cf13cf3c9edac2d"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3092_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3092_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3028_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3044_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3033_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3061_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3092_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3028_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3033_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3044_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3061_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:IUniswapV2Factory": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV2DEXIntegration.sol:UniswapV2DEXIntegration": {
        "src": "contracts/integrations/UniswapV2DEXIntegration.sol:13",
        "version": {
          "withMetadata": "e136e7f59c47441649b199ddffe0c6a74c40d0eb055f2500f71976e76146836f",
          "withoutMetadata": "98bd3fdaba35ea69f35e653100b48fb484e389ae9bbd09d40eeb910d3102f144",
          "linkedWithoutMetadata": "98bd3fdaba35ea69f35e653100b48fb484e389ae9bbd09d40eeb910d3102f144"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2DEXIntegration",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:IUniswapV2Factory": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV2DEXIntegration.sol:UniswapV2DEXIntegration": {
        "src": "contracts/integrations/UniswapV2DEXIntegration.sol:14",
        "version": {
          "withMetadata": "31a5866e06a3551b7cfc5fc3b036604babbb07ed9ac2582464a7c9e820859f77",
          "withoutMetadata": "98bd3fdaba35ea69f35e653100b48fb484e389ae9bbd09d40eeb910d3102f144",
          "linkedWithoutMetadata": "98bd3fdaba35ea69f35e653100b48fb484e389ae9bbd09d40eeb910d3102f144"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2DEXIntegration",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:IUniswapV2Factory": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV2DEXIntegration.sol:UniswapV2DEXIntegration": {
        "src": "contracts/integrations/UniswapV2DEXIntegration.sol:14",
        "version": {
          "withMetadata": "b0a66acb5b1074b25afbeb28455e1ca53530b01f7d596714fb9b06e95cbc1d91",
          "withoutMetadata": "c6f2db6198090d2a8178135404399949eb9a0d6ead8bc2d5f0e380a654523238",
          "linkedWithoutMetadata": "c6f2db6198090d2a8178135404399949eb9a0d6ead8bc2d5f0e380a654523238"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2DEXIntegration",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:IUniswapV2Factory": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV2DEXIntegration.sol:UniswapV2DEXIntegration": {
        "src": "contracts/integrations/UniswapV2DEXIntegration.sol:14",
        "version": {
          "withMetadata": "159da621f0e7e389d1c258dd899e0de9b54b52b52921c2b4f460f8f5830a56ef",
          "withoutMetadata": "76f001f2826cae7ef94eeef1828b4d220426216b9fb98e853204e83e2e02df2e",
          "linkedWithoutMetadata": "76f001f2826cae7ef94eeef1828b4d220426216b9fb98e853204e83e2e02df2e"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2DEXIntegration",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:IUniswapV2Factory": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV2DEXIntegration.sol:UniswapV2DEXIntegration": {
        "src": "contracts/integrations/UniswapV2DEXIntegration.sol:14",
        "version": {
          "withMetadata": "863b7659ac3a364f69499adf20902dc58b5c3d131ba0c36491ad13541d174ee7",
          "withoutMetadata": "85471024740fec9fb1b3d61b5f5e60c3eff2cfa761c0541bba514909471c57e7",
          "linkedWithoutMetadata": "85471024740fec9fb1b3d61b5f5e60c3eff2cfa761c0541bba514909471c57e7"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2DEXIntegration",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:IUniswapV2Factory": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:IUniswapV2Router02": {
        "src": "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol:5",
        "inherit": [
          "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol:IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV2DEXIntegration.sol:UniswapV2DEXIntegration": {
        "src": "contracts/integrations/UniswapV2DEXIntegration.sol:13",
        "version": {
          "withMetadata": "0d11f99b9f971511170dfcbed78554b640b3f62f7fc71ef41fb71ce8067e172e",
          "withoutMetadata": "709419ae7bac36b59e94ac082a9b74d293ca44f738282bc618c18a515f0849a6",
          "linkedWithoutMetadata": "709419ae7bac36b59e94ac082a9b74d293ca44f738282bc618c18a515f0849a6"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2DEXIntegration",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/UniswapV2DEXIntegration.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV2PriceFeedIntegration.sol:UniswapV2PriceFeedIntegration": {
        "src": "contracts/integrations/UniswapV2PriceFeedIntegration.sol:10",
        "version": {
          "withMetadata": "ef96744162fe8346aaf5e3194d68c7f038fbd3a7c5c2a0003a72ed398a90944c",
          "withoutMetadata": "9b26d810df2cae17418fd606b39352823e9eabbba5fc57fd729c930fd4936729",
          "linkedWithoutMetadata": "9b26d810df2cae17418fd606b39352823e9eabbba5fc57fd729c930fd4936729"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2PriceFeedIntegration",
            "src": "contracts/integrations/UniswapV2PriceFeedIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV2PriceFeedIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "749609747480bbef9e6b92641d68faffee514acb16aea8e0ec669d303c27bd54",
          "withoutMetadata": "2e820dc22cab920bbc87eba3274e549f48d84c4b88d6dbc0f1d4f29971ff9c20",
          "linkedWithoutMetadata": "2e820dc22cab920bbc87eba3274e549f48d84c4b88d6dbc0f1d4f29971ff9c20"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3062_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3062_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2998_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3014_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3003_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3031_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3062_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2998_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3003_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3014_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3031_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "04c7fac274f9e9e89fd0bcf64125e5cb8d2b18b71ac7be3ef593a1efabe89592",
          "withoutMetadata": "2e820dc22cab920bbc87eba3274e549f48d84c4b88d6dbc0f1d4f29971ff9c20",
          "linkedWithoutMetadata": "2e820dc22cab920bbc87eba3274e549f48d84c4b88d6dbc0f1d4f29971ff9c20"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3063_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3063_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2999_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3015_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3004_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3032_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3063_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2999_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3004_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3015_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3032_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "8496d0a80f6554511866d03f863c8e353b5b14055c97af68ccd605aee591c2b9",
          "withoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8",
          "linkedWithoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3372_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3372_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3308_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3324_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3313_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3341_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3372_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3308_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3313_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3324_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3341_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:11",
        "version": {
          "withMetadata": "4f796e4c9a97d432e778d033a3024461f63202d19a967ce8d68302287b5e2f25",
          "withoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0",
          "linkedWithoutMetadata": "82bd061864993d369aad8c4c70fd5707a762e89d42333402f2d3822b347741d0"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "mintCallback(address,uint256,bytes)",
          "closeCallback(address,address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)",
          "close(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Callee",
            "src": "contracts/test/Callee.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/test/Callee.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "5422482c0bd9f6fbfe2e9d1ce9dd527460abcac2ae7589d79612e9333921c3d6",
          "withoutMetadata": "7c8fd287f3d61a5532fccfe4dc758b078f3d04824c355ed9efd13e0d14fd695a",
          "linkedWithoutMetadata": "7c8fd287f3d61a5532fccfe4dc758b078f3d04824c355ed9efd13e0d14fd695a"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3070_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3070_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3006_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3022_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3011_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3039_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3070_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3006_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3011_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3022_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3039_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "caa2a75f4626955e6aa9d325d3cb4f30e2619163fa56cf2fcbf4ddb67b4d454c",
          "withoutMetadata": "a390c67f01664d1cbe7f2d1ec04e08ef5651cc53d76fe244b1d31b9ac43bc3cc",
          "linkedWithoutMetadata": "a390c67f01664d1cbe7f2d1ec04e08ef5651cc53d76fe244b1d31b9ac43bc3cc"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "hardhat/console.sol:console",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3100_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3100_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3036_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3052_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3041_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3069_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3100_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3036_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3041_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3052_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3069_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "9427c81ba86d32ab0d65b01c81341e1aaf76da2b74c24ffa143c432d98129738",
          "withoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8",
          "linkedWithoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3057_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3057_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2993_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3009_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2998_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3026_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3057_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2993_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2998_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3009_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3026_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:12",
        "version": {
          "withMetadata": "0b1b6d65e5b8abf0c73eabadb2e6aa5bff7b7639cac570226ad4ad3a9dc4c9c2",
          "withoutMetadata": "b6208d08695ae1aaaa7ddb7ab99f78220f04d6b62d7b22ce333e8b35e3eff16a",
          "linkedWithoutMetadata": "b6208d08695ae1aaaa7ddb7ab99f78220f04d6b62d7b22ce333e8b35e3eff16a"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "hardhat/console.sol:console"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)3080_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3080_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3016_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)3032_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)3021_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3049_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3080_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3016_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3021_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3032_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3049_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "c0000bbe88ef3dc1d9e974419bac60c7f2eabf7e255e2a1a058bc401e472cb8b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/test/Time.sol:Time": {
        "src": "contracts/test/Time.sol:4",
        "version": {
          "withMetadata": "d71a8a6be76913776ab1c8849df109fa04bde494c96e1dc14ba37fa7d1b44a09",
          "withoutMetadata": "6cd897cbcd3ae411922cd054cdb934f51756c4d6c5c7d937d756049fb5f9862d",
          "linkedWithoutMetadata": "6cd897cbcd3ae411922cd054cdb934f51756c4d6c5c7d937d756049fb5f9862d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "timestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:8",
        "version": {
          "withMetadata": "6e4a7b533d3d7dc8b0b1a6e19ee9decde8e288f290586a626c20429067f6e9e6",
          "withoutMetadata": "bb39a70ade4931b616cfc82d48d58c162f7970640706dc56629967a8f905c4dd",
          "linkedWithoutMetadata": "bb39a70ade4931b616cfc82d48d58c162f7970640706dc56629967a8f905c4dd"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:8",
        "version": {
          "withMetadata": "f051532b3a1d89dedcbb92f92c865828f403d40b31a11d660ac21ccebef43312",
          "withoutMetadata": "2adeabb043c6da7c9dd784af8b9cb33b7f54f29d3f4c966efdebc418531cd6c6",
          "linkedWithoutMetadata": "2adeabb043c6da7c9dd784af8b9cb33b7f54f29d3f4c966efdebc418531cd6c6"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/FailedCallee.sol:FailedCallee": {
        "src": "contracts/test/FailedCallee.sol:8",
        "version": {
          "withMetadata": "575997937b5e618d51a36ccae65df6b6e524be04b7adb2942373e018e08fc889",
          "withoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069",
          "linkedWithoutMetadata": "acbcc5bd9a1408f9d97f5346671fbf1a51d75432614bd25aff4fd9b2d3ab9069"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "cd293b2b15f9fbcb82da35a17af8dabfe8339fabe3c5117abb9025b58cd3dfdf",
          "withoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9",
          "linkedWithoutMetadata": "7017163a56765d2389083ace9c0a659b15d2921ae550cb79e0b914c546140bf9"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "9427c81ba86d32ab0d65b01c81341e1aaf76da2b74c24ffa143c432d98129738",
          "withoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8",
          "linkedWithoutMetadata": "c726d51ac20719958be320920cbfe5f12bcc4e046fd64e552171440aecb4b8b8"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)10823_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)10823_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10759_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10775_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10764_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10792_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10823_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10759_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10764_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10775_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10792_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "bf14a92e837e8501feb189e9aeb89b1130398db138ef8a59a55c9629f6dda7ad",
          "withoutMetadata": "d33060710ffbefbaefc3f88350980791452d985579c822f87322ccfd06c925d3",
          "linkedWithoutMetadata": "d33060710ffbefbaefc3f88350980791452d985579c822f87322ccfd06c925d3"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "6752e1dadceda7c65a115c220bad5aeb2b30cfd3cd0264f16cedcc886ffdfdd6",
          "withoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf",
          "linkedWithoutMetadata": "34092330b06ea9bf562002db22f34f2d86e40b1fa69f878787fcfad30d6d0ecf"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11389_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "6a6eec0149984eb16fd137c5ba5a601e1f72ecc5ece5a23747ceee690f2e6964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "c02998a12bfee3b880beaea0db284cc35b69a20de104b46b8aa365ce07267c9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "6c6a3125043137214ba9fce2fbc49163378d28fdd84e53dba5c0af27a794e0bf",
          "withoutMetadata": "fb64c411507baf5de0272abb49e667a97d69a0a6f3a4196ad6a4f35c64123a92",
          "linkedWithoutMetadata": "fb64c411507baf5de0272abb49e667a97d69a0a6f3a4196ad6a4f35c64123a92"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3730_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3730_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3730_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "c752fcf0be560ce17b196404281bbe7b12902120a3eb850c244044ac61b42f38",
          "withoutMetadata": "e7c7951e879a5f893f29c629315346340b932694c0aaffdb168405b00a0e2cab",
          "linkedWithoutMetadata": "e7c7951e879a5f893f29c629315346340b932694c0aaffdb168405b00a0e2cab"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/Callee.sol:Callee": {
        "src": "contracts/test/Callee.sol:8",
        "version": {
          "withMetadata": "6e4a7b533d3d7dc8b0b1a6e19ee9decde8e288f290586a626c20429067f6e9e6",
          "withoutMetadata": "bb39a70ade4931b616cfc82d48d58c162f7970640706dc56629967a8f905c4dd",
          "linkedWithoutMetadata": "bb39a70ade4931b616cfc82d48d58c162f7970640706dc56629967a8f905c4dd"
        },
        "inherit": [
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)",
          "mint(address,address,uint256,bytes)",
          "collect(address,address,uint256)",
          "addBurnRequest(address,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "0fc3d26be4a2d1fd08209e2fe72747b957749a66f125ab3a7d25d90522dba2bc",
          "withoutMetadata": "1b43a8dea8f2b6952238ac5cc77450665cf024dd47053f8929b44e31727cea45",
          "linkedWithoutMetadata": "1b43a8dea8f2b6952238ac5cc77450665cf024dd47053f8929b44e31727cea45"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "3d8360257db33b10567a7976913f8af56bec10cd407d67f452daca707a903208",
          "withoutMetadata": "b7c7f7ec1ea65a5f5db6d7483d2e08957d90b1c0db96b2b7a73f8ddc288c5c48",
          "linkedWithoutMetadata": "b7c7f7ec1ea65a5f5db6d7483d2e08957d90b1c0db96b2b7a73f8ddc288c5c48"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)10823_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)10823_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10759_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10775_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10764_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10792_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10823_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10759_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10764_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10775_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10792_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "0407ca631c4486f6be5916055aecc94d343b0641d873da3aa0ca0d25840182b2",
          "withoutMetadata": "ce454d4feebe193293b117677ae45b20ea8cdbf045f1e498aaa31dacf072990c",
          "linkedWithoutMetadata": "ce454d4feebe193293b117677ae45b20ea8cdbf045f1e498aaa31dacf072990c"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "f6fc67f69990ee5ae08e06f73311daa38975d459d6981129ea4a22ad7816bd8b",
          "withoutMetadata": "7a122c55326eef9c180a063387a7a3497f1f7e7e9ced31837508d9c836abbb17",
          "linkedWithoutMetadata": "7a122c55326eef9c180a063387a7a3497f1f7e7e9ced31837508d9c836abbb17"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11389_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "5554cc5e38514c6c0967f07b706ade62dff3944cb294db05359bb0235fdd9f22",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "fa3f27456211afc123f39c0393f116361b6ed7dbe28d5ee4fdecd570d31bc48d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "5bc27b422ca4eb10123cca78a51907153f6f3d3028965bd324ff964c94449822",
          "withoutMetadata": "d42bf93836eb47af6ee79f878974860a5452d0e7b0a5b916ce753c26abfde1f5",
          "linkedWithoutMetadata": "d42bf93836eb47af6ee79f878974860a5452d0e7b0a5b916ce753c26abfde1f5"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3745_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3745_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3745_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "63ad6a077e1b5dd54ee6103049edf187a45ab58e3ffbcc96c7dd5ded6874fd23",
          "withoutMetadata": "6cbe42b619890985464ed3956ce3ba3c2abac173581bf270001f2332e61fd227",
          "linkedWithoutMetadata": "6cbe42b619890985464ed3956ce3ba3c2abac173581bf270001f2332e61fd227"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "9934233a10b869d6de61fa675a07e342d67f69078c09b6e47eb0e6faefbc8c65",
          "withoutMetadata": "22c3a0981a6c24358b20713d2e76a6c6f352656061cafea912e9e9d1c471d0db",
          "linkedWithoutMetadata": "22c3a0981a6c24358b20713d2e76a6c6f352656061cafea912e9e9d1c471d0db"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3735_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3735_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3735_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "c583f8ebbbc48a3bae3328ebe93976e1e46b479f7ed8a4b1df4c8d44cca6a855",
          "withoutMetadata": "508d8ea43c380b9c8b50fa5ce6bb59d1b3528146b5af48e6ef1a0a806630a5a7",
          "linkedWithoutMetadata": "508d8ea43c380b9c8b50fa5ce6bb59d1b3528146b5af48e6ef1a0a806630a5a7"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "b3837324168d3583c7c7b6eba35ffaeeb0e0c680d2041d22c4584909702eac83",
          "withoutMetadata": "89c25d07a38294c2f14e86edf77847dd30a54b836c03a8ed93d75b6dcafb6179",
          "linkedWithoutMetadata": "89c25d07a38294c2f14e86edf77847dd30a54b836c03a8ed93d75b6dcafb6179"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "c34a148459a1b8350114e12e34a6653d1190abe064dd0792a4a03e696deed92b",
          "withoutMetadata": "75da5f862d9d9c4ebaf212449995d576154d03c3227e039c12ff75e163ab6822",
          "linkedWithoutMetadata": "75da5f862d9d9c4ebaf212449995d576154d03c3227e039c12ff75e163ab6822"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)10823_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)10823_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10759_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10775_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10764_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10792_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10823_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10759_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10764_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10775_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10792_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "5e3a334794a75b9848f7fd8890937a19cd05b1dbda9d1e1436ed99ae5c5dcc23",
          "withoutMetadata": "1a98b96e7a25581931531a436de8e2f479d9dd4ce22b4beb8e10e4102f113924",
          "linkedWithoutMetadata": "1a98b96e7a25581931531a436de8e2f479d9dd4ce22b4beb8e10e4102f113924"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "c9efcc7cf212c50af0ecc674b9dd3070fecc6a4e4a4c955d0c1ab460e1c6764e",
          "withoutMetadata": "7655e3260e678ccc3899de978268adbe7c2284fffbaeba553033d08c29a2a7ac",
          "linkedWithoutMetadata": "7655e3260e678ccc3899de978268adbe7c2284fffbaeba553033d08c29a2a7ac"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11389_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "c48ae52f5231b8d067e16de29b588efdd38728b6912928f3d4fc56f309c759f1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "aea99d1126968983b35c9818f2d233d6fed661c6c5956f3afdc2e712d089709b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "7501a77a2a23109d89efb43ba57869ef6125e615b91b41217d8a731738013309",
          "withoutMetadata": "fb64c411507baf5de0272abb49e667a97d69a0a6f3a4196ad6a4f35c64123a92",
          "linkedWithoutMetadata": "fb64c411507baf5de0272abb49e667a97d69a0a6f3a4196ad6a4f35c64123a92"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3730_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3730_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3730_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "ef5c55d869d2fb9fd9492cc3be0aefb54f3a1e229c68c9ddfd51d6588efd19f2",
          "withoutMetadata": "bd5351c590ba26b499992b161a0e8f0e7d05e8276275ce56427f5135d68858f9",
          "linkedWithoutMetadata": "bd5351c590ba26b499992b161a0e8f0e7d05e8276275ce56427f5135d68858f9"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "1e79f24b518a23f933542e1cfc1d796a9ac80180c8514afbfb340a77fb0fbc1f",
          "withoutMetadata": "c084111b1a731525d1557ae3e13576a4b9bf98e32f3c15e5d5a1b15b5479ef24",
          "linkedWithoutMetadata": "c084111b1a731525d1557ae3e13576a4b9bf98e32f3c15e5d5a1b15b5479ef24"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3278_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3278_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3278_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "0e330777ed9c265392b7db126288b819d0c1811037a1f36259263fd55e661ee6",
          "withoutMetadata": "1bbb14285f0f4b152727ca8732db65692fc494dace3f053ce0a3802347528348",
          "linkedWithoutMetadata": "1bbb14285f0f4b152727ca8732db65692fc494dace3f053ce0a3802347528348"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)10823_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)10823_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)10759_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)10775_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)10764_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)10792_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)10823_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)10759_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)10764_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)10775_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)10792_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "2f430a5602a30f6bcf19f4c8b9aabb7e507115dc06ba051fd3c370205c643d9c",
          "withoutMetadata": "10c4e0d7640392d62d6544308da81821bef61fbefe0c7d5e55531b3bcaaa66aa",
          "linkedWithoutMetadata": "10c4e0d7640392d62d6544308da81821bef61fbefe0c7d5e55531b3bcaaa66aa"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "fefac6840fc91efd7505247a00a59ac0673b3b510f161fee123df9784f45e26e",
          "withoutMetadata": "fe764d44597f9505ed2b2270310404dd5571a88af46b6c2eb3e4d32a0cefc516",
          "linkedWithoutMetadata": "fe764d44597f9505ed2b2270310404dd5571a88af46b6c2eb3e4d32a0cefc516"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)11389_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)11389_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "d6295668537afc0a7cb923c19e1760f9b159628d9ededb693c001cc852d8b769",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "290dce3493e72c21763692b96c34bf18c215676e89d73e10cc69361f2e74a999",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "b5f40a700deb6ba895f478369383a8ff71ba1fe893f5f345b56d447bc755a636",
          "withoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d",
          "linkedWithoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/DEXAggregator.sol:DEXAggregator": {
        "src": "contracts/DEXAggregator.sol:10",
        "version": {
          "withMetadata": "652b61467d1c998e3b1aaaa7f83518d2b7fc5d9a6e372f2d63755cb58408dcff",
          "withoutMetadata": "c848892088092598fada4d1da902c15b4f32c7b11f019e1cde9123cfce5d97a4",
          "linkedWithoutMetadata": "c848892088092598fada4d1da902c15b4f32c7b11f019e1cde9123cfce5d97a4"
        },
        "inherit": [
          "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "dexLength()",
          "setManager(address)",
          "addDEX(address,string)",
          "removeDEX(address)",
          "validatePair(address,address,address)",
          "getAmountOut(address,address,address,uint256)",
          "getAmountIn(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)",
          "rescueFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DEXAggregator",
            "src": "contracts/DEXAggregator.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:11"
            },
            {
              "label": "dexes",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:12"
            },
            {
              "label": "dexNames",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:13"
            },
            {
              "label": "dexIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "72cfcbeaaccb1482fd556bc9e02d4461d8df1280d4693d2230db37f567cbd6ee",
          "withoutMetadata": "dc459938d34a78b6e9bb259a50050535f81f2903bad85e28f495269742a2c1c0",
          "linkedWithoutMetadata": "dc459938d34a78b6e9bb259a50050535f81f2903bad85e28f495269742a2c1c0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolMaxOpenInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/LiquidationMarker.sol:LiquidationMarker": {
        "src": "contracts/LiquidationMarker.sol:7",
        "version": {
          "withMetadata": "b2a9dac1ecb5315d14c099739d262b5c8794b3356d4bbd727958a4262de96430",
          "withoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8",
          "linkedWithoutMetadata": "be99b5cd608169991d75a8787959c5bd1a1fdeca27ac39b9d14271717ac8f6d8"
        },
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setPositionStorage(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LiquidationMarker",
            "src": "contracts/LiquidationMarker.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:8"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:9"
            },
            {
              "label": "positionStorageAddress",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:10"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:11"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:12"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "LiquidationMarker",
              "src": "contracts/LiquidationMarker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "3997273e83321690f28dc6a5b766755ebebb49af3336b0e5b57513adc1b8d717",
          "withoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9",
          "linkedWithoutMetadata": "e278a803aa2a8a6d17a85a99a8ea3d759b7930d675030960de6aabcb8d1bc1d9"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "2318fe197b5f99afc26edec0bb2c14434ece50fd80e26c5c235ba5df9b345f9c",
          "withoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c",
          "linkedWithoutMetadata": "8f315b62adce0eb90de3f6cea6338de278e742305ff5b9d9bad58c2bb10ac56c"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)7834_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)7834_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)7834_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "52c874262fe854c6f5596399a091b83a4d1f1c4fa8e3a2b1e7b2da10513b6f42",
          "withoutMetadata": "d2a4d2db0c520170ed9b2f29402f93323a37225b0595dbf0bb98867c110bde51",
          "linkedWithoutMetadata": "d2a4d2db0c520170ed9b2f29402f93323a37225b0595dbf0bb98867c110bde51"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "maxOpenInterest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "openInterest",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)23450_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)23450_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)23450_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "5101f430e514db149db2e4e7fbaf15481f68547e603b75d489ba80bc7ef656c8",
          "withoutMetadata": "b7fb20f2bd827a59501f43fdd899fef795207056919b15c4fd83c75718f4c005",
          "linkedWithoutMetadata": "b7fb20f2bd827a59501f43fdd899fef795207056919b15c4fd83c75718f4c005"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "ff154667a5c83a7a7864c4e727b5bf59d055d2298124e00341bab66816ed4313",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:11",
        "version": {
          "withMetadata": "a81a09a1a914758effecce8f646bbc06aeae3dbb478aa6de7232305f615791cd",
          "withoutMetadata": "cead1a4a52717973a729bf931cba7fbe6c4ec886d44082fa6717fce8b8335584",
          "linkedWithoutMetadata": "cead1a4a52717973a729bf931cba7fbe6c4ec886d44082fa6717fce8b8335584"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(TradePosition)23746_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            },
            {
              "label": "openingPositionIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:17"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:18"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)23746_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)23682_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)23698_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)23687_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)23715_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)23746_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)23682_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)23687_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)23698_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)23715_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "liquidationMarkTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "21"
                }
              ],
              "numberOfBytes": "704"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:8",
        "version": {
          "withMetadata": "f5336d04bd9fc4052af373bf59d10f769e789a77157cb2326855242cff98fffa",
          "withoutMetadata": "b283620c8f3045649c1b429d323c04add024ed4f1bc995ed229fd1d17ad16ae0",
          "linkedWithoutMetadata": "b283620c8f3045649c1b429d323c04add024ed4f1bc995ed229fd1d17ad16ae0"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:15",
        "version": {
          "withMetadata": "d4a017eb151d6eaa0b3a9306ef72a428cff6bc0e44bd5f36c43acda287f98128",
          "withoutMetadata": "745f0a7d51ed740432993843cc919e3ff29f4b986f75531a8b90a7d25c659502",
          "linkedWithoutMetadata": "745f0a7d51ed740432993843cc919e3ff29f4b986f75531a8b90a7d25c659502"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Router.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TokenReader.sol:TokenReader": {
        "src": "contracts/TokenReader.sol:7",
        "version": {
          "withMetadata": "52212c71b527901f7ed2b87d48831b9f07dcd926905c390834a4bb7d20c65844",
          "withoutMetadata": "0be53cc073628c4c85649aa0069c1ae0af9b142c4d826ffea9e4d244edf0a446",
          "linkedWithoutMetadata": "0be53cc073628c4c85649aa0069c1ae0af9b142c4d826ffea9e4d244edf0a446"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenSupplies(address[])",
          "getTokenDecimals(address[])",
          "getTokensBalance(address,address[])",
          "getTokenBalances(address[],address)",
          "getTokensAllowance(address,address[],address)",
          "getTokenAllowances(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "44e133a4ef621ae923a17982fb0a6435e6cd093cdba1f900b62cd8bf7cb2650d",
          "withoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1",
          "linkedWithoutMetadata": "0a1b881dd034d51bd11d96b7f8f4a903f9dde1ed39483c894397deda8eb5bab1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UserStorage.sol:UserStorage": {
        "src": "contracts/UserStorage.sol:6",
        "version": {
          "withMetadata": "7e9a99d08d2e511f6cd13b35769511072808487a08d3134cc4cd3045bd827f91",
          "withoutMetadata": "de4b1f95344e654a4aeea1fe4262d262a1eee9cf95270e3ca16b704d65aa593c",
          "linkedWithoutMetadata": "de4b1f95344e654a4aeea1fe4262d262a1eee9cf95270e3ca16b704d65aa593c"
        },
        "inherit": [
          "contracts/interfaces/IUserStorage.sol:IUserStorage"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setOperators(address[],bool[])",
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserStorage",
            "src": "contracts/UserStorage.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:7"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:8"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(User)24337_storage)",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)24337_storage)": {
              "label": "mapping(address => struct IUserStorage.User)",
              "numberOfBytes": "32"
            },
            "t_struct(User)24337_storage": {
              "label": "struct IUserStorage.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ref",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "membershipLevel",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:12",
        "version": {
          "withMetadata": "277f7da636cfdc25bfba6a3516f4e325313c8ee33ed82d2228987656791a94cc",
          "withoutMetadata": "aff205f46fae874fa1b436f831eb69d45cf49c58f130e404dc68a95ded9eefb3",
          "linkedWithoutMetadata": "aff205f46fae874fa1b436f831eb69d45cf49c58f130e404dc68a95ded9eefb3"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "checker()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "poolDeployer",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)24393_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)24393_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)24393_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)24393_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BancorConverterRegistry.sol:BancorConverterRegistry": {
        "src": "contracts/base/BancorConverterRegistry.sol:19",
        "version": {
          "withMetadata": "1a995fa9a87f1aef582e6f09a348162d62afb54ea7b59e39204ed1365ff93c8d",
          "withoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4",
          "linkedWithoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4"
        },
        "inherit": [
          "contracts/base/Utils.sol:Utils",
          "contracts/base/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "()",
          "tokenCount()",
          "converterCount(address)",
          "converterAddress(address,uint32)",
          "tokenAddress(address)",
          "registerConverter(address,address)",
          "unregisterConverter(address,uint32)",
          "blockStamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:5"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            },
            {
              "label": "tokensRegistered",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:20"
            },
            {
              "label": "tokensToConverters",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:21"
            },
            {
              "label": "convertersToTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:22"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Owned.sol:Owned": {
        "src": "contracts/base/Owned.sol:4",
        "version": {
          "withMetadata": "93af4148f55906b4f83e6c2eeee5574e4a11d315b096e92bbe4ffa75fbf8d016",
          "withoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e",
          "linkedWithoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/base/Owned.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:5"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Utils.sol:Utils": {
        "src": "contracts/base/Utils.sol:5",
        "version": {
          "withMetadata": "1319214db52a256fca678a8aace0fabd358c97435d582ffe66a9800a7cfe378f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/ChainlinkPriceFeedIntegration.sol:ChainlinkPriceFeedIntegration": {
        "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "787d1a5ae2be7e2ce9c3b26395ec0d27e6c5a23131808645a16660d65309d352",
          "withoutMetadata": "a1b4c6a8deb24a2deebaeb9f3a4b0bd3cbcb2d7ea8fe00232e8378e959b5b912",
          "linkedWithoutMetadata": "a1b4c6a8deb24a2deebaeb9f3a4b0bd3cbcb2d7ea8fe00232e8378e959b5b912"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setPriceFeed(address,address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ChainlinkPriceFeedIntegration",
            "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:9"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/integrations/ChainlinkPriceFeedIntegration.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/GMXPriceFeedIntegration.sol:GMXPriceFeedIntegration": {
        "src": "contracts/integrations/GMXPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "5d37c566e86efc9f3bc1d5283eb8aa25861e46ff43b70f6b462da0c79e36d340",
          "withoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1",
          "linkedWithoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GMXPriceFeedIntegration",
            "src": "contracts/integrations/GMXPriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "feed",
            "src": "contracts/integrations/GMXPriceFeedIntegration.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/MuteDEXIntegration.sol:MuteDEXIntegration": {
        "src": "contracts/integrations/MuteDEXIntegration.sol:10",
        "version": {
          "withMetadata": "43948f186b11ab705a7ddb837cbee63de385d775d320104b8b9eed36a51b3c48",
          "withoutMetadata": "8b8e7afbb09d5ac36fb39177c42b74d719d1c16c9e52a91628d71e80624898b2",
          "linkedWithoutMetadata": "8b8e7afbb09d5ac36fb39177c42b74d719d1c16c9e52a91628d71e80624898b2"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MuteDEXIntegration",
            "src": "contracts/integrations/MuteDEXIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/MuteDEXIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/MutePriceFeedIntegration.sol:MutePriceFeedIntegration": {
        "src": "contracts/integrations/MutePriceFeedIntegration.sol:8",
        "version": {
          "withMetadata": "c321b1ee3db476ca412e996c654064176306eb6dcfb8a02c34dd81c4e3d6b48e",
          "withoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1",
          "linkedWithoutMetadata": "b9a486456c362b9d31aea02a322a0c9b23e0dd011bf4b474bc060b70c918a3a1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MutePriceFeedIntegration",
            "src": "contracts/integrations/MutePriceFeedIntegration.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/MutePriceFeedIntegration.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapClassicDEXIntegration.sol:SyncswapClassicDEXIntegration": {
        "src": "contracts/integrations/SyncswapClassicDEXIntegration.sol:12",
        "version": {
          "withMetadata": "3edcda38888bbb81ec69f664b632d703c573f4edf69eeff2aa1017043ec8c653",
          "withoutMetadata": "51886ae8bd3901af09dac5d9833078e293a86d7973365812c20a1811c8c5696d",
          "linkedWithoutMetadata": "51886ae8bd3901af09dac5d9833078e293a86d7973365812c20a1811c8c5696d"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicDEXIntegration",
            "src": "contracts/integrations/SyncswapClassicDEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapClassicDEXIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:SyncswapClassicPriceFeedIntegration": {
        "src": "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "eb517d3258bdc96d63eca9d9680dab3e5ed6a91b4e7f88e3524b85c0fdd7f9a9",
          "withoutMetadata": "af2ddd1d80eadb8479f1cebfcd666127ad12cf304b922704e60faa9c1de7f8a6",
          "linkedWithoutMetadata": "af2ddd1d80eadb8479f1cebfcd666127ad12cf304b922704e60faa9c1de7f8a6"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapClassicPriceFeedIntegration",
            "src": "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapClassicPriceFeedIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapStableDEXIntegration.sol:SyncswapStableDEXIntegration": {
        "src": "contracts/integrations/SyncswapStableDEXIntegration.sol:12",
        "version": {
          "withMetadata": "322b20612379748cc686a3fd0cf2c79c90340cb95ce7c57cdc93c35258c5f507",
          "withoutMetadata": "cf76f864541991b9a56d32de073a932338a7b1675620659353d08d1b1321c742",
          "linkedWithoutMetadata": "cf76f864541991b9a56d32de073a932338a7b1675620659353d08d1b1321c742"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStableDEXIntegration",
            "src": "contracts/integrations/SyncswapStableDEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapStableDEXIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:SyncswapStablePriceFeedIntegration": {
        "src": "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "d8d88decc8aefc6c0958132b50e32fb60f0299a7367ca0283f743aedd040654d",
          "withoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e",
          "linkedWithoutMetadata": "6b2bd646b2a601663326617dff2b08c7bd2ba31998ea51587575038fdef38a0e"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SyncswapStablePriceFeedIntegration",
            "src": "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/SyncswapStablePriceFeedIntegration.sol:11"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV3DEXIntegration.sol:UniswapV3DEXIntegration": {
        "src": "contracts/integrations/UniswapV3DEXIntegration.sol:13",
        "version": {
          "withMetadata": "415913c129b45bdba1b3225fcec18f21b7778b240bbae36ab206243a87de482d",
          "withoutMetadata": "d9f6b03763e4fe238a9ea546d7b3eb47c72954a7ae8c77c5618753048d35f57f",
          "linkedWithoutMetadata": "d9f6b03763e4fe238a9ea546d7b3eb47c72954a7ae8c77c5618753048d35f57f"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3DEXIntegration",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "quoter",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/integrations/UniswapV3DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3DEXIntegration",
              "src": "contracts/integrations/UniswapV3DEXIntegration.sol:17"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/integrations/UniswapV3PriceFeedIntegration.sol:UniswapV3PriceFeedIntegration": {
        "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:9",
        "version": {
          "withMetadata": "d33e85db1a105f16db8dba0f3023cb5d251bd0b90b4537a17d89788937228cc5",
          "withoutMetadata": "dd59876f07e21a9fd702f486b4120e238a28f285c2f84045b6d82a7bc8b49ac4",
          "linkedWithoutMetadata": "dd59876f07e21a9fd702f486b4120e238a28f285c2f84045b6d82a7bc8b49ac4"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3PriceFeedIntegration",
            "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3PriceFeedIntegration",
              "src": "contracts/integrations/UniswapV3PriceFeedIntegration.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IChainlinkPriceFeed.sol:IChainlinkPriceFeed": {
        "src": "contracts/interfaces/IChainlinkPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IGMXPriceFeed.sol:IGMXPriceFeed": {
        "src": "contracts/interfaces/IGMXPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "prices(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMulticall.sol:IMulticall": {
        "src": "contracts/interfaces/IMulticall.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "maxOpenInterest()",
          "openInterest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setMaxOpenInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "canLiquidationMark(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address,uint256))",
          "updateStatus(bytes32,address)",
          "liquidationMark(bytes32)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUniswapV3StaticQuoter.sol:IUniswapV3StaticQuoter": {
        "src": "contracts/interfaces/IUniswapV3StaticQuoter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quoteExactInput(bytes,uint256)",
          "quoteExactInputSingle((address,address,uint256,uint24,uint160))",
          "quoteExactOutput(bytes,uint256)",
          "quoteExactOutputSingle((address,address,uint256,uint24,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IMuteRouter.sol:IMuteRouter": {
        "src": "contracts/interfaces/external/IMuteRouter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "pairFor(address,address,bool)",
          "getAmountOut(uint256,address,address)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256,bool[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapFactory.sol:ISyncswapFactory": {
        "src": "contracts/interfaces/external/ISyncswapFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPool(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapPool.sol:ISyncswapPool": {
        "src": "contracts/interfaces/external/ISyncswapPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vault()",
          "token0()",
          "token1()",
          "getReserves()",
          "getSwapFee(address,address,address,bytes)",
          "getAmountOut(address,uint256,address)",
          "getAmountIn(address,uint256,address)",
          "swap(bytes,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/ISyncswapVault.sol:ISyncswapVault": {
        "src": "contracts/interfaces/external/ISyncswapVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "wETH()",
          "reserves(address)",
          "balanceOf(address,address)",
          "deposit(address,address)",
          "depositETH(address)",
          "transferAndDeposit(address,address,uint256)",
          "transfer(address,address,uint256)",
          "withdraw(address,address,uint256)",
          "withdrawAlternative(address,address,uint256,uint8)",
          "withdrawETH(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "d73566732cb3edec294e75a8f5cf348c0db50ccdace9e25853d6d47b32dc6e15",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/Math.sol:Math": {
        "src": "contracts/libraries/Math.sol:6",
        "version": {
          "withMetadata": "b9190c0d994b90df3e266d2e1d1ad480292ffab0d4d6fc0f60b1bcfa86583cf0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "fbe1a3a2be2df36ab65aec95c871a67b77cb08d5c2f0f5cf994afab3fbc086de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/MockERC20.sol:MockERC20": {
        "src": "contracts/test/MockERC20.sol:7",
        "version": {
          "withMetadata": "e22f060894d72e4a40ffb029232fd094a5d0b8f49ea2ca30b43adfcd74ffc833",
          "withoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035",
          "linkedWithoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/test/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/test/USDT.sol:Context": {
        "src": "contracts/test/USDT.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:ERC20": {
        "src": "contracts/test/USDT.sol:376",
        "version": {
          "withMetadata": "d6ab05a65c86d041baf1a28ef001020816abdbcf012046909f52cfb8a255bd2b",
          "withoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac",
          "linkedWithoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac"
        },
        "inherit": [
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [
          "contracts/test/USDT.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/USDT.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:IERC20": {
        "src": "contracts/test/USDT.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:LowGasSafeMath": {
        "src": "contracts/test/USDT.sol:127",
        "version": {
          "withMetadata": "20cc5c3d87189c1fa49d3a6113d18cc0ae824a1a5c30083375f9747386ddb5f3",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:Ownable": {
        "src": "contracts/test/USDT.sol:720",
        "inherit": [
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/USDT.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/USDT.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:USDT": {
        "src": "contracts/test/USDT.sol:778",
        "version": {
          "withMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "withoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "linkedWithoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559"
        },
        "inherit": [
          "contracts/test/USDT.sol:ERC20",
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "USDT",
            "src": "contracts/test/USDT.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/USDT.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct USDT.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct USDT.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct USDT.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WBTC.sol:Context": {
        "src": "contracts/test/WBTC.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:ERC20": {
        "src": "contracts/test/WBTC.sol:376",
        "version": {
          "withMetadata": "30f38635d5b2575c3374f2bdc3e0a1f38e76ee4b7ace3587e6d8a07bd389303c",
          "withoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176",
          "linkedWithoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176"
        },
        "inherit": [
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [
          "contracts/test/WBTC.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/WBTC.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:IERC20": {
        "src": "contracts/test/WBTC.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:LowGasSafeMath": {
        "src": "contracts/test/WBTC.sol:127",
        "version": {
          "withMetadata": "2c52ed7f3a33755dbc18e17c0d34a97909802ae73ec7312c33f5dcda63c8122c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:Ownable": {
        "src": "contracts/test/WBTC.sol:720",
        "inherit": [
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/WBTC.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/WBTC.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:WBTC": {
        "src": "contracts/test/WBTC.sol:778",
        "version": {
          "withMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "withoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "linkedWithoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171"
        },
        "inherit": [
          "contracts/test/WBTC.sol:ERC20",
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WBTC",
            "src": "contracts/test/WBTC.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/WBTC.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct WBTC.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct WBTC.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct WBTC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WETH.sol:WETH": {
        "src": "contracts/test/WETH.sol:24",
        "version": {
          "withMetadata": "915665bff19f0dfc1b2bdf84382799d66871950cd15494e34b93266beb48432e",
          "withoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3",
          "linkedWithoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/test/WETH.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/test/WETH.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/test/WETH.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:25"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:26"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "2",
              "type": "t_uint8",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:27"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:34"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    }
  ]
}