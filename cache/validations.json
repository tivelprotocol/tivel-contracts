{
  "version": "3.4",
  "log": [
    {
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "c8e009465a14cc1443f19cef13f61d8cb2e656e82c4b26252c65afb290d0071f",
          "withoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1",
          "linkedWithoutMetadata": "d2d0518d2b43bbd6bcc5d4c3a68ca2666de0d435e46acfd8f827ac95c63abcd1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address[],uint256[])",
          "setCollateralMUT(address[],uint256[])",
          "setBaseTokenLT(address[],uint256[])",
          "setCollateralLT(address[],uint256[])",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:74"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "ea0ad4372059ffff99f62563285c2a1b17e9ef6638f1e50d987cd628334759fb",
          "withoutMetadata": "44cd80bd51adb53d99108874ba050b4f0db0f2258d928cbc5b57fef99be1274e",
          "linkedWithoutMetadata": "44cd80bd51adb53d99108874ba050b4f0db0f2258d928cbc5b57fef99be1274e"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3220_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3220_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3220_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "29ec5fd59a4fbf453132280701cc446585d53d24755939a5751b639ada76d32d",
          "withoutMetadata": "c064f83e6f32654fba1ed74835fbf5fd05cefbf1c13a0ff353d852237a88d9a3",
          "linkedWithoutMetadata": "c064f83e6f32654fba1ed74835fbf5fd05cefbf1c13a0ff353d852237a88d9a3"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "bd2e6f1bae43e23c9b7c7a199fecdf8f3492dd823778428a0a1ae85c479dacbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "11a225ecb7761a8984f08dc7e9a5b18ea52e78636d6846f73d9d23c3bedfb561",
          "withoutMetadata": "83ed49c51672e387eed325731bdcac3debbd0438d72cd3380a8b53a3ba26af70",
          "linkedWithoutMetadata": "83ed49c51672e387eed325731bdcac3debbd0438d72cd3380a8b53a3ba26af70"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address,uint256)",
          "setCollateralMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:73"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "97bc813a41c903adce8f217d8850def7cbd25336bb20d6b9448be468eef5e55e",
          "withoutMetadata": "ad5baf3c50c60e7046a1c9bbea9acb151509b64ee81f21289402e32128a3e778",
          "linkedWithoutMetadata": "ad5baf3c50c60e7046a1c9bbea9acb151509b64ee81f21289402e32128a3e778"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "89a82dfa871362253b28808c006f012844488a1339faed580e0acef6ab584df9",
          "withoutMetadata": "44cd80bd51adb53d99108874ba050b4f0db0f2258d928cbc5b57fef99be1274e",
          "linkedWithoutMetadata": "44cd80bd51adb53d99108874ba050b4f0db0f2258d928cbc5b57fef99be1274e"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4845_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4845_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4845_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "90716d57182e6fe886ef0049ee0e6d122cfb76034265f6dfbf872d8d5cde85ea",
          "withoutMetadata": "d537e217aac6adeea55746520162b784d1ba6f517403e2fdbf9a5f25a6b298cf",
          "linkedWithoutMetadata": "d537e217aac6adeea55746520162b784d1ba6f517403e2fdbf9a5f25a6b298cf"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)15388_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)15388_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)15388_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "8f5343aaae78696bc10b365a21060e577f2633e584f1b25263dde0979cdc5ac8",
          "withoutMetadata": "c6ed6e0ea6b8d49cf880d6f4058a2a374701bcb8bb414aa625fa35b26781fd63",
          "linkedWithoutMetadata": "c6ed6e0ea6b8d49cf880d6f4058a2a374701bcb8bb414aa625fa35b26781fd63"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "8b310ff979ae3068eee54ba5f0b2725ce68533f2cf8c2059e39775f27eba90ad",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "15bdec7fba83fdab3605b1a9aa46cb5f7612eb8224fb8c54472b14f7f4ae3c81",
          "withoutMetadata": "109198576df28a28a6eae29b0d8b53b518d052d97d86847822aac8030da0a3d1",
          "linkedWithoutMetadata": "109198576df28a28a6eae29b0d8b53b518d052d97d86847822aac8030da0a3d1"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)15669_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)15669_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)15607_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)15623_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)15612_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)15640_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)15669_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)15607_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)15612_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)15623_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)15640_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "83b33001e04e6b054bfb0bf35ee099088a74cba514c675a274e1d3a14a5059d8",
          "withoutMetadata": "c064f83e6f32654fba1ed74835fbf5fd05cefbf1c13a0ff353d852237a88d9a3",
          "linkedWithoutMetadata": "c064f83e6f32654fba1ed74835fbf5fd05cefbf1c13a0ff353d852237a88d9a3"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "293d8da9e2eab79f70460e4ec5b2759185dac0e8dceefa15be96560b20b9e648",
          "withoutMetadata": "167be4e0f660145748b07789e9e9bc7a9223bd2cf5a05228f979082a806e00ab",
          "linkedWithoutMetadata": "167be4e0f660145748b07789e9e9bc7a9223bd2cf5a05228f979082a806e00ab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "0713178c3be099c947f196230ed5db908f76b854140d5a756ca838de45f5b1cf",
          "withoutMetadata": "72e1ce643a9c8397725f0787c521cc4ab0d1a2bba64f854f27bf2412f48904ed",
          "linkedWithoutMetadata": "72e1ce643a9c8397725f0787c521cc4ab0d1a2bba64f854f27bf2412f48904ed"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16229_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)16229_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16229_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)16229_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "addBurnRequest(uint256,address,bytes)",
          "burn((uint256,address,address,uint256,address,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes,address))",
          "rollback((bytes32,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))",
          "close((address,bytes32,uint256))",
          "rollback((address,bytes32,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "bd2e6f1bae43e23c9b7c7a199fecdf8f3492dd823778428a0a1ae85c479dacbc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "fa197cc49e318a37c23765b0c73c3a339ae9751d1522dbd37e8fe5fa6b419c38",
          "withoutMetadata": "7aab817fbc193467aa8ce4ca23439f13788520b629f6b9f704a9b75d0bb92f77",
          "linkedWithoutMetadata": "7aab817fbc193467aa8ce4ca23439f13788520b629f6b9f704a9b75d0bb92f77"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3657_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3657_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3657_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "c2c9256d169ab70dd41c568a8050a5e059e85af038d69cb0aa1bf8a213300b1d",
          "withoutMetadata": "e5f494a5a16ad0d4d533e3c256d376fdb72f2db498b474d0f831bb367b46006e",
          "linkedWithoutMetadata": "e5f494a5a16ad0d4d533e3c256d376fdb72f2db498b474d0f831bb367b46006e"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "24d2a137fe9816b209cdec93b7e1cf57633d8b618c470c256bbf0183d748a454",
          "withoutMetadata": "83ed49c51672e387eed325731bdcac3debbd0438d72cd3380a8b53a3ba26af70",
          "linkedWithoutMetadata": "83ed49c51672e387eed325731bdcac3debbd0438d72cd3380a8b53a3ba26af70"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateCollateralAmountFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address,uint256)",
          "setCollateralMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:73"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateCollateralAmountFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "16",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "23",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "e0e9e6452c550b9af71eb9a126cec2499d907c0d25621b46821fa1a6301c725e",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "dc7ecd4aa271606ebec9d140cc48c1991cd36cffb71ac8d458d38f1dd6c9fbca",
          "withoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb",
          "linkedWithoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4846_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4846_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4846_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "b0d8c263e97cc829c827190a03bece5b73cfa5e0d431780bbffd9d5bd4606ff0",
          "withoutMetadata": "868d8d1a9affc31659a875be7a56b680e2e298f44a87b361b09b4b395da8b183",
          "linkedWithoutMetadata": "868d8d1a9affc31659a875be7a56b680e2e298f44a87b361b09b4b395da8b183"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)15778_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)15778_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)15778_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "bb18dd098463992c845d598e460e3ab6a091a6d266316f2fd4f3c3237ddb6c12",
          "withoutMetadata": "dfebf6a3b2370e19e5613681f5ce79ca23b063367fe82a0bd809ae64c23595c7",
          "linkedWithoutMetadata": "dfebf6a3b2370e19e5613681f5ce79ca23b063367fe82a0bd809ae64c23595c7"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "e500ee5bd8461af92cc16be73c93f2464dd7a6142b9e302c1edc43513bb52416",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "f07276fcf76927d16e2beebe18d1727ec6096a6145fcb7abab5c1585bd116597",
          "withoutMetadata": "ecc321aef34d184a896f97e41ac0bf7f2c9154b9a9febf657a951c6760ab28dc",
          "linkedWithoutMetadata": "ecc321aef34d184a896f97e41ac0bf7f2c9154b9a9febf657a951c6760ab28dc"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)16068_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)16068_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)16006_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)16022_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)16011_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)16039_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)16068_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)16006_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)16011_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)16022_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)16039_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "8536109a437ac199fd66f078f0c106f0dafd45a7539712367a123fa35ce78ee5",
          "withoutMetadata": "9266868eb90a5a5111fe6661611c25c4d9a50dd45599b5ad28d81953cd6aad4f",
          "linkedWithoutMetadata": "9266868eb90a5a5111fe6661611c25c4d9a50dd45599b5ad28d81953cd6aad4f"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "21410e4686f909a454ff1739fed7c9245e9fd589fdd089b8589ef11d974ecd73",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "96b1ae82d718415fcdc3b7d797fe267c3332272fd9bd61109758431a6580d25f",
          "withoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360",
          "linkedWithoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16642_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)16642_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16642_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)16642_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateCollateralAmountFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateCollateralAmount((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "20c0baa52f498550e563cfd90b49335e2b1f2d6f39c66f5f9dc50ab1de53834f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "1bd10f926a67328c6a4d0df681ff0e5e076a99a821d8447aa00160394eff8421",
          "withoutMetadata": "ecc321aef34d184a896f97e41ac0bf7f2c9154b9a9febf657a951c6760ab28dc",
          "linkedWithoutMetadata": "ecc321aef34d184a896f97e41ac0bf7f2c9154b9a9febf657a951c6760ab28dc"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2867_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2867_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2805_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2821_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2810_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2838_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2867_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2805_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2810_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2821_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2838_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "253be2ed341e35cbd1d771220d1811d7c736b334530400ecb16420722cb57508",
          "withoutMetadata": "782ab676ff2067cf2d5767f8bcc0cf813eb9a317aa6261a7684f5eaee9dfeb0e",
          "linkedWithoutMetadata": "782ab676ff2067cf2d5767f8bcc0cf813eb9a317aa6261a7684f5eaee9dfeb0e"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address,uint256)",
          "setCollateralMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "09ae3d7bfb690b7723e32c8c6dca75792a23ad45f8220188646755e1ed1684bd",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "b27a563e4e023081e0748c36b25aa3590e109254a6a21af52eee5006bcfd0943",
          "withoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb",
          "linkedWithoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4823_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4823_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4823_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "d35a293b313db4a53e01ac0edff470451671769d29405316a52c148a884a419f",
          "withoutMetadata": "481aa4e755d53e5d106cc30894ed4cfbe6a202342c2e91d65b70a3409a2ad7aa",
          "linkedWithoutMetadata": "481aa4e755d53e5d106cc30894ed4cfbe6a202342c2e91d65b70a3409a2ad7aa"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)15297_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)15297_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)15297_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "88d1d06f57495d95ed3b91ee934da39f270680eaabc03b79bdf541ef351a6480",
          "withoutMetadata": "811410c09a08d3098a5dc63095ef6c4529424aaff68e9280157be9b3150d30d3",
          "linkedWithoutMetadata": "811410c09a08d3098a5dc63095ef6c4529424aaff68e9280157be9b3150d30d3"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "2a9501a187c4d5e19e3d2b3dc7a3ce69936a4c8395ab5d50af8fc045667870b2",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "21515a12c403db40fd2e976a1383fe790850e05cfb59aff264d1710016183af3",
          "withoutMetadata": "1322295508ca3c6b0609480d43d9d1b32357d909e7c319e6068b0becb7e96ae7",
          "linkedWithoutMetadata": "1322295508ca3c6b0609480d43d9d1b32357d909e7c319e6068b0becb7e96ae7"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)15577_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)15577_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)15515_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)15531_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)15520_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)15548_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)15577_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)15515_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)15520_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)15531_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)15548_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "f5e65702a160a15dd2c0ffc22bf53be558714578cce785df12df5605f8398cb3",
          "withoutMetadata": "61c319065a47ccaf513b5d5dda4829fbd0df05df394726238c4ebb112366a664",
          "linkedWithoutMetadata": "61c319065a47ccaf513b5d5dda4829fbd0df05df394726238c4ebb112366a664"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "413c95a4b40b15cdba7f5808f7f88e184ac0ffb1a55e0198c603a5454f0ae9e9",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "f0590537e6752d0d64f81b5384e39fd1942e9fb47b3c0fd1063c90c8d9ae6a29",
          "withoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360",
          "linkedWithoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16132_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)16132_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)16132_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)16132_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateCollateralAmount((bytes32,uint256,address))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "cd2eb4309704dcca668c8c7b12a0eb335743efad58f90b0e1d4298936927a833",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "fca4ae78398ff5f6422595eb98ac6fc556a76d756c41b5ec4862e709f3c98996",
          "withoutMetadata": "7d09401580bbd595c002bcad85c9baa77a738be2940d48927bfb2c6911001eac",
          "linkedWithoutMetadata": "7d09401580bbd595c002bcad85c9baa77a738be2940d48927bfb2c6911001eac"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2678_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2678_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2616_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2632_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2621_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2649_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2678_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2616_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2621_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2632_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2649_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "7d77dd28dacb71b5a95727fb1bf4b5cf2898054646c4c14d8eaacfb13ec7776e",
          "withoutMetadata": "782ab676ff2067cf2d5767f8bcc0cf813eb9a317aa6261a7684f5eaee9dfeb0e",
          "linkedWithoutMetadata": "782ab676ff2067cf2d5767f8bcc0cf813eb9a317aa6261a7684f5eaee9dfeb0e"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address,uint256)",
          "setCollateralMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "d0d223e36ab6fdb5ce8f0692a6ef07231e158ef6d63c3e2fc247a251b45fb3bb",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "d953dd8081cc70a93bec89fbecae4fb25729e0178e08e370bb8c733f73353d45",
          "withoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb",
          "linkedWithoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4823_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4823_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4823_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "bfddc3f34271513a309a13ecf8a089fdd48ed4d24ac66a37a327241b0438fefe",
          "withoutMetadata": "481aa4e755d53e5d106cc30894ed4cfbe6a202342c2e91d65b70a3409a2ad7aa",
          "linkedWithoutMetadata": "481aa4e755d53e5d106cc30894ed4cfbe6a202342c2e91d65b70a3409a2ad7aa"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)15123_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)15123_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)15123_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "03690fc41df93a656fbf80d7c1cb3d7a6130e1253355810356596332840650b2",
          "withoutMetadata": "ba4ad5cc4a651dd41c89737b204b38f14fb9957133c7355f66df5ceb7f9c0a1d",
          "linkedWithoutMetadata": "ba4ad5cc4a651dd41c89737b204b38f14fb9957133c7355f66df5ceb7f9c0a1d"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "b1920d1405b3911a4575633cb5c3bc1950ba7b2500a2c4550af178af2f20eb5c",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "f4340caee19c2dc5eba564f3bd32eafbbd32776cc9b2097ef5f4ff0db59b3c5b",
          "withoutMetadata": "ef882a68fc0b2f5f8c81e7b1491cae1a7c89199bc4801b1921f4e7f7f6671f31",
          "linkedWithoutMetadata": "ef882a68fc0b2f5f8c81e7b1491cae1a7c89199bc4801b1921f4e7f7f6671f31"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)15403_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)15403_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)15341_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)15357_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)15346_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)15374_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)15403_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)15341_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)15346_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)15357_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)15374_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "245049290b98807870c26efee81689d46c9cdefd819cd00ca35b1cff8bf58ad0",
          "withoutMetadata": "61c319065a47ccaf513b5d5dda4829fbd0df05df394726238c4ebb112366a664",
          "linkedWithoutMetadata": "61c319065a47ccaf513b5d5dda4829fbd0df05df394726238c4ebb112366a664"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "6a917ba9878f211d332822ecd08df5610a36de67fb3071fb4fbb7538699275f0",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "9e8c3fe3d8d02cc1fb623d887ac2aaf3ac2441cbd841b2515b00185c134516f0",
          "withoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360",
          "linkedWithoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15948_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)15948_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15948_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)15948_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateCollateralAmount((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "adef068714beb215b4065eae0b8f0b4670593752fae466fb79ca9fd5deab51f0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "2389804827c2b3041b1158d0d361846d2bb40b0abf2e107f96d0564fab3a0d28",
          "withoutMetadata": "782ab676ff2067cf2d5767f8bcc0cf813eb9a317aa6261a7684f5eaee9dfeb0e",
          "linkedWithoutMetadata": "782ab676ff2067cf2d5767f8bcc0cf813eb9a317aa6261a7684f5eaee9dfeb0e"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setBaseTokenMUT(address,uint256)",
          "setCollateralMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:71"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "baseTokenMUT",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "collateralMUT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "22",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "a5b0e1d7a8c8135ad04eee956d8937aa48330b124b9b179370f865a94b594e96",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "56d9f853c81a5613efc180e1e63e210e311f1c6113bff189824f412dc71e2f13",
          "withoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb",
          "linkedWithoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4823_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4823_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4823_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "dc85159e5844c2cbdf381179d61885cb7e8ba61a85498d6bd6d57e320cf26646",
          "withoutMetadata": "481aa4e755d53e5d106cc30894ed4cfbe6a202342c2e91d65b70a3409a2ad7aa",
          "linkedWithoutMetadata": "481aa4e755d53e5d106cc30894ed4cfbe6a202342c2e91d65b70a3409a2ad7aa"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)15093_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)15093_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)15093_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "576dff722ed0913bf8552de55115fbdaf7436850b363e0da363c47d7309c304c",
          "withoutMetadata": "b66adeec6436b34d4ca31d65b3a580b6c3834f5e24606d2fc0f865ec5ff8e972",
          "linkedWithoutMetadata": "b66adeec6436b34d4ca31d65b3a580b6c3834f5e24606d2fc0f865ec5ff8e972"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "03da46db7667e9b76011e0db8052076fa5a11d830e77750b904a92140278290a",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "e926b1cf1c7eba4e97522f2d40bd40a0a2469a4c7c14b454fea566ef17e225ec",
          "withoutMetadata": "f0f9a4324099bbaf4185516318f800a1b0cc0bc0c385f57a4394d871d81273f4",
          "linkedWithoutMetadata": "f0f9a4324099bbaf4185516318f800a1b0cc0bc0c385f57a4394d871d81273f4"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)15373_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)15373_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)15311_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)15327_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)15316_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)15344_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)15373_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)15311_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)15316_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)15327_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)15344_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "caf4b76aef069760a03b36e281550283d1c1a240a79fe1312c7aad7c7920c9b3",
          "withoutMetadata": "61c319065a47ccaf513b5d5dda4829fbd0df05df394726238c4ebb112366a664",
          "linkedWithoutMetadata": "61c319065a47ccaf513b5d5dda4829fbd0df05df394726238c4ebb112366a664"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "fede9e99d8783314db2bbffe35d9049c49283ed21bcb0f3afedfb1c21b8b67db",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "9d128e3c5468b866455087adf68d9909a7d1067978e2eea8be08149f5e58ab70",
          "withoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360",
          "linkedWithoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15901_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)15901_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15901_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)15901_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "baseTokenMUT(address)",
          "collateralMUT(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "52fde996e4bd1aa82123540b139bfbccb136ed381866c9bcbc0b94d89e617c62",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "f617d6bff0ac2ee8bad70227c7c14685436ffbfefd1e451708a2f41b3a23e09f",
          "withoutMetadata": "481aa4e755d53e5d106cc30894ed4cfbe6a202342c2e91d65b70a3409a2ad7aa",
          "linkedWithoutMetadata": "481aa4e755d53e5d106cc30894ed4cfbe6a202342c2e91d65b70a3409a2ad7aa"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3568_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3568_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3568_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "7767bd81775467b97885c67f127fcc3a978645a51ac110c608221489d27d860f",
          "withoutMetadata": "b4e6be561f8ed020ee84b8061099c828005406a935c0fa15ddbca1d0ce679b60",
          "linkedWithoutMetadata": "b4e6be561f8ed020ee84b8061099c828005406a935c0fa15ddbca1d0ce679b60"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "105ce7355904de4b45506e33b8715a681477de804bdd81e3887e139041f8e22a",
          "withoutMetadata": "29ba7a5374eb0e16cde6aed10aeb3a5a104f949b15b99382b97d8fa1cc936876",
          "linkedWithoutMetadata": "29ba7a5374eb0e16cde6aed10aeb3a5a104f949b15b99382b97d8fa1cc936876"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3560_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3560_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3560_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "24b4265dfa213af4e90f01520b74a7e76193704f697713f0a62aeaa3a62064e3",
          "withoutMetadata": "751e5603533f12e862f44523cd7c0a19970a8030063b32fab615d4cf6a46f87b",
          "linkedWithoutMetadata": "751e5603533f12e862f44523cd7c0a19970a8030063b32fab615d4cf6a46f87b"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "2bbb7ad636dcdc4105933b7aa20983452f645c2cb40f72bb43c2769fa1492b0c",
          "withoutMetadata": "d3d654acf32ac964038a99a6516f755c0142ce0fd9beec5c55bfb2b34027551e",
          "linkedWithoutMetadata": "d3d654acf32ac964038a99a6516f755c0142ce0fd9beec5c55bfb2b34027551e"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3554_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3554_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3554_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "c5eabad38606142891430c64db58afaa6afd8761014f12a12b67e5d5f0c3e83a",
          "withoutMetadata": "1317aadeae04b615e2f692528dd430dea2d29a05d01dab82bc856b6cde918dcf",
          "linkedWithoutMetadata": "1317aadeae04b615e2f692528dd430dea2d29a05d01dab82bc856b6cde918dcf"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "2ea32b203a6aa96a1b6366b12f98113afbe5f70ed4942169a3d66839000cb284",
          "withoutMetadata": "61c319065a47ccaf513b5d5dda4829fbd0df05df394726238c4ebb112366a664",
          "linkedWithoutMetadata": "61c319065a47ccaf513b5d5dda4829fbd0df05df394726238c4ebb112366a664"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "10e1b4a6df710fdee2f5109621b2b734e461e6abf46098396038afd0df4e2068",
          "withoutMetadata": "4184f80d6e7d26dbe55817ed19fd9d0fc430ba888c2ee9ebda28a5b5e1184ef4",
          "linkedWithoutMetadata": "4184f80d6e7d26dbe55817ed19fd9d0fc430ba888c2ee9ebda28a5b5e1184ef4"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "89a985fa997ab29c20f4b8fbd800a2f04caced88637c970c0ca4a66791a3ecad",
          "withoutMetadata": "372533724d33fb046805532324ab18ee2df440e6753a56f365947cb2564dca54",
          "linkedWithoutMetadata": "372533724d33fb046805532324ab18ee2df440e6753a56f365947cb2564dca54"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)4463_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)4463_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)4463_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "1c9b9dce09bc67918c0f2c502e0c3205385a1dbca453c8b7fa57e44ea420fe90",
          "withoutMetadata": "2fa47cc77d4f979c1a640da1c2aa84b56d01bab7351b2f38dcc4be07e4d9ffdb",
          "linkedWithoutMetadata": "2fa47cc77d4f979c1a640da1c2aa84b56d01bab7351b2f38dcc4be07e4d9ffdb"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "add04554d561aa17eefe5c501c79b4acb75d75b2b91c27231ed588cf2ca72625",
          "withoutMetadata": "4184f80d6e7d26dbe55817ed19fd9d0fc430ba888c2ee9ebda28a5b5e1184ef4",
          "linkedWithoutMetadata": "4184f80d6e7d26dbe55817ed19fd9d0fc430ba888c2ee9ebda28a5b5e1184ef4"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setRollbackFee(uint256)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:69"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "rollbackFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "21",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "7da40b275329affcc06c9a8d61bff4e0e91d34b99da3a901f1e662cc9924513e",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "1476aba8567aac1ae14c98120cf1b9351d009c63f1f28d7fb62dc4be33602b47",
          "withoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb",
          "linkedWithoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4782_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4782_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4782_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "1d6a0dfbe3b2bdb4ca2cbc32119f16e32f7cd54defb7bb64e540e968ddcd6cd6",
          "withoutMetadata": "d02b9c84c0f7c573ce476c2d4e75c6fa3c00444a706318c3434dd487f92db51d",
          "linkedWithoutMetadata": "d02b9c84c0f7c573ce476c2d4e75c6fa3c00444a706318c3434dd487f92db51d"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)14915_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)14915_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)14915_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "dd91de4bed697e0e5cf6fafac46bb67bea01a05e938291ee029b2c01701edfa1",
          "withoutMetadata": "cfb6c6a18dd448bf8d212c553cfc417d696edc785be9aa36b2b6d9787c795d33",
          "linkedWithoutMetadata": "cfb6c6a18dd448bf8d212c553cfc417d696edc785be9aa36b2b6d9787c795d33"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "ce316747d283d862d34ba969e4568a3b720951020035bf276bd3d2e3f72bf683",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "99bf6194778b4e4583f84cf7c858bc15bbf84a0062a5fe00ac720552c753b584",
          "withoutMetadata": "939c8662fafc9598e2bb446f12bc475b744c3cd27618a21c24887935bf3fe6e5",
          "linkedWithoutMetadata": "939c8662fafc9598e2bb446f12bc475b744c3cd27618a21c24887935bf3fe6e5"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)15195_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)15195_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)15133_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)15149_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)15138_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)15166_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)15195_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)15133_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)15138_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)15149_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)15166_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "6a0dc863cd329fba98efa902d9d5ec19898d5bf3562565681e7dfe98c2d759f0",
          "withoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732",
          "linkedWithoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "f6033c2547dee4de68ff385f467d3a308862ed22c1b6397d8c401f4bae61bc6d",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "30b107c8517924c6768e5d7fdcb8493e425382e499cd076a01af4ed98a243fa1",
          "withoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360",
          "linkedWithoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15723_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)15723_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15723_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)15723_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "rollbackFee()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "52fde996e4bd1aa82123540b139bfbccb136ed381866c9bcbc0b94d89e617c62",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "7b74cef8f967ec02151ad0c39cfbef89df5918075a06b1e92a4217f2e40db18e",
          "withoutMetadata": "8373df693a9e79997dc7a4506fc5866bfd192f1183c9a94f53a2fab31b454fba",
          "linkedWithoutMetadata": "8373df693a9e79997dc7a4506fc5866bfd192f1183c9a94f53a2fab31b454fba"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setServiceToken(address)",
          "setServiceFeeTo(address)",
          "setUpdateStoplossPriceFee(uint256)",
          "setUpdateDeadlineFee(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:67"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "serviceToken",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "serviceFeeTo",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "updateStoplossPriceFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "updateDeadlineFee",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:29"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:30"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:31"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "20",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "0ec62406eedcdebea204cb908b5e5dcf444e1e9d524662d0ef0df9440e9a222b",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "38a7b782a54d3d9d444084b24e4286af449872ea4515e331ae918caeb194bdc4",
          "withoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb",
          "linkedWithoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4759_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4759_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4759_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "58c2b019128a0fe9243ee590d48f7d2497fdb4046f03028280c0467e6ce8d5c4",
          "withoutMetadata": "3a38ff35f94865af0ac5fa8b7b2e6dd82ab8d4ebfd369bb45489f90e6f1dfcd4",
          "linkedWithoutMetadata": "3a38ff35f94865af0ac5fa8b7b2e6dd82ab8d4ebfd369bb45489f90e6f1dfcd4"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)14810_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)14810_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)14810_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "cd81c11d599bb825b17498da26f0dc590910240bdf2c8ac1cdb529324ead0cd8",
          "withoutMetadata": "1fe2791034c75c46a73602fb4005d4b8803e0c66bc0e56b3891101f7ca427c1f",
          "linkedWithoutMetadata": "1fe2791034c75c46a73602fb4005d4b8803e0c66bc0e56b3891101f7ca427c1f"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "4c7cf6128bcb0573ad839a4419be5fba7525a2492537d4ff22bf8ce887adbe70",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "738999a6d09339315d9edd790d57b99ea78850f1a9fd16dbe76548da9cd99def",
          "withoutMetadata": "939c8662fafc9598e2bb446f12bc475b744c3cd27618a21c24887935bf3fe6e5",
          "linkedWithoutMetadata": "939c8662fafc9598e2bb446f12bc475b744c3cd27618a21c24887935bf3fe6e5"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)15090_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)15090_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)15028_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)15044_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)15033_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)15061_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)15090_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)15028_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)15033_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)15044_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)15061_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "21eba88271fe1e766354b99a7696099af5fa4b25071c3e416f0d34644b4fcaa1",
          "withoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732",
          "linkedWithoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "c53fe9ad6a25fc186c3b70299b52b49c187db1fe6aba660829916bb9a6ada0b3",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "182d9ae0d69ca3a7b1d95285f5444cbacefe514d7fef086546dca491c3396c80",
          "withoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360",
          "linkedWithoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15618_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)15618_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15618_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)15618_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "serviceToken()",
          "serviceFeeTo()",
          "updateStoplossPriceFee()",
          "updateDeadlineFee()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "52fde996e4bd1aa82123540b139bfbccb136ed381866c9bcbc0b94d89e617c62",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "7240f4f08adeec702b12ebc62e8ea4ca3699896745e94c2dfeb1323eb93a10c3",
          "withoutMetadata": "fc9b134030b48697c159741427ea5d34baab247d63cb4a9aa3bebd466ad41988",
          "linkedWithoutMetadata": "fc9b134030b48697c159741427ea5d34baab247d63cb4a9aa3bebd466ad41988"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3292_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3292_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3292_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "f508b15dd8aade526a232be7e662d94a5fae02d59f8b4abfbed68986add1e990",
          "withoutMetadata": "ad35c45e1761f45c896f9932b9edfdfeb16201f5da91400ef32c451fb41ecffe",
          "linkedWithoutMetadata": "ad35c45e1761f45c896f9932b9edfdfeb16201f5da91400ef32c451fb41ecffe"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "2cc7fdb0da567c93de7090f74a6612a8bcf33888d20c8a95d59c9b02f6ffd373",
          "withoutMetadata": "745c59304652f4ee5400fd3ca145628160a9cf8ee7991166f02a9503d9e7a53d",
          "linkedWithoutMetadata": "745c59304652f4ee5400fd3ca145628160a9cf8ee7991166f02a9503d9e7a53d"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3300_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3300_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3300_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "ecbb4d8b596d2478d7ca91b1847027324778055c8d50a9e8a9eae7dd247872a7",
          "withoutMetadata": "ff6dabe73cac6287593b4368e4db3c0cf42bb3516c984df89c256ff24722a649",
          "linkedWithoutMetadata": "ff6dabe73cac6287593b4368e4db3c0cf42bb3516c984df89c256ff24722a649"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "72ccbb287d827f686eafb518a4dfd58c852d6dfc414060f9b81004719097bde6",
          "withoutMetadata": "05ae8d693b979d36734aa24a37ea606449937ba1571920f9ffd31d49492e0a97",
          "linkedWithoutMetadata": "05ae8d693b979d36734aa24a37ea606449937ba1571920f9ffd31d49492e0a97"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3290_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3290_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3290_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "f56b8523ac20adaca99d4054aeba1889ee5289201472dd8a4e47cf210fd61f24",
          "withoutMetadata": "09eb1d778e087dd3906469c246d9f6fc7b45baf05f7cc5b91add76bd3713a36e",
          "linkedWithoutMetadata": "09eb1d778e087dd3906469c246d9f6fc7b45baf05f7cc5b91add76bd3713a36e"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "9119c7af49611adb4ca53bb16d813dc9cc90636590562edc72c501a431ba7365",
          "withoutMetadata": "539ad4aa7ece373094a73f5dbb1f6126e793aeff3d833726c34eb48ba0d376a3",
          "linkedWithoutMetadata": "539ad4aa7ece373094a73f5dbb1f6126e793aeff3d833726c34eb48ba0d376a3"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3286_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3286_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3286_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "89e2cc36a8cddf226a75683c4f5862f634435d8b769b33c6fbb99b6e1876ae9b",
          "withoutMetadata": "1dc1fdc22c19eb30828d1a47a1da80322773e148efaac4fa7360e3b2dd67cdc6",
          "linkedWithoutMetadata": "1dc1fdc22c19eb30828d1a47a1da80322773e148efaac4fa7360e3b2dd67cdc6"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "f5a827d4c22977186964dcb0fa904f61eb2bca7d53307a579ea7ffca418fd8d4",
          "withoutMetadata": "539ad4aa7ece373094a73f5dbb1f6126e793aeff3d833726c34eb48ba0d376a3",
          "linkedWithoutMetadata": "539ad4aa7ece373094a73f5dbb1f6126e793aeff3d833726c34eb48ba0d376a3"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3286_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3286_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3286_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "3077f1f64d5b23661ee75f9d90b1e09d8fa422942109fdc533d426479d6026ab",
          "withoutMetadata": "5eacc06064c93c10fe1f4cec70bd110a6c52978165a46c165c07f83d83538142",
          "linkedWithoutMetadata": "5eacc06064c93c10fe1f4cec70bd110a6c52978165a46c165c07f83d83538142"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "ab0a8916df49a35eb3bf7075dc7ea31120e61b2786137180753252a5cafeeba2",
          "withoutMetadata": "bfa481b23d6413cc51efb3efc2b1fdd7f1eefdf9ecefa79493190652d9184a93",
          "linkedWithoutMetadata": "bfa481b23d6413cc51efb3efc2b1fdd7f1eefdf9ecefa79493190652d9184a93"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3248_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3248_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3248_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "98017a1c893d1dfe069b4e632b3bdb15d6ff7c9be2bf31046e958aa13bec1e31",
          "withoutMetadata": "4258fe2a678a758748338df81034c7669af4363f90008c0d149733b64011d29b",
          "linkedWithoutMetadata": "4258fe2a678a758748338df81034c7669af4363f90008c0d149733b64011d29b"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "fa83b8c32de467028e43ca8291343c19e9e4255d5c1d285e75eafd94a4cb1bc9",
          "withoutMetadata": "bfa481b23d6413cc51efb3efc2b1fdd7f1eefdf9ecefa79493190652d9184a93",
          "linkedWithoutMetadata": "bfa481b23d6413cc51efb3efc2b1fdd7f1eefdf9ecefa79493190652d9184a93"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3248_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3248_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3248_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "9dd00ea16c643e16fc25b4fbb755d5498e158ac6ef657313b70b4241b1b11b54",
          "withoutMetadata": "19fdc33f46f4e7e0afd256c14cf37c0af4cb108b37038c2bdba8ecc7113bdc3b",
          "linkedWithoutMetadata": "19fdc33f46f4e7e0afd256c14cf37c0af4cb108b37038c2bdba8ecc7113bdc3b"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "5e295a4e40348c20aff2b7c1f62d0673d241a29231a5886fdc40358832f735c9",
          "withoutMetadata": "e3d2c901c5d32bc1f30d30fd2c2137f4a431e67be2de192f13145c7a0e7b88fb",
          "linkedWithoutMetadata": "e3d2c901c5d32bc1f30d30fd2c2137f4a431e67be2de192f13145c7a0e7b88fb"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setLiquidationFeeTo(address)",
          "setLiquidationFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "liquidationFeeTo",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "liquidationFeeRate",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "10",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:27"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "ed08df140b713606e5e669e4bc6f920d24e2747071a45e1ddd615ac421ceb8e9",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "22d747349bd3f63dc809abf344d1e0de00f19aabca1f9e82d1d876d744c2ee15",
          "withoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb",
          "linkedWithoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4667_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4667_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4667_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "ab12c77a2e8e1bd19a9615ce9a8161e3911f9140c3e5031e32b8f232a9a6c7ad",
          "withoutMetadata": "5e2d6942a5f5d3197ba14a75734d90a102ccbde11f1fbdf159d04d0a8052a397",
          "linkedWithoutMetadata": "5e2d6942a5f5d3197ba14a75734d90a102ccbde11f1fbdf159d04d0a8052a397"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)14501_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)14501_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)14501_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "ad14609552cab7055bf1c52635a75f223721e56b405cc864dd2d41383f472d01",
          "withoutMetadata": "aa3ad0273efc62bfbb07388d448a9efc3544f3502a5df1bf6d926751029f0fb9",
          "linkedWithoutMetadata": "aa3ad0273efc62bfbb07388d448a9efc3544f3502a5df1bf6d926751029f0fb9"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "58ad7d35f2d784a7b97c21a0a104245ddf95e70907becb0482db5ec25d49cab1",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "10619d31d25be551ea86a24b23b1244f862f523fcc0e27e3a2f5d4111289afd7",
          "withoutMetadata": "939c8662fafc9598e2bb446f12bc475b744c3cd27618a21c24887935bf3fe6e5",
          "linkedWithoutMetadata": "939c8662fafc9598e2bb446f12bc475b744c3cd27618a21c24887935bf3fe6e5"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)14781_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)14781_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)14719_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)14735_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)14724_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)14752_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)14781_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)14719_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)14724_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)14735_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)14752_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "2494e3fd971fa42947571a24b7944d7e56f46d9edd11101cf4e1338911f1ebdb",
          "withoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732",
          "linkedWithoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "ee768345862049a393f2e746e696199f9ead4cf0998136261e170ed47c6d35f2",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "a3e34967ee1ac702057e52ea25200c537a88b0b674712d84f90ef8484868d20c",
          "withoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360",
          "linkedWithoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15309_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)15309_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15309_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)15309_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "liquidationFeeRate()",
          "liquidationFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "52fde996e4bd1aa82123540b139bfbccb136ed381866c9bcbc0b94d89e617c62",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "30ec209c51db25ff58d1f5818373d6be34310361da504dc81a85e3a501e1032f",
          "withoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1",
          "linkedWithoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "446bebc1e82496d8439c068b4fc7c13128f075ae1bb0d28cd37322f121ccb7a1",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "35165aa741fd0cf8f3aee1dbb0ff47d929f79c7c7ef1e8b8f947d4274113ff1e",
          "withoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb",
          "linkedWithoutMetadata": "52fa25df2b89c5fd5a3c726d50cbf534481716c37ba98a51e21c59278dbf55bb"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4611_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4611_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4611_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "e8e0c7d99104113bf22b2ef7175ac5f3c1c90010e088282c454903409226e32f",
          "withoutMetadata": "beef1a309dd476c0c58ef76c577250cf36aa993898571ab828880c17f25b2f85",
          "linkedWithoutMetadata": "beef1a309dd476c0c58ef76c577250cf36aa993898571ab828880c17f25b2f85"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)12058_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)12058_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)12058_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "d4b09de8ff07c667a2d0c86c9e9cec724d6dca82732f5753df55667d9c264a0a",
          "withoutMetadata": "f91dbeda2533308460f0bfae7761479ad4650d475a1cdd9a175232fbbe785c42",
          "linkedWithoutMetadata": "f91dbeda2533308460f0bfae7761479ad4650d475a1cdd9a175232fbbe785c42"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "61e1b6441f61f0fa35459412288402f494e1cd7ff7633e360253b8a5bd409711",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "ed46d981c1f3fca76fe8b1e0314d0b3bd9f41a12dfc5c862e39b68299bcd6b9b",
          "withoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732",
          "linkedWithoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "58755f53406df554245bb450e8ac1307ac50b82828cda05139dc1a329945b878",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "c6f74f308ca940f4f7852d19b9cc43dad06109ba0fc749d494796f3137316d4c",
          "withoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360",
          "linkedWithoutMetadata": "42cd92f0d9f5ef10883ff9f96de4d41407d9c4c93bfe5715c7cf259edb806360"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)12779_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)12779_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)12779_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)12779_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "0aceb8ed4861e3d7674e7f45e2f770a20d189c3b90ad6419f859d8fdc37cf7c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "1d11253e52d13922efad1e05eee45e82ba392ffc45eb58179dd5578b175ebd3f",
          "withoutMetadata": "ee15be2d3fd3eb78803754982987840f6ce57c3f69b5bbef06bf15c3c997f08b",
          "linkedWithoutMetadata": "ee15be2d3fd3eb78803754982987840f6ce57c3f69b5bbef06bf15c3c997f08b"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3220_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3220_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3220_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "a505a84c6fe9355b8ac0f52552190cda9746f89547904177fcadda972f01de58",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "6a508ee6f6359f5f5895304693e5fd0587cc7489bae33cc797dc763102813181",
          "withoutMetadata": "a91d50b1bfbca9972c53b0dc7c8214e79f1bb7ecef976ed9f64b9f1396e6a934",
          "linkedWithoutMetadata": "a91d50b1bfbca9972c53b0dc7c8214e79f1bb7ecef976ed9f64b9f1396e6a934"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)4044_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)4044_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)4044_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "f3a9f40413e293df17b89165b8e1fa2e7194ae52e4f2f21e156342797764b23d",
          "withoutMetadata": "5e1e21e3d19f1a63d1fe2703bbb8e7b664f0fa0218348f36d6b4056824317094",
          "linkedWithoutMetadata": "5e1e21e3d19f1a63d1fe2703bbb8e7b664f0fa0218348f36d6b4056824317094"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:20",
        "version": {
          "withMetadata": "0c7a1b746c149a7b246631cc9de130a05697e75d405b2fbf0b716728b2f7552d",
          "withoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510",
          "linkedWithoutMetadata": "cfe68b6629be23e9d62eb3d903d3f089782aa0d26b1ec4e12dc10aefe3018510"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "7c45c2c63ff3606b3e202a2b47bfcc1c75ef907d0dad1a36829007d159f7f951",
          "withoutMetadata": "aa2b22d6d244fe03ee12e633954f1938067e89e6e4b5f3f33c32bcda92bed80b",
          "linkedWithoutMetadata": "aa2b22d6d244fe03ee12e633954f1938067e89e6e4b5f3f33c32bcda92bed80b"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)4559_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)4559_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)4559_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)4559_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "f37b96be4e2e53c27485291929d22ea739b482819155df21c96aff8c32662f4d",
          "withoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1",
          "linkedWithoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "bbb882c8886af595413b06465a1776929f4503da60c0de2bcc4bcc3bd1ddc906",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "a3c60bae1debc565d9aef96a805690eed834c8a741b038f391160b15101b3623",
          "withoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd",
          "linkedWithoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4611_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4611_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4611_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "2e45e7751ed970862eab4593f039bfcf91c4ab16646dc801a778344ee12cf2e6",
          "withoutMetadata": "a91d50b1bfbca9972c53b0dc7c8214e79f1bb7ecef976ed9f64b9f1396e6a934",
          "linkedWithoutMetadata": "a91d50b1bfbca9972c53b0dc7c8214e79f1bb7ecef976ed9f64b9f1396e6a934"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "withdrawingLiquidity",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)12020_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)12020_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)12020_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "91a927b85118dd1fd91c8660a92d9afa954f044124b871d3ef43df788a5787b3",
          "withoutMetadata": "174c45c9f871704587891d56eb4ae8962e82c2f1a120d45999f0eaebf3112040",
          "linkedWithoutMetadata": "174c45c9f871704587891d56eb4ae8962e82c2f1a120d45999f0eaebf3112040"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:19",
        "version": {
          "withMetadata": "c76044e2bb9bcdb21afeb7408ab135e3c6fe45e1ad6ac3b5a82caefaa42832a8",
          "withoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b",
          "linkedWithoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "d010aa3527533ff1a56e2058da24ebec3b6287f6d6018d45a7fa728442f91ed1",
          "withoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732",
          "linkedWithoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "f20ac65b50558b490993dfad814264d57bde1081d2004aef438f1c7c796866d0",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "79a24e1bb558072a23d90e803ce55db33cfc893c053aa03ca9f9cdcbb2c798db",
          "withoutMetadata": "aa2b22d6d244fe03ee12e633954f1938067e89e6e4b5f3f33c32bcda92bed80b",
          "linkedWithoutMetadata": "aa2b22d6d244fe03ee12e633954f1938067e89e6e4b5f3f33c32bcda92bed80b"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)12739_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:22"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)12739_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)12739_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)12739_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "withdrawingLiquidity()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "availLiquidity()",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "execute(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "a505a84c6fe9355b8ac0f52552190cda9746f89547904177fcadda972f01de58",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:FixedPoint96": {
        "src": "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:7",
        "version": {
          "withMetadata": "f4ef3f7828755ee8d115f079e4860b7ee9c6a028e028d8b1fcdcf8d770e76530",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UniswapV3PriceFeedIntegration.sol:UniswapV3PriceFeedIntegration": {
        "src": "contracts/UniswapV3PriceFeedIntegration.sol:10",
        "version": {
          "withMetadata": "dcc99912da3344843188859b0bbd6257a4c864fdaa2f1a8afddc194a1afc94d9",
          "withoutMetadata": "8ee0d74fe8199248b77c5803ba0374495ef37ed5ebb45a2f83a02ab0923c3421",
          "linkedWithoutMetadata": "8ee0d74fe8199248b77c5803ba0374495ef37ed5ebb45a2f83a02ab0923c3421"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:FixedPoint96"
        ],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3PriceFeedIntegration",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3PriceFeedIntegration",
              "src": "contracts/UniswapV3PriceFeedIntegration.sol:13"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "559fd27a5249c8998b3d6344bf0924b6b9c835758ad833d2093200dfc63065c2",
          "withoutMetadata": "25ac85a25e18073d310a28075c927471b18cd33a4ed4162b361aa492474032b2",
          "linkedWithoutMetadata": "25ac85a25e18073d310a28075c927471b18cd33a4ed4162b361aa492474032b2"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2386_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2386_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2324_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2340_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2329_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2357_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2386_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2324_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2329_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2340_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2357_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "031726962a54a73206902285b78e6df7f061e9a5d42ebc8b38ec50ea1cd9bb40",
          "withoutMetadata": "25ac85a25e18073d310a28075c927471b18cd33a4ed4162b361aa492474032b2",
          "linkedWithoutMetadata": "25ac85a25e18073d310a28075c927471b18cd33a4ed4162b361aa492474032b2"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2386_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2386_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2324_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2340_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2329_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2357_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2386_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2324_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2329_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2340_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2357_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "1c0e1f981cb9c10032e38c6f949b68d2a88be85665d178fb1d9b98e04ec2ffb2",
          "withoutMetadata": "5aee556f614a8a3b9ed9c007b1d6e6aa759268fab1f9d40d4bc96ef7e28ad456",
          "linkedWithoutMetadata": "5aee556f614a8a3b9ed9c007b1d6e6aa759268fab1f9d40d4bc96ef7e28ad456"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2491_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2491_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2429_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2445_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2434_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2462_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2491_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2429_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2434_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2445_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2462_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "5864a6ec9110eb3a0178d3c93cd945e73006c32faac4d20b96588002e56be5ed",
          "withoutMetadata": "2e1f7ec987e3161db4f55dc708af0c6543fe786375c9c6cc96208dbd73b27fa7",
          "linkedWithoutMetadata": "2e1f7ec987e3161db4f55dc708af0c6543fe786375c9c6cc96208dbd73b27fa7"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2487_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2487_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2425_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2441_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2430_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2458_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2487_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2425_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2430_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2441_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2458_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "1b475231ef65ec0515ebcab6750aabbd5017784a4ec88345df7b56f6948a2fb8",
          "withoutMetadata": "a4e25f5742ab839b4c057083ac6443ba6d3964abdcaab0882b4fc9c42bb6f63e",
          "linkedWithoutMetadata": "a4e25f5742ab839b4c057083ac6443ba6d3964abdcaab0882b4fc9c42bb6f63e"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2487_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2487_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2425_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2441_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2430_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2458_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2487_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2425_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2430_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2441_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2458_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "70e84fd71cada50ededc98a481f0dfa79c2c95ae48cc7c6580bccd03d8fc136c",
          "withoutMetadata": "51775e1e1f0cc4ec1a7839ca5cc1785ef988e15778096638c82db41ba0324a5c",
          "linkedWithoutMetadata": "51775e1e1f0cc4ec1a7839ca5cc1785ef988e15778096638c82db41ba0324a5c"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2487_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2487_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2425_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2441_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2430_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2458_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2487_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2425_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2430_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2441_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2458_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "748922045eb804b023ba3446e1c74e665d0142299ef43c0ea643e0c4e6c42a0b",
          "withoutMetadata": "51775e1e1f0cc4ec1a7839ca5cc1785ef988e15778096638c82db41ba0324a5c",
          "linkedWithoutMetadata": "51775e1e1f0cc4ec1a7839ca5cc1785ef988e15778096638c82db41ba0324a5c"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2487_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2487_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2425_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)2441_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)2430_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2458_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2487_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2425_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2430_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2441_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2458_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "f3f53081d2b322124d37cc49e9928d7dacfd196761e1a1486c4c233fd59ebe3d",
          "withoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1",
          "linkedWithoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "6f50fef586924472ad08b710848791d1f602e1f8ecb64bf63812c1745c24fef4",
          "withoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f",
          "linkedWithoutMetadata": "c3f4414fc92e54ebc66aeacd03ae55045c243a3e8caee8703a567cfccff7377f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "9530db7d055d8432027ac2459945a09ddd742a9e3c51b7d0d146fb53e757722a",
          "withoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd",
          "linkedWithoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4611_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4611_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4611_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "e39af9375daac0b25f59e1a28598107208f4f5b8d26477e6c82d31724d52a407",
          "withoutMetadata": "5e78f3354cf855766fa1694ee64a8fb7c7f851f75c8245b3f9f765f77a1d604f",
          "linkedWithoutMetadata": "5e78f3354cf855766fa1694ee64a8fb7c7f851f75c8245b3f9f765f77a1d604f"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)14683_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)14683_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)14683_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "fd15b253bf33d71c960bae1c8c26c2491d0e274ac26640478804bc63c290bb3e",
          "withoutMetadata": "d8df08d06fe23ae948a9dab2c1f9a1e37a600356150ffa52bd31b9f4a1395b94",
          "linkedWithoutMetadata": "d8df08d06fe23ae948a9dab2c1f9a1e37a600356150ffa52bd31b9f4a1395b94"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:19",
        "version": {
          "withMetadata": "52ae5e3491e94589a2bc2f6bd2e519f7c8e7cbec9455dfa89234f98ed00ffc4c",
          "withoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b",
          "linkedWithoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "823903e75648a8b271650a6e7ae3a4e58923f4232d76992d128fe7062fd2e043",
          "withoutMetadata": "87feac5d0fe159eca27f5731d7fb54271b2d4a8e1178d37bd248441bc6b90455",
          "linkedWithoutMetadata": "87feac5d0fe159eca27f5731d7fb54271b2d4a8e1178d37bd248441bc6b90455"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)14953_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)14953_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)14891_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Collateral)14907_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(QuoteToken)14896_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)14924_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)14953_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)14891_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)14896_storage",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)14907_storage",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)14924_storage",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "20"
                }
              ],
              "numberOfBytes": "672"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:8",
        "version": {
          "withMetadata": "154df3ebf691d2423f04589f938ffc01b16da010606a271c0a99e6e806116d9e",
          "withoutMetadata": "4b432ee1ae8aa317bc97c85d128cfea84dda53fbfce1936f3cf37ec7b810d96b",
          "linkedWithoutMetadata": "4b432ee1ae8aa317bc97c85d128cfea84dda53fbfce1936f3cf37ec7b810d96b"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "6f957fa33930022a06be6f00e71526f1809dba7e6d68fbc58b4e31c3fd4481a1",
          "withoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732",
          "linkedWithoutMetadata": "547b1503c5971c4747dd48665dd12fd0cfdd9c5cd1eb2f9a39ba4a8ff7718732"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "6354dce98d8aac36f2f2d9d6ffe00c650878afdb557c611bdff7c05f80b623bd",
          "withoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a",
          "linkedWithoutMetadata": "bf26d6e985d660cc81969ce4da3a61a81d42f2f76fba62cd37f1a430a6d7536a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "18957331a14674645cfa3e2576f6be9e78868ca29de69b75884cffc8e4c8fe55",
          "withoutMetadata": "d609c0f25b06bf2924fbc50ebbc0b9c82a1e83dac63e2dec56aa5159787d6efd",
          "linkedWithoutMetadata": "d609c0f25b06bf2924fbc50ebbc0b9c82a1e83dac63e2dec56aa5159787d6efd"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "()",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15496_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)15496_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)15496_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)15496_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "b852de3fd957992c5df0ff1f5fa1ea0c794e66b0d2656a0e465001ec7e93128e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "a9eb8c0d48be31b19832ef7ed73bc0288f506e350e4722fc96c6eb606ce38210",
          "withoutMetadata": "d609c0f25b06bf2924fbc50ebbc0b9c82a1e83dac63e2dec56aa5159787d6efd",
          "linkedWithoutMetadata": "d609c0f25b06bf2924fbc50ebbc0b9c82a1e83dac63e2dec56aa5159787d6efd"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "()",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:56"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:19"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)1483_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:23"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)1483_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)1483_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)1483_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "919607f01b27ae7151505b79b7bd949f9712fd502dc2a181249e3d4ecf2d533e",
          "withoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1",
          "linkedWithoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "991d84baff8826b1332908d1aa8d2079745f877404d51d851abd1bb61c6a7919",
          "withoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266",
          "linkedWithoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "a37e71a97f2b30e27ac3e594c206599a2c1e78c573157f4dd5739be81bbeca20",
          "withoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd",
          "linkedWithoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4611_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4611_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4611_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "664b270eae47dd77cc3a947fcc2b407cc14589369f024c19c96560a37e139135",
          "withoutMetadata": "8f31412edcbaadba51832dab6f50796ac1280f498fbd42187b59d734f46a4e32",
          "linkedWithoutMetadata": "8f31412edcbaadba51832dab6f50796ac1280f498fbd42187b59d734f46a4e32"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)12008_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)12008_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)12008_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "be3792768d9936a5ac76b276e2f5ebf02e561c0f9119eca118dfeb0852c800cf",
          "withoutMetadata": "859dc854697961e07d7f49f5c23a963569d8fc8fb4c4813c6ea87737ad7da868",
          "linkedWithoutMetadata": "859dc854697961e07d7f49f5c23a963569d8fc8fb4c4813c6ea87737ad7da868"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:19",
        "version": {
          "withMetadata": "03f9aa08513565f38978cdf2eaf73bb9ad49b350ae67ea25752d98cd923957bc",
          "withoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b",
          "linkedWithoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "e5e3b4c6b4a638db453438d5627f83f884043bb2af0174a44588e94e9db31b5d",
          "withoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163",
          "linkedWithoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "e87f6a50fec863c1f9155c5b4ba1d90a8e53671498b074df3c82d49bf57abb23",
          "withoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff",
          "linkedWithoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:11",
        "version": {
          "withMetadata": "0951498b129fc2eef1812a64f3d08c0ffaa5301ad6cae8c5548b0a1d3e9d86f1",
          "withoutMetadata": "65a169680895f211b39122395f432fcf763154ba20a4d350ba89f17c690bb857",
          "linkedWithoutMetadata": "65a169680895f211b39122395f432fcf763154ba20a4d350ba89f17c690bb857"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:14"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:16"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:18"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)12723_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:20"
            },
            {
              "label": "currentIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)12723_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)12723_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)12723_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "currentIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "89433fc0448f43647e7a46e45c2fb919babd8d541354ffb1fdc8da67a0098d4d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:7",
        "version": {
          "withMetadata": "d27eccc6be26673e517c785a944cc7f45ec9fbb3eef3f892365ec3934e99cd7e",
          "withoutMetadata": "9bf9013c2ce2d4d69a039de1a12d8d450c57ae821ff4c2e2361b28efd413bbaf",
          "linkedWithoutMetadata": "9bf9013c2ce2d4d69a039de1a12d8d450c57ae821ff4c2e2361b28efd413bbaf"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "setManager(address)",
          "setKeeper(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WithdrawalMonitor",
            "src": "contracts/WithdrawalMonitor.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:8"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:10"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:11"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)393_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:13"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)393_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)393_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)393_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "startIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "ceca733ef89c102ed1623673daa71dcf6e86e5a72adc5195417e24948c571a98",
          "withoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1",
          "linkedWithoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "95100dab1a2a80ff25c26f987f804b6a05fa7f3350fa3ceb96e458a5a61f4706",
          "withoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266",
          "linkedWithoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "fff49bd5b9351c03be2a0f9bf89ea4a973dcc060707460e497e5fd94dbdd018f",
          "withoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd",
          "linkedWithoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4611_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4611_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4611_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:14",
        "version": {
          "withMetadata": "4befcc20ea045d60ca6431b18e7c9a9a4055c02e83592b91e859f1a3a3d38ccb",
          "withoutMetadata": "8f31412edcbaadba51832dab6f50796ac1280f498fbd42187b59d734f46a4e32",
          "linkedWithoutMetadata": "8f31412edcbaadba51832dab6f50796ac1280f498fbd42187b59d734f46a4e32"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)11487_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)11487_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)11487_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "f3702808c2e9114d80acb91cfa24e4d7957c0191a76f21fc1e0a3fe44588a4c9",
          "withoutMetadata": "c90f431070f4f8f14b7e815004f54c7abdd4d89b238cbad03f104cb98e19ce32",
          "linkedWithoutMetadata": "c90f431070f4f8f14b7e815004f54c7abdd4d89b238cbad03f104cb98e19ce32"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:19",
        "version": {
          "withMetadata": "70851c1b38d2775bbe15dcb8d4143049b0cb2e05da6c941dbaa590c0c6937bc4",
          "withoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b",
          "linkedWithoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "df3508abd915153b1ed66fa2004c516f22d296ea4c24f99d90c544714954c1a8",
          "withoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163",
          "linkedWithoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "bf40c5a14edae5535f2d89938b37d283966d07ba7c0ad09aa088e8e586847fae",
          "withoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff",
          "linkedWithoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/WithdrawalMonitor.sol:WithdrawalMonitor": {
        "src": "contracts/WithdrawalMonitor.sol:7",
        "version": {
          "withMetadata": "18af16519de1ec0be3e5d40b0ceccbb5705ab3cb6c552f5a4282b8af1c6ce96c",
          "withoutMetadata": "b392c219a5a5e609c81df9d73d311b595b378e2fb030531e4fe3fd965e47d2f4",
          "linkedWithoutMetadata": "b392c219a5a5e609c81df9d73d311b595b378e2fb030531e4fe3fd965e47d2f4"
        },
        "inherit": [
          "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "requestLength(address)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:8"
            },
            {
              "label": "request",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)12202_storage)dyn_storage)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:10"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WithdrawalMonitor",
              "src": "contracts/WithdrawalMonitor.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(WithdrawalRequest)12202_storage)dyn_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)12202_storage)dyn_storage)": {
              "label": "mapping(address => struct IWithdrawalMonitor.WithdrawalRequest[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(WithdrawalRequest)12202_storage": {
              "label": "struct IWithdrawalMonitor.WithdrawalRequest",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "quoteToken",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "unwrapWeth",
                  "type": "t_bool",
                  "offset": 20,
                  "slot": "4"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "callbackResult",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn((uint256,address,address,uint256,address,bool,bytes,string))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "requestLength(address)",
          "startIndex(address)",
          "request(address,uint256)",
          "addRequest(address,address,uint256,address,bool,bytes)",
          "updateCallbackResult(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "07651fd181e7215f0ddf3724f063b3343364c7a0bfa6f9c3c5b3134bd3f52d69",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "e92b00d974076072d2c6c3020b71e1d4d38f73b2786f990a6b9ad17d5f350b3a",
          "withoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1",
          "linkedWithoutMetadata": "4ba79e35c7e6150d04fa73979edd2688f6cf710809282dbc919ed68ad9f52ad1"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "withdrawalMonitor",
            "src": "contracts/Factory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "c5629c546668a396b32733968ddd8dd228d5dbf2f9a12736303f56b25d87b946",
          "withoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266",
          "linkedWithoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "e115161993135beefca4d912e34f3f6768f07687021ce051da596c941dfb6862",
          "withoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd",
          "linkedWithoutMetadata": "a948fffdf0a30582b63351a69936a6ffce7f11b8c66b739596cd1f13fc034bdd"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "burnCallback(uint256,bytes)",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:48"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:41"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:43"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4611_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:45"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:48"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:50"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4611_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4611_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:15",
        "version": {
          "withMetadata": "6b0d19632e5f5a206f5f384aed336bbe930e915a7c2f99f70e9bb33eb1739006",
          "withoutMetadata": "8bedbbcea28c9fd2c07f56a65bb91d83c0c584d5302a2e61b10a642d1afa9e47",
          "linkedWithoutMetadata": "8bedbbcea28c9fd2c07f56a65bb91d83c0c584d5302a2e61b10a642d1afa9e47"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn(address,uint256,address,bool,bytes)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:31"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)14496_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)14496_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)14496_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "withdrawingLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "6223c2cd726f3dd2750348dc7e86e2801f18ff864727a5272872e273bf0fe70d",
          "withoutMetadata": "37ad67733661d8d0001e3f6446c187b1f955da34f3ddeadb8b26ab2dc89e821c",
          "linkedWithoutMetadata": "37ad67733661d8d0001e3f6446c187b1f955da34f3ddeadb8b26ab2dc89e821c"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:19",
        "version": {
          "withMetadata": "9994baf3d36a862c57d78dd10c8aaa9f42cb43cb3b0d59c6106b15ad81097147",
          "withoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b",
          "linkedWithoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "fa25432a0835ee15bf720ecba0ca83674c68527a7f57fba76af11420d51baa71",
          "withoutMetadata": "590e07e49232468343dbf4e444008f3aa9a5a353f32d8d679bada9795c875119",
          "linkedWithoutMetadata": "590e07e49232468343dbf4e444008f3aa9a5a353f32d8d679bada9795c875119"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)14777_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)14777_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)14713_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)14731_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)14718_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)14748_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)14777_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)14713_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)14718_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)14731_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)14748_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "2e04a5006fa88f606ada45e850500cced8f88c3123d57b62a9ff245df044e803",
          "withoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163",
          "linkedWithoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "6f64bb1e7ef7d912611e9b9f5a98f7cae13ef0d41305fd2f40d86574e434d121",
          "withoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff",
          "linkedWithoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IBurnCallback.sol:IBurnCallback": {
        "src": "contracts/interfaces/IBurnCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnCallback(uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "withdrawalMonitor()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IBurnCallback.sol:IBurnCallback",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "addDecreaseLiquidityRequest((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "addBurnRequest(uint256,address,bool,bytes)",
          "burn(address,uint256,address,bool,bytes)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWithdrawalMonitor.sol:IWithdrawalMonitor": {
        "src": "contracts/interfaces/IWithdrawalMonitor.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "requestLength(address)",
          "startIndex(address)",
          "request(address,uint256)",
          "addRequest((address,uint256,address,bool,address,bytes))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "95d65f5b4e4a7649645aff0ea510faf238b1ed87732f9249e9b27cb96af5bbeb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "93e10f4d0e72c73b53f0046c0666d649f86a03d551299383388c9a955e5d96df",
          "withoutMetadata": "9e0f4e17f67a8e85e0c8617e67e9bef1d0f9fe5a98e7fde098a605575ed4f27b",
          "linkedWithoutMetadata": "9e0f4e17f67a8e85e0c8617e67e9bef1d0f9fe5a98e7fde098a605575ed4f27b"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2910_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2910_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2910_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "97c3c1eb4e3594c80f43039dad83c808fb35f2facc6bc85d5ea2bcb58a3b9670",
          "withoutMetadata": "8f63f65682f98eeef43eda1796315c18ab43e4bf69a7ab320b81cddef02ec222",
          "linkedWithoutMetadata": "8f63f65682f98eeef43eda1796315c18ab43e4bf69a7ab320b81cddef02ec222"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "32580f178a49886ce272e6e5c6637099d4753bcff55672699020a46307f4b673",
          "withoutMetadata": "9827866af8d6d161674a8580fc396f3b9cdd6fad866d6c513064f7d097ab4462",
          "linkedWithoutMetadata": "9827866af8d6d161674a8580fc396f3b9cdd6fad866d6c513064f7d097ab4462"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2889_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2889_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2889_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "e57b448daf7e62d4d42948a7514948df7fd52b97ecb0c2ab1c9268026ea32026",
          "withoutMetadata": "7225163acca6dff305d1ec76699b28f93417a98d21e130a7bde55f1d907786ef",
          "linkedWithoutMetadata": "7225163acca6dff305d1ec76699b28f93417a98d21e130a7bde55f1d907786ef"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "34c40e9d803dff45aa0fd5d6446836cef0f8cc4b63a0c0feefef294b3a74aad7",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "0eb0a940361a1bd56de64a0897adebc9adbb02ae6bfd7b859718eb4b086f7f93",
          "withoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266",
          "linkedWithoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "11c4fbfb6c4068153b3850ac65803e8c795a9d466089ab84d41192d99c633a24",
          "withoutMetadata": "893da36175a71d15d0fcbe880516d5ea8cd5adc471259e8bd249e4d9c2c426ad",
          "linkedWithoutMetadata": "893da36175a71d15d0fcbe880516d5ea8cd5adc471259e8bd249e4d9c2c426ad"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:60"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:40"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:42"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4600_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:44"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:47"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:49"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4600_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4600_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "c56df2b569ed6474a0305546c2d143df43fec9bc2d1846bc82bec8e219ed156d",
          "withoutMetadata": "d7aeca19b2438faf08bd0cc35caa8277f4285f2c0d6b14cde310c5abd7345639",
          "linkedWithoutMetadata": "d7aeca19b2438faf08bd0cc35caa8277f4285f2c0d6b14cde310c5abd7345639"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)14069_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)14069_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)14069_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "3b3e5e18436b9f7de38fffcb2902677f15355593d924bc5895f4d5f777aa2268",
          "withoutMetadata": "521d0f16afd5b710cb4f03f1d022982f7f12c8961788446a01d841dae34aa720",
          "linkedWithoutMetadata": "521d0f16afd5b710cb4f03f1d022982f7f12c8961788446a01d841dae34aa720"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:19",
        "version": {
          "withMetadata": "d7032c8aac5c709a9c8e0b1050320d132942930ea7d679f4fb5466bc97605aee",
          "withoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b",
          "linkedWithoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "5e6af41197600cbb3462811fc34c9d0e31337dfdf53ccb61962cfe1b83301b2c",
          "withoutMetadata": "590e07e49232468343dbf4e444008f3aa9a5a353f32d8d679bada9795c875119",
          "linkedWithoutMetadata": "590e07e49232468343dbf4e444008f3aa9a5a353f32d8d679bada9795c875119"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)14331_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)14331_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)14267_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)14285_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)14272_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)14302_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)14331_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)14267_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)14272_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)14285_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)14302_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "e39713fb83ca025dfb64e43b66023a15b66a9fb6109b179265093b312c7ba16f",
          "withoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163",
          "linkedWithoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "c9856d8dbafc255894f79a21855f9d53becd8f9fe85980f21669b6de9970dbb6",
          "withoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff",
          "linkedWithoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:13",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewUpdateDeadline((bytes32,uint256,address))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "a4902b1786bd012c683137b146648ca43312fc532527b2e8d0d03874b0897e98",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "fe3b697459a839f46d85d7b806d7caba81a08a98ee922902d3da074a02f6a9db",
          "withoutMetadata": "d7aeca19b2438faf08bd0cc35caa8277f4285f2c0d6b14cde310c5abd7345639",
          "linkedWithoutMetadata": "d7aeca19b2438faf08bd0cc35caa8277f4285f2c0d6b14cde310c5abd7345639"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2882_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2882_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2882_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "7232a40af8a87875c8ed5a2def0dbbe22d2fa997a774ca72277efff1d4eb1453",
          "withoutMetadata": "4196a53a59f5a628bde91995e2e1340a6e5738ca2ed01145d9a6a3a65a490ecb",
          "linkedWithoutMetadata": "4196a53a59f5a628bde91995e2e1340a6e5738ca2ed01145d9a6a3a65a490ecb"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "cb930f6292d3c7f53b798ddd6117f4d531e5210fe62358874942203a798d60e3",
          "withoutMetadata": "cbad047816f638aaf8d29c66bccbac1c65aed2f407939b7d1a5c61f4d8b0b008",
          "linkedWithoutMetadata": "cbad047816f638aaf8d29c66bccbac1c65aed2f407939b7d1a5c61f4d8b0b008"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2864_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2864_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2864_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "68b3994ed1b215e69eda7b9acd417311bd3898c55fabca43997de15d55d66cfb",
          "withoutMetadata": "0b98483c281eb526ddead5f8a12e47fa0b09ba497316db6cac565cd956f68416",
          "linkedWithoutMetadata": "0b98483c281eb526ddead5f8a12e47fa0b09ba497316db6cac565cd956f68416"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "898d272e71749326f49ad4d8887564a698efb19ffdc944f28d49253ea545e269",
          "withoutMetadata": "e5220c2801f9e7266075d5f6dd574e28fdaa1b82d09fef34ffcba54ccecbc8f0",
          "linkedWithoutMetadata": "e5220c2801f9e7266075d5f6dd574e28fdaa1b82d09fef34ffcba54ccecbc8f0"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2852_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2852_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2852_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "934d31a12bbbead8642e412ce5902eae5f60ea9696373edbc2cf8a50fa528182",
          "withoutMetadata": "656c04d65c69fd31f707e9cf0b0baf81339fff3b43b17ee6f5af719908be728b",
          "linkedWithoutMetadata": "656c04d65c69fd31f707e9cf0b0baf81339fff3b43b17ee6f5af719908be728b"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PoolReader.sol:PoolReader": {
        "src": "contracts/PoolReader.sol:19",
        "version": {
          "withMetadata": "a233e3efde3abe4a8d19e1eddf1316bf2f307cd381fac8ca051e35fd2a140631",
          "withoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b",
          "linkedWithoutMetadata": "b8693507b15c6772747f59c24d5deb97608f765cb267191f44f1314ed3aa0e9b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "allPools(address)",
          "poolDetail(address)",
          "allPoolDetails(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TradePositionReader.sol:TradePositionReader": {
        "src": "contracts/TradePositionReader.sol:29",
        "version": {
          "withMetadata": "7773a08978e504cbde70c38ccba3a3436fa3ef7ae5cd831e21f0db23015775f8",
          "withoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff",
          "linkedWithoutMetadata": "b56833c0b4d8ca1406d84dadaf6f03363cf8b7f20b56a857bafb1c089e439bff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "pair(address,address)",
          "previewPosition(address,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "positionDetail(address,bytes32)",
          "positionDetailByStorage(address,bytes32)",
          "allUserPositions(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "bf1e34f0037897986715520b63d99fde4834e27a67bca9647c3a3ad5137481f6",
          "withoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266",
          "linkedWithoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "3a657a4650b08ba420c0e187330a50d80bbe5b1b559961fb10480b6315809005",
          "withoutMetadata": "8d6ae38ddc8afbd2d6a217827b659814a163684f7879b382647c36974fbdda71",
          "linkedWithoutMetadata": "8d6ae38ddc8afbd2d6a217827b659814a163684f7879b382647c36974fbdda71"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)4982_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)4982_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)4918_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)4936_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)4923_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)4953_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)4982_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)4918_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)4923_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)4936_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)4953_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Router.sol:Router": {
        "src": "contracts/Router.sol:14",
        "version": {
          "withMetadata": "e7874049740bcebaa1b174788e2a0d5ece77fb0505ae97f7c34e9adc5fc44d36",
          "withoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163",
          "linkedWithoutMetadata": "376746787d8427b86f4ff9accf10aee58ca6e01e9598fdd71531839678750163"
        },
        "inherit": [
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp",
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "contracts/interfaces/IRouter.sol:IRouter"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "closeCallback(address,address,uint256,bytes)",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Router",
            "src": "contracts/Router.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/Router.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/Router.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close((address,bytes32,bool,uint256))",
          "rollback((address,bytes32,bool,uint256))",
          "updateStoplossPrice((address,bytes32,uint256,uint256))",
          "updateDeadline((address,bytes32,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "721acc8a12062d3f5577ef4f57c9980d2d9248cbb802386f70f528730b0554f5",
          "withoutMetadata": "893da36175a71d15d0fcbe880516d5ea8cd5adc471259e8bd249e4d9c2c426ad",
          "linkedWithoutMetadata": "893da36175a71d15d0fcbe880516d5ea8cd5adc471259e8bd249e4d9c2c426ad"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:60"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:40"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:42"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)3218_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:44"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:47"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:49"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)3218_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)3218_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:13",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IRouter.sol:IRouter": {
        "src": "contracts/interfaces/IRouter.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "WETH()",
          "factory()",
          "preview((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsCollateral((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openWithEthAsBaseToken((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "openETH((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
          "close(address,bytes32,uint256)",
          "rollback(address,bytes32,uint256)",
          "updateStoploss(address,bytes32,uint256,uint256)",
          "updateDeadline(address,bytes32,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "b4487b71625c30b3533d92360e69122a5c5ab9918080b96882877e3aa5665ee1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "ab9a01f2b7645d588597b088c29142ca72915b7858989625b2888f6983ed3acb",
          "withoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59",
          "linkedWithoutMetadata": "f11d2372ba7ef252a7ff05d00045e1754b1d8b4a44ff93792ce73c2185649f59"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b514b6a999ea162d1d1592ac1eec26475d5f46ac389126a06316f6e7f7a37a92",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c2411c6de9529be344a7f7c923ccc517e250e648f7da76d827209618f59bc9c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "9a75522f5f5810c87b82cd8fbb7ff223cf6ce38cc20dba8ebdf7ede92e60479e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "37aa8ace1e31351f83ebba62d02465bd381628e162dca51ec0e641667b4fce51",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "5459ae796a55bb90dd4e3a0774fb13d46055efe2c29b5e0985c55abdba2d26d9",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "80c43faea6161493f8080cd899693c579ddc87d66146c26b18e705ccbbc86d33",
          "withoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266",
          "linkedWithoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/NonfungiblePositionManager.sol:NonfungiblePositionManager": {
        "src": "contracts/NonfungiblePositionManager.sol:19",
        "version": {
          "withMetadata": "8b00dea715fc257ec71d194f2aa25003d138bbd59844c0e079374be23bfb05d9",
          "withoutMetadata": "893da36175a71d15d0fcbe880516d5ea8cd5adc471259e8bd249e4d9c2c426ad",
          "linkedWithoutMetadata": "893da36175a71d15d0fcbe880516d5ea8cd5adc471259e8bd249e4d9c2c426ad"
        },
        "inherit": [
          "contracts/base/SelfPermit.sol:SelfPermit",
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit",
          "contracts/base/PeripheryValidation.sol:PeripheryValidation",
          "contracts/base/LiquidityManagement.sol:LiquidityManagement",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/base/ERC721Permit.sol:ERC721Permit",
          "contracts/base/Multicall.sol:Multicall",
          "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager",
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "(address,address,address)",
          "setTokenDescriptor(address)",
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "tokenURI(uint256)",
          "increaseLiquidity((uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)",
          "getApproved(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NonfungiblePositionManager",
            "src": "contracts/NonfungiblePositionManager.sol:60"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextId",
            "src": "contracts/NonfungiblePositionManager.sol:47"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_nextPoolId",
            "src": "contracts/NonfungiblePositionManager.sol:49"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            },
            {
              "label": "_poolIds",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint80)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:40"
            },
            {
              "label": "_poolIdToPoolToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint80,t_address)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:42"
            },
            {
              "label": "_positions",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_struct(Position)4609_storage)",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:44"
            },
            {
              "label": "_nextId",
              "offset": 0,
              "slot": "13",
              "type": "t_uint176",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:47"
            },
            {
              "label": "_nextPoolId",
              "offset": 22,
              "slot": "13",
              "type": "t_uint80",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:49"
            },
            {
              "label": "_tokenDescriptor",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "NonfungiblePositionManager",
              "src": "contracts/NonfungiblePositionManager.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint80)": {
              "label": "mapping(address => uint80)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Position)4609_storage)": {
              "label": "mapping(uint256 => struct NonfungiblePositionManager.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint80,t_address)": {
              "label": "mapping(uint80 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Position)4609_storage": {
              "label": "struct NonfungiblePositionManager.Position",
              "members": [
                {
                  "label": "nonce",
                  "type": "t_uint96",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "operator",
                  "type": "t_address",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "poolId",
                  "type": "t_uint80",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 10,
                  "slot": "1"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint176": {
              "label": "uint176",
              "numberOfBytes": "22"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint80": {
              "label": "uint80",
              "numberOfBytes": "10"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "78ff9623dcd42b970b6d575e7031d32c18cf024fdac997898443bc8509a5a436",
          "withoutMetadata": "a1e172de3ecfde0647a48847e139ab642e9421086d5d25c6b9a5629c6cec912a",
          "linkedWithoutMetadata": "a1e172de3ecfde0647a48847e139ab642e9421086d5d25c6b9a5629c6cec912a"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)12744_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)12744_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)12744_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "429cc82e7ac0112c4e0d5aac0d7dcfbdf2a90ea5132f09b485ad99b4aa883c7d",
          "withoutMetadata": "6899d172acb7de58fb3ea768f1130d49d46fa18a7c17096e2bf91f152c56aaf4",
          "linkedWithoutMetadata": "6899d172acb7de58fb3ea768f1130d49d46fa18a7c17096e2bf91f152c56aaf4"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "22ff4e8ee3eec47ebcead13430a7c4d858bca760afd52ccae203f3327ddcaf75",
          "withoutMetadata": "045954549463923bca20f78344ee1e0c92447e16d3267f93681f1d577899de38",
          "linkedWithoutMetadata": "045954549463923bca20f78344ee1e0c92447e16d3267f93681f1d577899de38"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)13006_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)13006_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)12942_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)12960_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)12947_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)12977_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)13006_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)12942_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)12947_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)12960_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)12977_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BlockTimestamp.sol:BlockTimestamp": {
        "src": "contracts/base/BlockTimestamp.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/ERC721Permit.sol:ERC721Permit": {
        "src": "contracts/base/ERC721Permit.sol:14",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "contracts/libraries/ChainId.sol:ChainId"
        ],
        "methods": [
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Permit",
            "src": "contracts/base/ERC721Permit.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nameHash",
            "src": "contracts/base/ERC721Permit.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "versionHash",
            "src": "contracts/base/ERC721Permit.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/LiquidityManagement.sol:LiquidityManagement": {
        "src": "contracts/base/LiquidityManagement.sol:13",
        "inherit": [
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [
          "contracts/libraries/CallbackValidation.sol:CallbackValidation",
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState": {
        "src": "contracts/base/PeripheryImmutableState.sol:9",
        "inherit": [
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PeripheryImmutableState",
            "src": "contracts/base/PeripheryImmutableState.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/base/PeripheryImmutableState.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH9",
            "src": "contracts/base/PeripheryImmutableState.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/base/PeripheryImmutableState.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPayments.sol:PeripheryPayments": {
        "src": "contracts/base/PeripheryPayments.sol:11",
        "inherit": [
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "unwrapWETH9(uint256,address)",
          "sweepToken(address,uint256,address)",
          "refundETH()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryPaymentsWithFee.sol:PeripheryPaymentsWithFee": {
        "src": "contracts/base/PeripheryPaymentsWithFee.sol:12",
        "inherit": [
          "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee",
          "contracts/base/PeripheryPayments.sol:PeripheryPayments",
          "contracts/base/PeripheryImmutableState.sol:PeripheryImmutableState",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/PeripheryValidation.sol:PeripheryValidation": {
        "src": "contracts/base/PeripheryValidation.sol:6",
        "inherit": [
          "contracts/base/BlockTimestamp.sol:BlockTimestamp"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/SelfPermit.sol:SelfPermit": {
        "src": "contracts/base/SelfPermit.sol:14",
        "inherit": [
          "contracts/interfaces/ISelfPermit.sol:ISelfPermit"
        ],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "manager()",
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:13",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint256,bool,uint256))",
          "collect((uint256[],address,bool))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/CallbackValidation.sol:CallbackValidation": {
        "src": "contracts/libraries/CallbackValidation.sol:7",
        "version": {
          "withMetadata": "b4487b71625c30b3533d92360e69122a5c5ab9918080b96882877e3aa5665ee1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/PoolAddress.sol:PoolAddress"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "128a7d9d9b8e21c2a74213dcf86b821af945a52d38d205c6d70cc052eee5fb07",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "498e67b4174cc174cf50a9f0fdfab8afab3641aecdd697a20b8dc62035cf032a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "8edcd6639d5dc012600fac07dcded16ed6a534b2d6a51a3fcafd5a7b1ba56b10",
          "withoutMetadata": "045954549463923bca20f78344ee1e0c92447e16d3267f93681f1d577899de38",
          "linkedWithoutMetadata": "045954549463923bca20f78344ee1e0c92447e16d3267f93681f1d577899de38"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)3184_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)3184_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)3120_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)3138_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)3125_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)3155_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)3184_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)3120_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)3125_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)3138_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)3155_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "553eafa35bccd56c7c88dbda74600400ddfc841cb278640cf6fa0af82a4dc98a",
          "withoutMetadata": "7f630becdc8a70d75db63453939c37ad3e7ff8808d6574c1ead8ed25b1017429",
          "linkedWithoutMetadata": "7f630becdc8a70d75db63453939c37ad3e7ff8808d6574c1ead8ed25b1017429"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2973_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2973_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2909_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)2927_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)2914_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2944_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2973_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2909_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2914_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2927_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2944_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "b5d82b9e06d9ea4e24157e7237b0697b1417b0237e8079ba25fa5fd03b5504b4",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "5f9c6a8833c59d980dfe4f88fb391b1647842891240ef5cfd48124fac4e63f8b",
          "withoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266",
          "linkedWithoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "d9df4715310e125e7924c91a87ab69ff8bcdc0b8b6f5355bee13349d3c574afc",
          "withoutMetadata": "bd7be5900cb09045b0b0fe2ed6f6700204852b3f418fa8f756df6ce1b781ac84",
          "linkedWithoutMetadata": "bd7be5900cb09045b0b0fe2ed6f6700204852b3f418fa8f756df6ce1b781ac84"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)6823_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)6823_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)6823_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "17c89c0c53686a7f54ef73eff6045bec1e2d7d36dea459abb70ced8b1a39f7c0",
          "withoutMetadata": "79af289a81fed6a71afdfdf15e96ba0ef1743410d90c2ed145dd6a01ea8c5639",
          "linkedWithoutMetadata": "79af289a81fed6a71afdfdf15e96ba0ef1743410d90c2ed145dd6a01ea8c5639"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "52f8a93bd3e4a4fe4bcc44cfe883053fa0a0f53fb1682ff4bf28e949e55abea3",
          "withoutMetadata": "bce0fc74a3f847322de699374504b5b5f4ebcaba4162f4f43074428d297698b5",
          "linkedWithoutMetadata": "bce0fc74a3f847322de699374504b5b5f4ebcaba4162f4f43074428d297698b5"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)7087_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)7087_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)7023_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)7041_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)7028_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)7058_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)7087_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)7023_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)7028_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)7041_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)7058_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool,address))",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32,address)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256,address))",
          "updateDeadline((bytes32,uint256,address))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "2ae99f3652d94d1574d8d11c774b207c2dd85133e77ba794c3888d3bc260ebd5",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "0ae02037830e61901ca0b4be18baf81eacf37fb0fae174f8716bdcd4a14add3e",
          "withoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266",
          "linkedWithoutMetadata": "d11b80161958c46a9f24b5e742342011f749fe129b1b1c79b8c86b6b15dd0266"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "61c2baca885eb66b83d5d07ba23da0cac6146f1062f70ca1ceb3803a35e99a72",
          "withoutMetadata": "f4dcbd2206f7ce158cdb0ccfcc213292fc21d0c22867c427fd2fd0e98eeb546b",
          "linkedWithoutMetadata": "f4dcbd2206f7ce158cdb0ccfcc213292fc21d0c22867c427fd2fd0e98eeb546b"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)6411_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)6411_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)6411_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "86ee1cdfeeb47d7a9a060c8eb1250de8cdc8c35d7b21c09730fe1309abf3dc09",
          "withoutMetadata": "a49b51c6dd8e2267142cb4c56be11a245630653f57d84e2c3d569b491d167aa8",
          "linkedWithoutMetadata": "a49b51c6dd8e2267142cb4c56be11a245630653f57d84e2c3d569b491d167aa8"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "2bbc73a46ad1d5f381eb52b5b0294f06bbabb6ddfcb0637ba89792623ebebf59",
          "withoutMetadata": "895db0d31b35ecbe4b7aee947a8c3aeceef1fa52e197778af32f7f2a7918e7c7",
          "linkedWithoutMetadata": "895db0d31b35ecbe4b7aee947a8c3aeceef1fa52e197778af32f7f2a7918e7c7"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)6675_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)6675_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)6611_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)6629_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)6616_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)6646_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)6675_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)6611_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)6616_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)6629_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)6646_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool,address))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32,address)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "b2893d82f6d6dd0b7e0e0ae59ae7b1d4e13a37d8670e94f2a41b3ed80698b441",
          "withoutMetadata": "9de5f136804c297cd94588f02fb69d0933101809d08c3416dcfec878134000f6",
          "linkedWithoutMetadata": "9de5f136804c297cd94588f02fb69d0933101809d08c3416dcfec878134000f6"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2167_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2167_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2103_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)2121_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)2108_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2138_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2167_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2103_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2108_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2121_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2138_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "281d17c3f7c22c5b9d43315b3483547e404079535db7e4fd2f1a64d9f3eb777b",
          "withoutMetadata": "11cbdea29f42b6c5d67956ef6fa853ba730078a30cb10ed42b12fddcc76037a9",
          "linkedWithoutMetadata": "11cbdea29f42b6c5d67956ef6fa853ba730078a30cb10ed42b12fddcc76037a9"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2083_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2083_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2019_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)2037_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)2024_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2054_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2083_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2019_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2024_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2037_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2054_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "a1ea6ecef462458b5ffeee56ed3f99333f0e422cc365308678ad08fa5928eb17",
          "withoutMetadata": "d2c43fdf93294a35f8f1ec26fdcdf302b239e8dc3ecb0c81e6a80844551405f7",
          "linkedWithoutMetadata": "d2c43fdf93294a35f8f1ec26fdcdf302b239e8dc3ecb0c81e6a80844551405f7"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2069_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2069_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)2005_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)2023_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)2010_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2040_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2069_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)2005_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)2010_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2023_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2040_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "c8a0cbcba0d8486c943db3db7f6aa36ec5a67e7af37859b905a62517555ec2d9",
          "withoutMetadata": "076c6a497c8f59de0f8248eeec810ca4a9fb7128c8fce9e8b36b341c300fe043",
          "linkedWithoutMetadata": "076c6a497c8f59de0f8248eeec810ca4a9fb7128c8fce9e8b36b341c300fe043"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1918_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1918_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1854_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1872_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1859_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1889_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1918_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1854_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1859_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1872_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1889_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "b04213ae4e114f0d1b914fc43da4e89f04db6a4e874975b2d761841bef4ac6c3",
          "withoutMetadata": "2d14fda59a372b476e258a863ea859ca10e7b39e5404647126dcb75c5e820de6",
          "linkedWithoutMetadata": "2d14fda59a372b476e258a863ea859ca10e7b39e5404647126dcb75c5e820de6"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1490_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1490_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1426_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1444_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1431_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1461_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1490_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1426_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1431_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1444_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1461_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "b88ffb1189edde08d1cca8adc7b33c2dd1be6f8f33f77dad0d4c3137525fe003",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "7c63086a6c552eee5446257457017fc9f46d9ef54a96969103e1a413a2d5aeb5",
          "withoutMetadata": "e9709245956e5561e29314283f1ddb948e4224d0cfbb762bdd9781638e02115f",
          "linkedWithoutMetadata": "e9709245956e5561e29314283f1ddb948e4224d0cfbb762bdd9781638e02115f"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "5a6874c96bd60a5a5a07d30eeee24dc89112247dbdcd2ff50422c17dcc431c03",
          "withoutMetadata": "3646f429e54f84e54061db54d8e3b89e526b213938199727f231f81ed8332dad",
          "linkedWithoutMetadata": "3646f429e54f84e54061db54d8e3b89e526b213938199727f231f81ed8332dad"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)5417_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)5417_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)5417_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "51861da33a3904f838cf5be4495b18c4718779221b40824fc15201e5dfc76651",
          "withoutMetadata": "a26b3d6a23e98b1b0c86250ced13368667072971bda899782a247e75835f7821",
          "linkedWithoutMetadata": "a26b3d6a23e98b1b0c86250ced13368667072971bda899782a247e75835f7821"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "adc2b025f5e25b0a8d21c8772ff4d354f4443d2571527c53c718a54a956667de",
          "withoutMetadata": "f91c700c5c65bebf3992eb9e60a396a3bca1474c7908840341551da63fac6cb0",
          "linkedWithoutMetadata": "f91c700c5c65bebf3992eb9e60a396a3bca1474c7908840341551da63fac6cb0"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)5681_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)5681_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)5617_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)5635_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)5622_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)5652_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)5681_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)5617_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)5622_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)5635_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)5652_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,bool),(address,uint256),(address,uint256,uint256,uint256,uint256,bool),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "ab70fa4b06b1750b491a6c79b7c515438ad510c47519836f99f6a2c51ff6ab51",
          "withoutMetadata": "12904530428214ae3ad36186cfa51c4523075fe5fd5b9045ee895c599dc1504d",
          "linkedWithoutMetadata": "12904530428214ae3ad36186cfa51c4523075fe5fd5b9045ee895c599dc1504d"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)2050_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)2050_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1986_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)2004_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1991_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)2021_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)2050_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1986_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1991_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)2004_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)2021_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:8",
        "version": {
          "withMetadata": "9ccf20e8624f96188e79a9fc467ca8759a5a8fdb04bfca378ac414444101d2d8",
          "withoutMetadata": "3467c1d518347c47d13d6e3de81cd99b0e8919ee150d209b5aeb0255664ae806",
          "linkedWithoutMetadata": "3467c1d518347c47d13d6e3de81cd99b0e8919ee150d209b5aeb0255664ae806"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "setInverted(address,address,bool)",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            },
            {
              "label": "pairInverted",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "4bcdb493809fea28a8e87ce68e2760167086b2334c456a73634894470e4d19a1",
          "withoutMetadata": "12904530428214ae3ad36186cfa51c4523075fe5fd5b9045ee895c599dc1504d",
          "linkedWithoutMetadata": "12904530428214ae3ad36186cfa51c4523075fe5fd5b9045ee895c599dc1504d"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1403_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1403_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1339_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1357_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1344_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1374_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1403_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1339_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1344_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1357_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1374_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:10",
        "version": {
          "withMetadata": "7e4971f62fe653f7f076a941d963c7a1458e6590ef0eeccf57c83b1cf27c27a1",
          "withoutMetadata": "88050d18dd6d123e3f931190a3778b55eb781cc65b369c8dd6c65e637e4ce3c5",
          "linkedWithoutMetadata": "88050d18dd6d123e3f931190a3778b55eb781cc65b369c8dd6c65e637e4ce3c5"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:11"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1295_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1295_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1231_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1249_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1236_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1266_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1295_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1231_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1236_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1249_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1266_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "18a5b92be4138303b0acfb6d78ec53c4f143c198815165f70cf1f53f085a932c",
          "withoutMetadata": "2842ab47885a36742f4a1aabd870d12700c26eef4c89798af0c16125bd6da1e3",
          "linkedWithoutMetadata": "2842ab47885a36742f4a1aabd870d12700c26eef4c89798af0c16125bd6da1e3"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1156_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1156_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1092_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1110_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1097_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1127_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1156_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1092_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1097_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1110_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1127_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "2c50e05ca020366a294c2fefe5b7f4862f30dede242a7c6beaff62d18f19af8f",
          "withoutMetadata": "69fa53628f2b91f0cb38d96ded2b146d87d833263c5966ac40f0c73ed76b62f8",
          "linkedWithoutMetadata": "69fa53628f2b91f0cb38d96ded2b146d87d833263c5966ac40f0c73ed76b62f8"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1144_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1144_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1080_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1098_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1085_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1115_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1144_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1080_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1085_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1098_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1115_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "952588b4b05583a2ad6e5c332bce564b0cf281669527fb6fd3e964a72b05c357",
          "withoutMetadata": "1c8fda3f112d10a9ac5d7ba4d531446cd8b5e17c847a1e514bc00cb220043f28",
          "linkedWithoutMetadata": "1c8fda3f112d10a9ac5d7ba4d531446cd8b5e17c847a1e514bc00cb220043f28"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)954_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)954_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)890_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)908_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)895_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)925_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)954_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)890_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)895_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)908_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)925_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "92ea09a9bf777272da2c6d83dad64e2441304e5ebe71ae864823df0c1e4de6d8",
          "withoutMetadata": "1fb49826dc4d039f499734e593242123fb5a6611718f8bd600bd8bd8fa9a5a0b",
          "linkedWithoutMetadata": "1fb49826dc4d039f499734e593242123fb5a6611718f8bd600bd8bd8fa9a5a0b"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)862_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)862_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)798_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)816_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)803_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)833_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)862_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)798_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)803_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)816_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)833_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "c3f825743900c2dd19e6e0efa31ae76e6453ec3c9c42474ac1998be4e2e3373e",
          "withoutMetadata": "1a0e9b1f73b60daf316778c6a9db0d73013d109fe8f8b7415502b50f090bdd6f",
          "linkedWithoutMetadata": "1a0e9b1f73b60daf316778c6a9db0d73013d109fe8f8b7415502b50f090bdd6f"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)667_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)667_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)603_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)621_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)608_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)638_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)667_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)603_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)608_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)621_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)638_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "fd0c651640f7616cb98bf89fddba4f91b29b58081cfa9f08e3bae9789467e90d",
          "withoutMetadata": "8f564a313d3eda6797935c0e1afafac1f2823f654a74aef8f45ff551084dc735",
          "linkedWithoutMetadata": "8f564a313d3eda6797935c0e1afafac1f2823f654a74aef8f45ff551084dc735"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)739_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)739_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)675_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)693_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)680_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)710_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)739_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)675_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)680_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)693_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)710_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:8",
        "version": {
          "withMetadata": "1cb339251e2dc0943d0b2538e03aa516adef4beb83946e120ef3d020943cfd60",
          "withoutMetadata": "58c49007d1e84f64759eab386866f75c8c4a077fbcc71605d7defef067d82914",
          "linkedWithoutMetadata": "58c49007d1e84f64759eab386866f75c8c4a077fbcc71605d7defef067d82914"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "setInverted(address,address,bool)",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            },
            {
              "label": "pairInverted",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "0981e93946176c3704c3be05fdd3b6793e4c89234f342c157138d1cd9c872716",
          "withoutMetadata": "86cbb26380c7019d317a80325691776eb05c5648b71f2d685fb2d0b269811941",
          "linkedWithoutMetadata": "86cbb26380c7019d317a80325691776eb05c5648b71f2d685fb2d0b269811941"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1455_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1455_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1391_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1409_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1396_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1426_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1455_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1391_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1396_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1409_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1426_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:8",
        "version": {
          "withMetadata": "b90a72a65f84474d24ab8e5d083677a8aebfb954a348725cd7ae84625d32ae93",
          "withoutMetadata": "f0eac19bf53d5b7bf769e82e95d70a399f11c8123fb13ef16f2c7e50714a1e70",
          "linkedWithoutMetadata": "f0eac19bf53d5b7bf769e82e95d70a399f11c8123fb13ef16f2c7e50714a1e70"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "setInverted(address,address,bool)",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            },
            {
              "label": "pairInverted",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "c499be3544e1d7fca4fa732f3f0662789fefae1c3c85e1021e95f445ab1bcb73",
          "withoutMetadata": "d8d5bb3cd65791a1be74fb1d5d4b1c102c46bcb3577ffb8fdcded0d75c558ec9",
          "linkedWithoutMetadata": "d8d5bb3cd65791a1be74fb1d5d4b1c102c46bcb3577ffb8fdcded0d75c558ec9"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1081_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1081_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1017_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1035_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1022_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1052_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1081_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1017_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1022_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1035_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1052_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "f588c51d0cd14f1d4a0dba261ffcb94ba98acc130aa78959fc2518a962f49e53",
          "withoutMetadata": "d8d5bb3cd65791a1be74fb1d5d4b1c102c46bcb3577ffb8fdcded0d75c558ec9",
          "linkedWithoutMetadata": "d8d5bb3cd65791a1be74fb1d5d4b1c102c46bcb3577ffb8fdcded0d75c558ec9"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1081_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1081_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1017_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1035_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1022_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1052_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1081_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1017_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1022_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1035_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1052_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "11f902635416e01c6cf14ad85d9c8b02b7641e74050c5dcc3a510d705e7fbfad",
          "withoutMetadata": "0be5fa0051fdfad60e279227a904a6b27b13f6ae150f38a8568c4bf78c5621a8",
          "linkedWithoutMetadata": "0be5fa0051fdfad60e279227a904a6b27b13f6ae150f38a8568c4bf78c5621a8"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)939_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)939_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)875_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)893_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)880_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)910_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)939_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)875_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)880_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)893_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)910_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "f65251a85b727a5f63d7542705f883a677a91abe621d10146a5bc410cc1e979d",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "319a6e39541bbd95b2659b4ec814357a0ab498181d648e1d26ef6038ca972791",
          "withoutMetadata": "04016d92a232ee31214d0fd5e21a23b388fbf8d7503566f99477d663730e6eaa",
          "linkedWithoutMetadata": "04016d92a232ee31214d0fd5e21a23b388fbf8d7503566f99477d663730e6eaa"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "bf50d95844bd4c74e6a936a65b1a5911314ab3c4016df3b93ae6dbb78cb8de44",
          "withoutMetadata": "ec2d09dd0c470f205c67c287fb3b02c51e262b728dc1c0b32ba35bd59a0c536d",
          "linkedWithoutMetadata": "ec2d09dd0c470f205c67c287fb3b02c51e262b728dc1c0b32ba35bd59a0c536d"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)4747_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)4747_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)4747_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "9aba3c8a352330e484d2b1d619afb11edb0a8d8917bfab4273e901a25a2863f9",
          "withoutMetadata": "5b242531148eda60a97583aa1b04ff3288202ae5a01894a0a42ade8be58cbbfc",
          "linkedWithoutMetadata": "5b242531148eda60a97583aa1b04ff3288202ae5a01894a0a42ade8be58cbbfc"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "fbae3285de9bb801f9af2ad9a97201ebc2a374f80826465d6eded27c12aafc6b",
          "withoutMetadata": "ee003709cb77eaa90bca24dae13258968b66ad7e7ce3a368406e119ee53239e8",
          "linkedWithoutMetadata": "ee003709cb77eaa90bca24dae13258968b66ad7e7ce3a368406e119ee53239e8"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)5011_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)5011_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)4947_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)4965_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)4952_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)4982_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)5011_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)4947_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)4952_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)4965_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)4982_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "47e0dd606fb806de207c26a6a0dc5e7ebd645063b573b389421af090952889c3",
          "withoutMetadata": "d29dbd2d8ea7627d771bd326bf57c5da57395c11786c8ad45cb54c2ffcef6061",
          "linkedWithoutMetadata": "d29dbd2d8ea7627d771bd326bf57c5da57395c11786c8ad45cb54c2ffcef6061"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1267_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1267_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)1203_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)1221_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)1208_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)1238_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1267_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)1203_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)1208_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)1221_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)1238_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:7",
        "version": {
          "withMetadata": "ad1936a8e876e10d97f102f0b185d718a819e78f5c93e8f8e431f880fd29c2e3",
          "withoutMetadata": "95b39f1cf3c48aedca1994e7af0896315ec1efff42ae905d8c3021ca1115ccd1",
          "linkedWithoutMetadata": "95b39f1cf3c48aedca1994e7af0896315ec1efff42ae905d8c3021ca1115ccd1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "setInverted(address,address,bool)",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:9"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "pairInverted",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPriceSet(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:7",
        "version": {
          "withMetadata": "affdd89eba18c045e014023dbb41c3d9014b18f64b323f3902e2fb45ce1890fb",
          "withoutMetadata": "2cd2408b1a834de363e346a41e3733980f236631fbb01fff9f3565e0c79db2a4",
          "linkedWithoutMetadata": "2cd2408b1a834de363e346a41e3733980f236631fbb01fff9f3565e0c79db2a4"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "setInverted(address,address,bool)",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:9"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "pairInverted",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "f99c3a341dfa28d63137d35c4dff676843871a960cf0e75038969cb005192963",
          "withoutMetadata": "333697274bad6656c8fa113f135a1241e22eefa999421ba357399f0221b68ae9",
          "linkedWithoutMetadata": "333697274bad6656c8fa113f135a1241e22eefa999421ba357399f0221b68ae9"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)1005_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)1005_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)941_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)959_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)946_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)976_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)1005_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)941_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)946_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)959_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)976_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:7",
        "version": {
          "withMetadata": "e5d60c8a4aa52deb895fcc5b619eacce5dd32473d59233c4d50c161e0798c40b",
          "withoutMetadata": "2cd2408b1a834de363e346a41e3733980f236631fbb01fff9f3565e0c79db2a4",
          "linkedWithoutMetadata": "2cd2408b1a834de363e346a41e3733980f236631fbb01fff9f3565e0c79db2a4"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "setInverted(address,address,bool)",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:9"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "pairInverted",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "ad0109a8f4bc3a5886b1d60e445eb05013bf811b92244379dff89a1b41e6d794",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "ace62e144b63a136ce853996bcfc8fd1e647f0aefa361159a05c0ff091b4365c",
          "withoutMetadata": "04016d92a232ee31214d0fd5e21a23b388fbf8d7503566f99477d663730e6eaa",
          "linkedWithoutMetadata": "04016d92a232ee31214d0fd5e21a23b388fbf8d7503566f99477d663730e6eaa"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "43ebada5f36fb5bac5de7e5984a79efeb20cfe04aeddf2ba0dcde3f8fbfd7462",
          "withoutMetadata": "ec2d09dd0c470f205c67c287fb3b02c51e262b728dc1c0b32ba35bd59a0c536d",
          "linkedWithoutMetadata": "ec2d09dd0c470f205c67c287fb3b02c51e262b728dc1c0b32ba35bd59a0c536d"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)4740_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)4740_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)4740_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "4ce682c4c3aa929ce016bd833ef4fb2be4824653cced27bd6b2111d67a551ce0",
          "withoutMetadata": "11e47e2e8e135215b16d86bfc94d79f51c93a12642fe384a0f2f72a0f51119a2",
          "linkedWithoutMetadata": "11e47e2e8e135215b16d86bfc94d79f51c93a12642fe384a0f2f72a0f51119a2"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PositionStorage.sol:PositionStorage": {
        "src": "contracts/PositionStorage.sol:9",
        "version": {
          "withMetadata": "da6a410ab6649fca6791a639c63fcd00d9a9721b2d9e861aef71a43736e894a0",
          "withoutMetadata": "d13f8844eca4e0fe2b7925d5bdf037cf416ee8f14cd4cf86039b3cf67544d71b",
          "linkedWithoutMetadata": "d13f8844eca4e0fe2b7925d5bdf037cf416ee8f14cd4cf86039b3cf67544d71b"
        },
        "inherit": [
          "contracts/interfaces/IPositionStorage.sol:IPositionStorage"
        ],
        "libraries": [],
        "methods": [
          "setFactory(address)",
          "position(uint256)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:10"
            },
            {
              "label": "positions",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_struct(TradePosition)5004_storage)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:12"
            },
            {
              "label": "openingPositionKeys",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:13"
            },
            {
              "label": "positionIndex",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:14"
            },
            {
              "label": "positionKeysByUser",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)",
              "contract": "PositionStorage",
              "src": "contracts/PositionStorage.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(TradePosition)5004_storage)dyn_storage": {
              "label": "struct IPositionStorage.TradePosition[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
              "label": "mapping(address => bytes32[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(BaseToken)4940_storage": {
              "label": "struct IPositionStorage.BaseToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(Collateral)4958_storage": {
              "label": "struct IPositionStorage.Collateral",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "entryPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "liqPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "closePrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "inverted",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(QuoteToken)4945_storage": {
              "label": "struct IPositionStorage.QuoteToken",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Status)4975_storage": {
              "label": "struct IPositionStorage.Status",
              "members": [
                {
                  "label": "isClosed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "isExpired",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "isStoploss",
                  "type": "t_bool",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "isBaseLiquidated",
                  "type": "t_bool",
                  "offset": 3,
                  "slot": "0"
                },
                {
                  "label": "isCollateralLiquidated",
                  "type": "t_bool",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "isRollbacked",
                  "type": "t_bool",
                  "offset": 5,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep1",
                  "type": "t_bool",
                  "offset": 6,
                  "slot": "0"
                },
                {
                  "label": "isClosedManuallyStep2",
                  "type": "t_bool",
                  "offset": 7,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(TradePosition)5004_storage": {
              "label": "struct IPositionStorage.TradePosition",
              "members": [
                {
                  "label": "positionKey",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pool",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseToken",
                  "type": "t_struct(BaseToken)4940_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quoteToken",
                  "type": "t_struct(QuoteToken)4945_storage",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "collateral",
                  "type": "t_struct(Collateral)4958_storage",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "deadline",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "stoplossPrice",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "19"
                },
                {
                  "label": "protocolFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "20"
                },
                {
                  "label": "status",
                  "type": "t_struct(Status)4975_storage",
                  "offset": 0,
                  "slot": "21"
                },
                {
                  "label": "closer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "22"
                }
              ],
              "numberOfBytes": "736"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKey(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "aa272fac8e16795676e2d4eab6f0edb9ebb9a50caca4d06d1f38fd57323d1a4b",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "94576926d6564cc6deb60eae0f858d65f769ac8d52fce9578a405a6327630599",
          "withoutMetadata": "69362bbec93c723a3609a986271ef0b885df205e72655c649ac6e41820c8af02",
          "linkedWithoutMetadata": "69362bbec93c723a3609a986271ef0b885df205e72655c649ac6e41820c8af02"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "c6555578044b9476cfb86e45655e1c69346e76e7a1f49ff4e49c453e77a79daf",
          "withoutMetadata": "ec2d09dd0c470f205c67c287fb3b02c51e262b728dc1c0b32ba35bd59a0c536d",
          "linkedWithoutMetadata": "ec2d09dd0c470f205c67c287fb3b02c51e262b728dc1c0b32ba35bd59a0c536d"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "closeManuallyStep1(bytes32,address)",
          "closeManuallyStep2(bytes32,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)4205_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)4205_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)4205_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "bc7b1d3ed5f571462b391b17f4e2acb2344d0214f821fc99a4dcf58b0023bf12",
          "withoutMetadata": "f3c1fccb901d678a2794ef96ff4562fa36159a3c38347b749fe95095f81f1dac",
          "linkedWithoutMetadata": "f3c1fccb901d678a2794ef96ff4562fa36159a3c38347b749fe95095f81f1dac"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKeys(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "closeManuallyStep1(bytes32)",
          "closeManuallyStep2(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/DEXAggregator.sol:DEXAggregator": {
        "src": "contracts/DEXAggregator.sol:10",
        "version": {
          "withMetadata": "652b61467d1c998e3b1aaaa7f83518d2b7fc5d9a6e372f2d63755cb58408dcff",
          "withoutMetadata": "c848892088092598fada4d1da902c15b4f32c7b11f019e1cde9123cfce5d97a4",
          "linkedWithoutMetadata": "c848892088092598fada4d1da902c15b4f32c7b11f019e1cde9123cfce5d97a4"
        },
        "inherit": [
          "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "()",
          "dexLength()",
          "setManager(address)",
          "addDEX(address,string)",
          "removeDEX(address)",
          "validatePair(address,address,address)",
          "getAmountOut(address,address,address,uint256)",
          "getAmountIn(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)",
          "rescueFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DEXAggregator",
            "src": "contracts/DEXAggregator.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:11"
            },
            {
              "label": "dexes",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:12"
            },
            {
              "label": "dexNames",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:13"
            },
            {
              "label": "dexIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/DEXAggregator.sol:DEXAggregator": {
        "src": "contracts/DEXAggregator.sol:10",
        "version": {
          "withMetadata": "13f50ad2fe7f1ea13cb9e720cba7a66dfe25de2a9b8bd480b65747372eddb2d4",
          "withoutMetadata": "0770a56dba795142e6f0bb90d98397035ad096440f18df4c4b90b6a2a13184ec",
          "linkedWithoutMetadata": "0770a56dba795142e6f0bb90d98397035ad096440f18df4c4b90b6a2a13184ec"
        },
        "inherit": [
          "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address)",
          "dexLength()",
          "setManager(address)",
          "addDEX(address,string)",
          "removeDEX(address)",
          "validatePair(address,address,address)",
          "getAmountOut(address,address,address,uint256)",
          "getAmountIn(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)",
          "rescueFunds(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DEXAggregator",
            "src": "contracts/DEXAggregator.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "manager",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:11"
            },
            {
              "label": "dexes",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:12"
            },
            {
              "label": "dexNames",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:13"
            },
            {
              "label": "dexIndex",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DEXAggregator",
              "src": "contracts/DEXAggregator.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "b97febdd0c06a2bff7f6a93d9d65fd5efc972f5560cc23bb8289a91eb4e0170e",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "eb87d4d8d79a79ee00f8733b826a0dc2b4b0fa93e186f366df82cc00d0652fa1",
          "withoutMetadata": "bc283d87b34edbed80e6ec087c70471c01ac5f881ad5687f2e320e91782f3410",
          "linkedWithoutMetadata": "bc283d87b34edbed80e6ec087c70471c01ac5f881ad5687f2e320e91782f3410"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "4857b7618d48a5fd2fc68d0d9fcf863f87fd454dcd59f33a9f6820b5f8ba0a75",
          "withoutMetadata": "345f2ce635b3eaf343914f425228d508dc56aa60c5361aed7f2c1bb07ff0144f",
          "linkedWithoutMetadata": "345f2ce635b3eaf343914f425228d508dc56aa60c5361aed7f2c1bb07ff0144f"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3878_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3878_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3878_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "a26d8fefed5359dc82d5aa62865fde462367efa003ed76d14120181a1343c981",
          "withoutMetadata": "22da50a742586d3827060fda6ff5052a2719013fa496415f681af73c834155cc",
          "linkedWithoutMetadata": "22da50a742586d3827060fda6ff5052a2719013fa496415f681af73c834155cc"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKeys(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "00e94d481ce42be608eab8d5b9637115419ee9c8b9048c2175c941c21431eee8",
          "withoutMetadata": "bfcbd06be6a77f72144b8c265f1a76deb94db08dfc94de689e53a16dd1d02b72",
          "linkedWithoutMetadata": "bfcbd06be6a77f72144b8c265f1a76deb94db08dfc94de689e53a16dd1d02b72"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2439_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2439_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2439_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "b810cc53cd44d011b589fd5682cfa808be8db3124b05a0573b5d218d488ae292",
          "withoutMetadata": "a381bef473904a59272163bfd1cd62f26bde1cda8731900168ba286d4ce70270",
          "linkedWithoutMetadata": "a381bef473904a59272163bfd1cd62f26bde1cda8731900168ba286d4ce70270"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKeys(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "bd24e4c32287a93dec27c3fd665d42a61ddf582593ac4fcaba3aa2f77edc7515",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "2f3716b004a3fc33deb276a5e199bb979d198d825e141acc54c0f29da313671c",
          "withoutMetadata": "bc283d87b34edbed80e6ec087c70471c01ac5f881ad5687f2e320e91782f3410",
          "linkedWithoutMetadata": "bc283d87b34edbed80e6ec087c70471c01ac5f881ad5687f2e320e91782f3410"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "5792afc55b666ebc6272aea1d4c0b5f6024e6c1e14c41236fa916eaf3c1c214f",
          "withoutMetadata": "f1420505b3c9e9e3302752627cfa8303939b92a7af19088a887e14d003981c19",
          "linkedWithoutMetadata": "f1420505b3c9e9e3302752627cfa8303939b92a7af19088a887e14d003981c19"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3799_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3799_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3799_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "1d727d1878ba5905826cf293579a52d8634774eb326bed7309c4bb3e77e402be",
          "withoutMetadata": "2062443626880c86cb3c9068b5ca5796abde1b8639e50c485cf8481a7e80c01c",
          "linkedWithoutMetadata": "2062443626880c86cb3c9068b5ca5796abde1b8639e50c485cf8481a7e80c01c"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback((bytes32,bool))",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKeys(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "rollback(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)",
          "updateStoplossPrice((bytes32,uint256))",
          "updateDeadline((bytes32,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "5aa03c82489812b8830231bfc501e406d88d4f1c46b0321ce3907d324909c512",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "b8aefe5383ea68619e09b92068b2ca34ebd8433a3a53f90e9527e2770528e98b",
          "withoutMetadata": "75d9ce9ef571cb433d7dd8014ce717b63e7f5c2bebaab1e1a8996e393dbcce05",
          "linkedWithoutMetadata": "75d9ce9ef571cb433d7dd8014ce717b63e7f5c2bebaab1e1a8996e393dbcce05"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:13",
        "version": {
          "withMetadata": "e491871c982b31b1063a745bf18782311c123cc5dbb9ef96a61fed9ee84ecf70",
          "withoutMetadata": "3a578489452485acb95ef1636e78ee0ee80a8fd8ead2832dc9225a55efd27558",
          "linkedWithoutMetadata": "3a578489452485acb95ef1636e78ee0ee80a8fd8ead2832dc9225a55efd27558"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3661_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3661_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3661_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "51c0fccd57632de42854a42969cea4da4cb0b0fc7b8cd23a2a32c07367e854a4",
          "withoutMetadata": "f68843199f3eabacbf805a9e9eb2d3a4dc813addbf6d73d6e64b22fd62b15cdc",
          "linkedWithoutMetadata": "f68843199f3eabacbf805a9e9eb2d3a4dc813addbf6d73d6e64b22fd62b15cdc"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes,bool))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "positionByKey(bytes32)",
          "openingPositionKeys(uint256)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)",
          "updateCloseValues(bytes32,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:11",
        "version": {
          "withMetadata": "45073f184d28ebb73a233c761a24839b8e10610d2c33102e82e3b9257b5851d9",
          "withoutMetadata": "c21b719314c0f034bfdd0e0bf6bb83d6b0a272669c375c052d5c3fb6ba381fee",
          "linkedWithoutMetadata": "c21b719314c0f034bfdd0e0bf6bb83d6b0a272669c375c052d5c3fb6ba381fee"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:14"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:15"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)1713_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)1713_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)1713_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "75e9f7187e87d515dd96f6c9ab761b3fde59d7c546b7cd6060c102a3b25f9324",
          "withoutMetadata": "b2d13e18ea56e196b94a0e4a92693807372efa66b812a3fdc2f06fa50318d1eb",
          "linkedWithoutMetadata": "b2d13e18ea56e196b94a0e4a92693807372efa66b812a3fdc2f06fa50318d1eb"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "01eeade16be61124155472e3be7cfb6c1d53dab1d024436039b2a67b6e3893cb",
          "withoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161",
          "linkedWithoutMetadata": "d79c0a259f730c6399452357e3e26ee398d759f0a56aa8340282fbbeed76b161"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setOperator(address,bool)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "588295eecaf6cf81669b30c44540ef0b02cd09fb460e330fd0a3c0672ab5c20f",
          "withoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0",
          "linkedWithoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:11",
        "version": {
          "withMetadata": "44804a16bbf3ea056efdc4fbe6e0cc5ed9aa211547361073a7c5ebd1aae4e275",
          "withoutMetadata": "c21b719314c0f034bfdd0e0bf6bb83d6b0a272669c375c052d5c3fb6ba381fee",
          "linkedWithoutMetadata": "c21b719314c0f034bfdd0e0bf6bb83d6b0a272669c375c052d5c3fb6ba381fee"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:14"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:15"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2401_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2401_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2401_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "322652817393ecd35fc40b00e3269ca6b49850bbc9f203592c72fa23f0b8057b",
          "withoutMetadata": "9f8fe8e4581993a666c7f87054d9fbe27a02f4f8d1a8f3312d676874e34c8f03",
          "linkedWithoutMetadata": "9f8fe8e4581993a666c7f87054d9fbe27a02f4f8d1a8f3312d676874e34c8f03"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "f6845b74575dc28d3c6a0ded62eaa92e5270367162941e0f59eee3e9badceb7c",
          "withoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0",
          "linkedWithoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:11",
        "version": {
          "withMetadata": "299a33a2fd59609a2b0f7da2b76f876aefab331e68e207089255a9e4eff43964",
          "withoutMetadata": "c21b719314c0f034bfdd0e0bf6bb83d6b0a272669c375c052d5c3fb6ba381fee",
          "linkedWithoutMetadata": "c21b719314c0f034bfdd0e0bf6bb83d6b0a272669c375c052d5c3fb6ba381fee"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:14"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:15"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)1695_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)1695_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)1695_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PoolDeployer.sol:PoolDeployer": {
        "src": "contracts/PoolDeployer.sol:7",
        "version": {
          "withMetadata": "d4adc23758ae2c86723590e8a6af7c694b60dc7ed812781016a9e09d84185365",
          "withoutMetadata": "84d08a1b84779d0f00766bcc03474cb5f0a48a513913a996d46d22104dbe5cb6",
          "linkedWithoutMetadata": "84d08a1b84779d0f00766bcc03474cb5f0a48a513913a996d46d22104dbe5cb6"
        },
        "inherit": [
          "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "setFactory(address)",
          "poolInitCodeHash()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PoolDeployer",
            "src": "contracts/PoolDeployer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "contracts/PoolDeployer.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PoolDeployer",
              "src": "contracts/PoolDeployer.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "e0ed3f469a2da648b37fe4131f32b5ee2f6521b853c9ab7fc848b5134c13d2ce",
          "withoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0",
          "linkedWithoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "658746e6e9ab98073379d4303a7a6c4f6c4a9bf0911ebf07f20cbd7f3862961a",
          "withoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c",
          "linkedWithoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:12",
        "version": {
          "withMetadata": "8ef043d1bd91d9f3249cfa547f4e8fbb8861b277321b52f4f8357e49c2d78f1b",
          "withoutMetadata": "560c7a3226a48eb7730c8f89ec4dd83ec484528d332addd39a59352233436a5c",
          "linkedWithoutMetadata": "560c7a3226a48eb7730c8f89ec4dd83ec484528d332addd39a59352233436a5c"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:15"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)3026_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)3026_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)3026_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool))",
          "canLiquidate(bytes32)",
          "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,(bool,bool,bool,bool,bool),address))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "60b12d959d07a7f3f7980fd0de928f9ffb5bf3a11f52d5929567f24899c095b2",
          "withoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0",
          "linkedWithoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "68f20d30e370539860d091b7c30427553734dabd7d0ee12f93fd9aa52bc0bc4c",
          "withoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c",
          "linkedWithoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:12",
        "version": {
          "withMetadata": "2c3c50c569dfa9af5fc386477495c21e0969a273462bac7686c583c78155334c",
          "withoutMetadata": "73263d009c024e40f2fc0f0a5557fd65502a76a21d46947e8dd02d8c4f6bea25",
          "linkedWithoutMetadata": "73263d009c024e40f2fc0f0a5557fd65502a76a21d46947e8dd02d8c4f6bea25"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:15"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2702_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2702_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2702_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "dfeff7ab82c1ee2737f05868ab3b4a0b0ddaaff99fa8d8832a0bddf6d05968c5",
          "withoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0",
          "linkedWithoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "77bfef4ae0c98c8f07cc048ff1769f844b17501300c699b4345f9e573c27b7f6",
          "withoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c",
          "linkedWithoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:12",
        "version": {
          "withMetadata": "3a1716a451bc838d7f1b2fa9c24340cf34ce4526f686369f487833d3f663d2f1",
          "withoutMetadata": "72ca548459ffc88316132a9184a59fcb6d71bf14927c5538be0b5a15741c2d55",
          "linkedWithoutMetadata": "72ca548459ffc88316132a9184a59fcb6d71bf14927c5538be0b5a15741c2d55"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:15"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "latestFeeTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2710_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2710_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2710_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "latestFeeTime()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "80b13a9f27b0c437e3b68184b4ca056cc46884d512b6d702301482084430ec4e",
          "withoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0",
          "linkedWithoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "1029023654f47ca8a7c00e4f50788cd9e58d83449d66c2a686740263d8c5ff7d",
          "withoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c",
          "linkedWithoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:12",
        "version": {
          "withMetadata": "15aca810d270286a4182a08349d684a145d06b4db806ad59a6d9e573426b3f92",
          "withoutMetadata": "4c911a509274914fa907d0cff50237a007edc2fdd1638c73808b29a2fdd57b8a",
          "linkedWithoutMetadata": "4c911a509274914fa907d0cff50237a007edc2fdd1638c73808b29a2fdd57b8a"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:15"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "latestFeeTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2733_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2733_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2733_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "latestTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "latestFeeTime()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256,bool)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "4d9bda265dfbee8188cdca389c3be4bcaad0e97e490c052f81a2306ad362f1a7",
          "withoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0",
          "linkedWithoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:12",
        "version": {
          "withMetadata": "848699b4e5cab62ec4991e0281c2ccb0d0c71be27851ad50c33fa83d834a5a7f",
          "withoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c",
          "linkedWithoutMetadata": "2c148f7bbab32d777308ec9cb933e84b623ace8a5657dd049c0902b2c6f1d20c"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:13"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:14"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:15"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:12",
        "version": {
          "withMetadata": "bfcd08dc1947e8290cc731ab867ee85010e9dad74c960d73dae4c65e2b65dd1f",
          "withoutMetadata": "5b9356c6c27835914e924b9555efed5abb3c12466b788b7f2a61dd6bad9f0fa0",
          "linkedWithoutMetadata": "5b9356c6c27835914e924b9555efed5abb3c12466b788b7f2a61dd6bad9f0fa0"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool",
          "contracts/base/Lockable.sol:Lockable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:15"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:18"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "latestFeeTime",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:29"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2631_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2631_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2631_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pendingFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "latestTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "latestFeeTime()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256,bool)",
          "burn(address,uint256)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "e199af091de9cbf2499b0a37cc532fa4e0703994431a6f77f731d76c76a14f76",
          "withoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0",
          "linkedWithoutMetadata": "253b39852f14f3b1576ccffc09b9a782e2dae2e68c3479e9e21873917c79b4f0"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "setPoolBaseTokens(address,address[],bool[])",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:13",
        "version": {
          "withMetadata": "44e0b53c33ac45eea8f467b18e115cca8c83ddc2e00fd2b77baa977ecc382d55",
          "withoutMetadata": "21f7aa4e284a3446f2421923572f06dfaea2cd57107fae3f441e7591f8b50e7b",
          "linkedWithoutMetadata": "21f7aa4e284a3446f2421923572f06dfaea2cd57107fae3f441e7591f8b50e7b"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:20"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Pool.sol:Pool": {
        "src": "contracts/Pool.sol:10",
        "version": {
          "withMetadata": "10632b3c462fa4fa88404747242a67596a74364d52b39b03d4fca20953dbd60f",
          "withoutMetadata": "be07641ec5f5cfba1401a5fb30905e93484d1c74333cb452a417804dfaeec997",
          "linkedWithoutMetadata": "be07641ec5f5cfba1401a5fb30905e93484d1c74333cb452a417804dfaeec997"
        },
        "inherit": [
          "contracts/interfaces/IPool.sol:IPool"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath"
        ],
        "methods": [
          "initialize(address,address,uint256)",
          "()",
          "availableLiquidity()",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "burn(address,uint256)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "factory",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:13"
            },
            {
              "label": "WETH",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:14"
            },
            {
              "label": "quoteToken",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Pool",
              "src": "contracts/Pool.sol:15"
            },
            {
              "label": "precision",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:16"
            },
            {
              "label": "interest",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:17"
            },
            {
              "label": "quoteReserve",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:19"
            },
            {
              "label": "quoteInDebt",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:20"
            },
            {
              "label": "accFee",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:21"
            },
            {
              "label": "accProtocolFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:22"
            },
            {
              "label": "accFeePerShare",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:23"
            },
            {
              "label": "latestFeeTime",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Pool",
              "src": "contracts/Pool.sol:24"
            },
            {
              "label": "tradeableBaseToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:25"
            },
            {
              "label": "baseReserve",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:26"
            },
            {
              "label": "collateralReserve",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:27"
            },
            {
              "label": "liquidityPosition",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_struct(LiquidityPosition)2041_storage)",
              "contract": "Pool",
              "src": "contracts/Pool.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(LiquidityPosition)2041_storage)": {
              "label": "mapping(address => struct IPool.LiquidityPosition)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidityPosition)2041_storage": {
              "label": "struct IPool.LiquidityPosition",
              "members": [
                {
                  "label": "liquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "feeDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "latestTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "quoteToken()",
          "precision()",
          "interest()",
          "quoteReserve()",
          "quoteInDebt()",
          "accFee()",
          "accProtocolFee()",
          "accFeePerShare()",
          "latestFeeTime()",
          "tradeableBaseToken(address)",
          "baseReserve(address)",
          "collateralReserve(address)",
          "availableLiquidity()",
          "liquidityPosition(address)",
          "claimableFee(address)",
          "setInterest(uint256)",
          "setBaseTokens(address[],bool[])",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "burn(address,uint256)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "621e81a296b69985fe90639533bcf2c38a60536c88d4ea3417cd29d6484d898c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:13",
        "version": {
          "withMetadata": "478011fa159f5a1bdeac6ad43bda1fc5ffc64f6129d7ef6e50c4c63366c189ed",
          "withoutMetadata": "21f7aa4e284a3446f2421923572f06dfaea2cd57107fae3f441e7591f8b50e7b",
          "linkedWithoutMetadata": "21f7aa4e284a3446f2421923572f06dfaea2cd57107fae3f441e7591f8b50e7b"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:20"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "quoteReserve()",
          "accFee()",
          "accFeePerShare()",
          "latestFeeTime()",
          "accProtocolFee()",
          "quoteInDebt()",
          "interest()",
          "baseTokens(uint256)",
          "baseTokenLength()",
          "baseTokenIndex(address)",
          "availableLiquidity()",
          "getLiquidityPosition(bytes32)",
          "claimableFee(bytes32)",
          "setBaseTokens(address[],bool[])",
          "setInterest(uint256)",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "burn(address,uint256)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "621e81a296b69985fe90639533bcf2c38a60536c88d4ea3417cd29d6484d898c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:13",
        "version": {
          "withMetadata": "b9ad5d842bb50c99fb802c006072e0b4d324c3e4b89e150ff3c8852d934cbacf",
          "withoutMetadata": "21f7aa4e284a3446f2421923572f06dfaea2cd57107fae3f441e7591f8b50e7b",
          "linkedWithoutMetadata": "21f7aa4e284a3446f2421923572f06dfaea2cd57107fae3f441e7591f8b50e7b"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:20"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "quoteReserve()",
          "accFee()",
          "accFeePerShare()",
          "latestFeeTime()",
          "accProtocolFee()",
          "quoteInDebt()",
          "interest()",
          "baseTokens(uint256)",
          "baseTokenLength()",
          "baseTokenIndex(address)",
          "availableLiquidity()",
          "getLiquidityPosition(bytes32)",
          "claimableFee(bytes32)",
          "setBaseTokens(address[],bool[])",
          "setInterest(uint256)",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "burn(address,uint256)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "621e81a296b69985fe90639533bcf2c38a60536c88d4ea3417cd29d6484d898c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase": {
        "src": "@chainlink/contracts/src/v0.8/AutomationBase.sol:4",
        "version": {
          "withMetadata": "7be0e20c4302b40aae87af8f27b7f50fc08dfa5372a42dcfeb73cba7d3fc74fa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:AutomationCompatible": {
        "src": "@chainlink/contracts/src/v0.8/AutomationCompatible.sol:7",
        "inherit": [
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface",
          "@chainlink/contracts/src/v0.8/AutomationBase.sol:AutomationBase"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "8ea82cff072170ecd4ca3875ff02d10de85c29fba843d7a4d96ffdd83b0e670d",
          "withoutMetadata": "9c6d717d0e41d700f8a57b3201d22e6e2a064a5eb87af2f92ffaf31c73f75861",
          "linkedWithoutMetadata": "9c6d717d0e41d700f8a57b3201d22e6e2a064a5eb87af2f92ffaf31c73f75861"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/Monitor.sol:Monitor": {
        "src": "contracts/Monitor.sol:13",
        "version": {
          "withMetadata": "58b55a09ceb25d2c5ed68365142cae06eca8d204d3b0e82b7edc77a562a39681",
          "withoutMetadata": "21f7aa4e284a3446f2421923572f06dfaea2cd57107fae3f441e7591f8b50e7b",
          "linkedWithoutMetadata": "21f7aa4e284a3446f2421923572f06dfaea2cd57107fae3f441e7591f8b50e7b"
        },
        "inherit": [
          "contracts/interfaces/ICloseCallback.sol:ICloseCallback",
          "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol:AutomationCompatibleInterface"
        ],
        "libraries": [
          "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath",
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "setManager(address)",
          "setKeeper(address)",
          "setFactory(address)",
          "setBatchSize(uint256)",
          "setMonitorSize(uint256)",
          "setStartIndex(uint256)",
          "closeCallback(address,address,address,uint256,bytes)",
          "checkUpkeep(bytes)",
          "performUpkeep(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Monitor",
            "src": "contracts/Monitor.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:16"
            },
            {
              "label": "keeper",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:17"
            },
            {
              "label": "factory",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:18"
            },
            {
              "label": "batchSize",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:19"
            },
            {
              "label": "monitorSize",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:20"
            },
            {
              "label": "startIndex",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Monitor",
              "src": "contracts/Monitor.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ICloseCallback.sol:ICloseCallback": {
        "src": "contracts/interfaces/ICloseCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "closeCallback(address,address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "quoteReserve()",
          "accFee()",
          "accFeePerShare()",
          "latestFeeTime()",
          "accProtocolFee()",
          "quoteInDebt()",
          "interest()",
          "baseTokens(uint256)",
          "baseTokenLength()",
          "baseTokenIndex(address)",
          "availableLiquidity()",
          "getLiquidityPosition(bytes32)",
          "claimableFee(bytes32)",
          "setBaseTokens(address[],bool[])",
          "setInterest(uint256)",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "burn(address,uint256)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close((bytes32,bytes,bytes))",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "621e81a296b69985fe90639533bcf2c38a60536c88d4ea3417cd29d6484d898c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/UserStorage.sol:UserStorage": {
        "src": "contracts/UserStorage.sol:6",
        "version": {
          "withMetadata": "9efb8255a90cf382cadc4e092a4f15134d7e17c3c8a3a364427323b466d3c2d8",
          "withoutMetadata": "a5a817d3feabd5b3bd55b7fc85da175072baf6b9b650ba7c5c3c3e76adad883d",
          "linkedWithoutMetadata": "a5a817d3feabd5b3bd55b7fc85da175072baf6b9b650ba7c5c3c3e76adad883d"
        },
        "inherit": [
          "contracts/interfaces/IUserStorage.sol:IUserStorage"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setOperators(address[],bool[])",
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UserStorage",
            "src": "contracts/UserStorage.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:7"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:8"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(User)331_storage)",
              "contract": "UserStorage",
              "src": "contracts/UserStorage.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(User)331_storage)": {
              "label": "mapping(address => struct IUserStorage.User)",
              "numberOfBytes": "32"
            },
            "t_struct(User)331_storage": {
              "label": "struct IUserStorage.User",
              "members": [
                {
                  "label": "id",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "ref",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "membershipLevel",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/Factory.sol:Factory": {
        "src": "contracts/Factory.sol:8",
        "version": {
          "withMetadata": "1d1deca3b02bb88fbe56fe9c58af1ffe22e137043737e0e67cd5b3fd8303316a",
          "withoutMetadata": "9c6d717d0e41d700f8a57b3201d22e6e2a064a5eb87af2f92ffaf31c73f75861",
          "linkedWithoutMetadata": "9c6d717d0e41d700f8a57b3201d22e6e2a064a5eb87af2f92ffaf31c73f75861"
        },
        "inherit": [
          "contracts/interfaces/IFactory.sol:IFactory"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "poolLength()",
          "interest(address)",
          "setManager(address)",
          "setUserStorage(address)",
          "setPriceFeed(address)",
          "setDEXAggregator(address)",
          "setProtocolFeeTo(address)",
          "setProtocolFeeRate(uint256)",
          "setMinQuoteRate(uint256)",
          "setManualExpiration(uint256)",
          "setMUT(address,uint256)",
          "setBaseTokenLT(address,uint256)",
          "setCollateralLT(address,uint256)",
          "setPoolInterest(address,uint256)",
          "createPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Factory",
            "src": "contracts/Factory.sol:53"
          },
          {
            "kind": "state-variable-immutable",
            "name": "poolDeployer",
            "src": "contracts/Factory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "positionStorage",
            "src": "contracts/Factory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:11"
            },
            {
              "label": "userStorage",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:12"
            },
            {
              "label": "priceFeed",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:13"
            },
            {
              "label": "dexAggregator",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:14"
            },
            {
              "label": "protocolFeeTo",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "Factory",
              "src": "contracts/Factory.sol:15"
            },
            {
              "label": "protocolFeeRate",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:16"
            },
            {
              "label": "minQuoteRate",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:17"
            },
            {
              "label": "manualExpiration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Factory",
              "src": "contracts/Factory.sol:18"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Factory",
              "src": "contracts/Factory.sol:19"
            },
            {
              "label": "operator",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:20"
            },
            {
              "label": "poolIndex",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:21"
            },
            {
              "label": "poolByQuoteToken",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_address)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:22"
            },
            {
              "label": "mut",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:23"
            },
            {
              "label": "baseTokenLT",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:24"
            },
            {
              "label": "collateralLT",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Factory",
              "src": "contracts/Factory.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeeRate()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "operator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "mut(address)",
          "baseTokenLT(address)",
          "collateralLT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "quoteReserve()",
          "accFee()",
          "accFeePerShare()",
          "latestFeeTime()",
          "accProtocolFee()",
          "quoteInDebt()",
          "interest()",
          "baseTokens(uint256)",
          "baseTokenLength()",
          "baseTokenIndex(address)",
          "availableLiquidity()",
          "getLiquidityPosition(bytes32)",
          "claimableFee(bytes32)",
          "setBaseTokens(address[],bool[])",
          "setInterest(uint256)",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "burn(address,uint256)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close(bytes32)",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/interfaces/IPool.sol:IPool": {
        "src": "contracts/interfaces/IPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "quoteToken()",
          "precision()",
          "quoteReserve()",
          "accFee()",
          "accFeePerShare()",
          "latestFeeTime()",
          "accProtocolFee()",
          "quoteInDebt()",
          "interest()",
          "baseTokens(uint256)",
          "baseTokenLength()",
          "baseTokenIndex(address)",
          "availableLiquidity()",
          "getLiquidityPosition(bytes32)",
          "claimableFee(bytes32)",
          "setBaseTokens(address[],bool[])",
          "setInterest(uint256)",
          "mint(address,uint256,bytes)",
          "collect(address,uint256)",
          "burn(address,uint256)",
          "open((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "close(bytes32)",
          "rollback(bytes32)",
          "updateStoplossPrice(bytes32,uint256)",
          "updateDeadline(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeePercent()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "isOperator(address)",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "collaterals(uint256)",
          "collateralLength()",
          "collateralLT(address)",
          "baseTokenLT(address)",
          "baseTokenMUT(address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPositionStorage.sol:IPositionStorage": {
        "src": "contracts/interfaces/IPositionStorage.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "position(uint256)",
          "positionIndex(bytes32)",
          "openingPositionKeys(uint256)",
          "openingPositionKeyIndex(bytes32)",
          "positionLength()",
          "openingPositionLength()",
          "userPositionLength(address)",
          "positionKeyByUser(address,uint256)",
          "getMinCollateralAmount(address,address,address,uint256)",
          "getQuoteAmountRange(address,address,address,uint256,uint256)",
          "previewTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "canLiquidate(bytes32)",
          "openTradePosition((address,address,address,uint256,uint256,uint256,uint256,uint256))",
          "updateStatus(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:7",
        "version": {
          "withMetadata": "7e3c69dd7d502d858f623d9feebaa498dfbde82acf715d5834afdefc5049818b",
          "withoutMetadata": "9b3e2ef5fa6ce921e096956a3d06329e3743ebb10e1cd953355c10f9a8382e03",
          "linkedWithoutMetadata": "9b3e2ef5fa6ce921e096956a3d06329e3743ebb10e1cd953355c10f9a8382e03"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "setInverted(address,address,bool)",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:9"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            },
            {
              "label": "pairInverted",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:FixedPoint96": {
        "src": "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:7",
        "version": {
          "withMetadata": "f4ef3f7828755ee8d115f079e4860b7ee9c6a028e028d8b1fcdcf8d770e76530",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UniswapV3PriceFeedIntegration.sol:UniswapV3PriceFeedIntegration": {
        "src": "contracts/UniswapV3PriceFeedIntegration.sol:10",
        "version": {
          "withMetadata": "4aabedac9a9d8a65ad474171d718bd384c948e3d66502d5d062e11ef787e7112",
          "withoutMetadata": "b1e8ac0b8bf0b6e98be39ebad8900332e9f4e356f173423facbb927fd14c56d0",
          "linkedWithoutMetadata": "b1e8ac0b8bf0b6e98be39ebad8900332e9f4e356f173423facbb927fd14c56d0"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:FixedPoint96"
        ],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3PriceFeedIntegration",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3PriceFeedIntegration",
              "src": "contracts/UniswapV3PriceFeedIntegration.sol:13"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:FixedPoint96": {
        "src": "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:7",
        "version": {
          "withMetadata": "f4ef3f7828755ee8d115f079e4860b7ee9c6a028e028d8b1fcdcf8d770e76530",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UniswapV3PriceFeedIntegration.sol:UniswapV3PriceFeedIntegration": {
        "src": "contracts/UniswapV3PriceFeedIntegration.sol:10",
        "version": {
          "withMetadata": "42ce835f9b6b0138bcfd152cb255dd5e1a9924e2c398fbd2f4834e6650dff168",
          "withoutMetadata": "4d50a46004030ca410b92d7fe279492dcdf1cafad4605b887d991075503c8e05",
          "linkedWithoutMetadata": "4d50a46004030ca410b92d7fe279492dcdf1cafad4605b887d991075503c8e05"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:FixedPoint96"
        ],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3PriceFeedIntegration",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3PriceFeedIntegration",
              "src": "contracts/UniswapV3PriceFeedIntegration.sol:13"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC721Permit.sol:IERC721Permit": {
        "src": "contracts/interfaces/IERC721Permit.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "PERMIT_TYPEHASH()",
          "DOMAIN_SEPARATOR()",
          "permit(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IFactory.sol:IFactory": {
        "src": "contracts/interfaces/IFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "poolDeployer()",
          "positionStorage()",
          "userStorage()",
          "priceFeed()",
          "dexAggregator()",
          "protocolFeePercent()",
          "protocolFeeTo()",
          "minQuoteRate()",
          "manualExpiration()",
          "pools(uint256)",
          "poolLength()",
          "poolIndex(address)",
          "poolByQuoteToken(address)",
          "collaterals(uint256)",
          "collateralLength()",
          "collateralLT(address)",
          "baseTokenMUT(address,address)",
          "interest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMintCallback.sol:IMintCallback": {
        "src": "contracts/interfaces/IMintCallback.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintCallback(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IMulticall.sol:IMulticall": {
        "src": "contracts/interfaces/IMulticall.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungiblePositionManager.sol:INonfungiblePositionManager": {
        "src": "contracts/interfaces/INonfungiblePositionManager.sol:13",
        "inherit": [
          "contracts/interfaces/IERC721Permit.sol:IERC721Permit",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState",
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments",
          "contracts/interfaces/IMintCallback.sol:IMintCallback"
        ],
        "libraries": [],
        "methods": [
          "positions(uint256)",
          "mint((address,uint256,address,uint256))",
          "increaseLiquidity((uint256,uint256,uint256))",
          "decreaseLiquidity((uint256,uint256,address,uint256))",
          "collect((uint256[],address))",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:INonfungibleTokenPositionDescriptor": {
        "src": "contracts/interfaces/INonfungibleTokenPositionDescriptor.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokenURI(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryImmutableState.sol:IPeripheryImmutableState": {
        "src": "contracts/interfaces/IPeripheryImmutableState.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH9()",
          "poolDeployer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments": {
        "src": "contracts/interfaces/IPeripheryPayments.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unwrapWETH9(uint256,address)",
          "refundETH()",
          "sweepToken(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPeripheryPaymentsWithFee.sol:IPeripheryPaymentsWithFee": {
        "src": "contracts/interfaces/IPeripheryPaymentsWithFee.sol:8",
        "inherit": [
          "contracts/interfaces/IPeripheryPayments.sol:IPeripheryPayments"
        ],
        "libraries": [],
        "methods": [
          "unwrapWETH9WithFee(uint256,address,uint256,address)",
          "sweepTokenWithFee(address,uint256,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPoolDeployer.sol:IPoolDeployer": {
        "src": "contracts/interfaces/IPoolDeployer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "deployPool(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/ISelfPermit.sol:ISelfPermit": {
        "src": "contracts/interfaces/ISelfPermit.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)",
          "selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUserStorage.sol:IUserStorage": {
        "src": "contracts/interfaces/IUserStorage.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getUserInfo(address)",
          "discountedFee(address,uint256)",
          "canUpdateDeadline(address)",
          "updateRef(address,address)",
          "updateMembership(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC1271.sol:IERC1271": {
        "src": "contracts/interfaces/external/IERC1271.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IERC20PermitAllowed.sol:IERC20PermitAllowed": {
        "src": "contracts/interfaces/external/IERC20PermitAllowed.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/external/IWETH9.sol:IWETH9": {
        "src": "contracts/interfaces/external/IWETH9.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback": {
        "src": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV3SwapCallback(int256,int256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:ISwapRouter": {
        "src": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol:9",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol:IUniswapV3SwapCallback"
        ],
        "libraries": [],
        "methods": [
          "exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactInput((bytes,address,uint256,uint256,uint256))",
          "exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))",
          "exactOutput((bytes,address,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UniswapV3DEXIntegration.sol:UniswapV3Integration": {
        "src": "contracts/UniswapV3DEXIntegration.sol:13",
        "version": {
          "withMetadata": "532657a072fc8986eb6c3ec47eac69657c11e6c464e529271a1acfddaf310687",
          "withoutMetadata": "4b55ceedeeb554e53bbb0eeb3377b22db63d8f84097a3b9b2b044ec36d13a30a",
          "linkedWithoutMetadata": "4b55ceedeeb554e53bbb0eeb3377b22db63d8f84097a3b9b2b044ec36d13a30a"
        },
        "inherit": [
          "contracts/base/Lockable.sol:Lockable",
          "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration"
        ],
        "libraries": [
          "contracts/libraries/TransferHelper.sol:TransferHelper"
        ],
        "methods": [
          "(address,address,address)",
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3Integration",
            "src": "contracts/UniswapV3DEXIntegration.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/UniswapV3DEXIntegration.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "quoter",
            "src": "contracts/UniswapV3DEXIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "router",
            "src": "contracts/UniswapV3DEXIntegration.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            },
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3Integration",
              "src": "contracts/UniswapV3DEXIntegration.sol:17"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXAggregator.sol:IDEXAggregator": {
        "src": "contracts/interfaces/IDEXAggregator.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dexes(uint256)",
          "dexNames(uint256)",
          "dexIndex(address)",
          "dexLength()",
          "validatePair(address,address,address)",
          "getAmountIn(address,address,address,uint256)",
          "getAmountOut(address,address,address,uint256)",
          "swap(address,address,address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IDEXIntegration.sol:IDEXIntegration": {
        "src": "contracts/interfaces/IDEXIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "validatePair(address,address)",
          "getAmountOut(address,address,uint256)",
          "getAmountIn(address,address,uint256)",
          "swap(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IUniswapV3StaticQuoter.sol:IUniswapV3StaticQuoter": {
        "src": "contracts/interfaces/IUniswapV3StaticQuoter.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "quoteExactInput(bytes,uint256)",
          "quoteExactInputSingle((address,address,uint256,uint24,uint160))",
          "quoteExactOutput(bytes,uint256)",
          "quoteExactOutputSingle((address,address,uint256,uint24,uint160))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/TokenReader.sol:TokenReader": {
        "src": "contracts/TokenReader.sol:7",
        "version": {
          "withMetadata": "52212c71b527901f7ed2b87d48831b9f07dcd926905c390834a4bb7d20c65844",
          "withoutMetadata": "0be53cc073628c4c85649aa0069c1ae0af9b142c4d826ffea9e4d244edf0a446",
          "linkedWithoutMetadata": "0be53cc073628c4c85649aa0069c1ae0af9b142c4d826ffea9e4d244edf0a446"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenSupplies(address[])",
          "getTokenDecimals(address[])",
          "getTokensBalance(address,address[])",
          "getTokenBalances(address[],address)",
          "getTokensAllowance(address,address[],address)",
          "getTokenAllowances(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BancorConverterRegistry.sol:BancorConverterRegistry": {
        "src": "contracts/base/BancorConverterRegistry.sol:19",
        "version": {
          "withMetadata": "1a995fa9a87f1aef582e6f09a348162d62afb54ea7b59e39204ed1365ff93c8d",
          "withoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4",
          "linkedWithoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4"
        },
        "inherit": [
          "contracts/base/Utils.sol:Utils",
          "contracts/base/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "()",
          "tokenCount()",
          "converterCount(address)",
          "converterAddress(address,uint32)",
          "tokenAddress(address)",
          "registerConverter(address,address)",
          "unregisterConverter(address,uint32)",
          "blockStamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:5"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            },
            {
              "label": "tokensRegistered",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:20"
            },
            {
              "label": "tokensToConverters",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:21"
            },
            {
              "label": "convertersToTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:22"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:4",
        "version": {
          "withMetadata": "6d4f46fff663daa38194e1cdb826c0fb723a7d27885192f1ae4dfcad41ab41bd",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "e0135d0b3045d3147a2d8665c9221c8099f9319bbf6089f7a873c4966218b5cb",
          "withoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960",
          "linkedWithoutMetadata": "bf79cdc6f3e050f479ad06b9de291ea89ae85ec498d43a95d1b01b38abc4a960"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Owned.sol:Owned": {
        "src": "contracts/base/Owned.sol:4",
        "version": {
          "withMetadata": "93af4148f55906b4f83e6c2eeee5574e4a11d315b096e92bbe4ffa75fbf8d016",
          "withoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e",
          "linkedWithoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/base/Owned.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:5"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Utils.sol:Utils": {
        "src": "contracts/base/Utils.sol:5",
        "version": {
          "withMetadata": "1319214db52a256fca678a8aace0fabd358c97435d582ffe66a9800a7cfe378f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "b5f40a700deb6ba895f478369383a8ff71ba1fe893f5f345b56d447bc755a636",
          "withoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d",
          "linkedWithoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BancorConverterRegistry.sol:BancorConverterRegistry": {
        "src": "contracts/base/BancorConverterRegistry.sol:20",
        "version": {
          "withMetadata": "1ccd45381cd8815d4c7c2ecb2e8976d7871cdb1f5249ea23e252eadcafeb985c",
          "withoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4",
          "linkedWithoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4"
        },
        "inherit": [
          "contracts/base/Utils.sol:Utils",
          "contracts/base/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "()",
          "tokenCount()",
          "converterCount(address)",
          "converterAddress(address,uint32)",
          "tokenAddress(address)",
          "registerConverter(address,address)",
          "unregisterConverter(address,uint32)",
          "blockStamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:7"
            },
            {
              "label": "tokensRegistered",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:21"
            },
            {
              "label": "tokensToConverters",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:22"
            },
            {
              "label": "convertersToTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:23"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Owned.sol:Owned": {
        "src": "contracts/base/Owned.sol:5",
        "version": {
          "withMetadata": "857e7657b93464a208d4ed2ae3518b0a0f1ea797cc982f6d1f3a336924edc8c5",
          "withoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e",
          "linkedWithoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/base/Owned.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Utils.sol:Utils": {
        "src": "contracts/base/Utils.sol:5",
        "version": {
          "withMetadata": "1319214db52a256fca678a8aace0fabd358c97435d582ffe66a9800a7cfe378f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/MockERC20.sol:MockERC20": {
        "src": "contracts/test/MockERC20.sol:7",
        "version": {
          "withMetadata": "e22f060894d72e4a40ffb029232fd094a5d0b8f49ea2ca30b43adfcd74ffc833",
          "withoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035",
          "linkedWithoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/test/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "b5f40a700deb6ba895f478369383a8ff71ba1fe893f5f345b56d447bc755a636",
          "withoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d",
          "linkedWithoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:IUniswapV3Factory": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState",
          "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:FixedPoint96": {
        "src": "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:7",
        "version": {
          "withMetadata": "f4ef3f7828755ee8d115f079e4860b7ee9c6a028e028d8b1fcdcf8d770e76530",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/ChainlinkPriceFeedIntegration.sol:ChainlinkPriceFeedIntegration": {
        "src": "contracts/ChainlinkPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "bf7b7735934b8858ffd6ea9efdf94e73b3e7e88daac171327e533a16b80bb4fa",
          "withoutMetadata": "4050200b3b77dffc222c410a33dc9bedc873230c23677808597987d9ee615d49",
          "linkedWithoutMetadata": "4050200b3b77dffc222c410a33dc9bedc873230c23677808597987d9ee615d49"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setPriceFeed(address,address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ChainlinkPriceFeedIntegration",
            "src": "contracts/ChainlinkPriceFeedIntegration.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/ChainlinkPriceFeedIntegration.sol:9"
            },
            {
              "label": "feeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ChainlinkPriceFeedIntegration",
              "src": "contracts/ChainlinkPriceFeedIntegration.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/GMXPriceFeedIntegration.sol:GMXPriceFeedIntegration": {
        "src": "contracts/GMXPriceFeedIntegration.sol:7",
        "version": {
          "withMetadata": "56bcc38192a9966d1a4d801b094ed1dc7f04b18fa5a196a69f1284052f703c87",
          "withoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1",
          "linkedWithoutMetadata": "ca346e14736fa139af02f80d315db250e33e4ef7e8a96e10a9138ae11862bea1"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GMXPriceFeedIntegration",
            "src": "contracts/GMXPriceFeedIntegration.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "feed",
            "src": "contracts/GMXPriceFeedIntegration.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/PriceFeed.sol:PriceFeed": {
        "src": "contracts/PriceFeed.sol:7",
        "version": {
          "withMetadata": "4ac42bec4043f58b2be613ef4a8050a44c5c52d51bd5b5b71ac948e16b4c74e1",
          "withoutMetadata": "c785a140f295de14c05f770c00bb863dc7c4f0837e8fd4f0d6fad72afe2675e4",
          "linkedWithoutMetadata": "c785a140f295de14c05f770c00bb863dc7c4f0837e8fd4f0d6fad72afe2675e4"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setManager(address)",
          "setIntegrations(address[])",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeed",
            "src": "contracts/PriceFeed.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "manager",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:9"
            },
            {
              "label": "integrations",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PriceFeed",
              "src": "contracts/PriceFeed.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/TokenReader.sol:TokenReader": {
        "src": "contracts/TokenReader.sol:7",
        "version": {
          "withMetadata": "13071bd37432fef61865b1c7b94e317f70c57ea604ade6594a781f57358c3a67",
          "withoutMetadata": "d6eed482148930a3480b331e775b88d3e8ff7608a63b5ea8f5565475fe8591f6",
          "linkedWithoutMetadata": "d6eed482148930a3480b331e775b88d3e8ff7608a63b5ea8f5565475fe8591f6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getTokenSupplies(address[])",
          "getTokenDecimals(address[])",
          "getTokensBalance(address,address[])",
          "getTokenBalances(address[],address)",
          "getTokensAllowance(address,address[],address)",
          "getTokenAllowances(address[],address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/UniswapV3PriceFeedIntegration.sol:UniswapV3PriceFeedIntegration": {
        "src": "contracts/UniswapV3PriceFeedIntegration.sol:10",
        "version": {
          "withMetadata": "2cd6e1966a3ebf028ba1c85f9bac76d69b3050482a9562b2b13441ed7df41f02",
          "withoutMetadata": "0ba1be3c572065c46c973ddb906ba458e857b202282b6c43b8d4e6605016ff9a",
          "linkedWithoutMetadata": "0ba1be3c572065c46c973ddb906ba458e857b202282b6c43b8d4e6605016ff9a"
        },
        "inherit": [
          "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration"
        ],
        "libraries": [
          "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol:FixedPoint96"
        ],
        "methods": [
          "(address)",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV3PriceFeedIntegration",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeTiers",
            "src": "contracts/UniswapV3PriceFeedIntegration.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "feeTiers",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint24)dyn_storage",
              "contract": "UniswapV3PriceFeedIntegration",
              "src": "contracts/UniswapV3PriceFeedIntegration.sol:13"
            }
          ],
          "types": {
            "t_array(t_uint24)dyn_storage": {
              "label": "uint24[]",
              "numberOfBytes": "32"
            },
            "t_uint24": {
              "label": "uint24",
              "numberOfBytes": "3"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/BancorConverterRegistry.sol:BancorConverterRegistry": {
        "src": "contracts/base/BancorConverterRegistry.sol:20",
        "version": {
          "withMetadata": "09c5e0a2ab50fdd12dbdb4a10573db606769029bf80a998137119e63381894c4",
          "withoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4",
          "linkedWithoutMetadata": "82f9f6f8ddf559753467dc5402cf8d57ed7fbae68a11227f47a740ac7cc3c9d4"
        },
        "inherit": [
          "contracts/base/Utils.sol:Utils",
          "contracts/base/Owned.sol:Owned"
        ],
        "libraries": [],
        "methods": [
          "()",
          "tokenCount()",
          "converterCount(address)",
          "converterAddress(address,uint32)",
          "tokenAddress(address)",
          "registerConverter(address,address)",
          "unregisterConverter(address,uint32)",
          "blockStamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:7"
            },
            {
              "label": "tokensRegistered",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:21"
            },
            {
              "label": "tokensToConverters",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:22"
            },
            {
              "label": "convertersToTokens",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:23"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BancorConverterRegistry",
              "src": "contracts/base/BancorConverterRegistry.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Lockable.sol:Lockable": {
        "src": "contracts/base/Lockable.sol:5",
        "version": {
          "withMetadata": "e3341d2441bf59524ca2a1bb8f324fd2632125ff41818622bf7663c68c5fe06b",
          "withoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247",
          "linkedWithoutMetadata": "559234943dff2fd1a339c0de6d187f09e58dd14b67b4fd931cabee895d3b0247"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts/base/Lockable.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "unlocked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Lockable",
              "src": "contracts/base/Lockable.sol:6"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Multicall.sol:Multicall": {
        "src": "contracts/base/Multicall.sol:5",
        "version": {
          "withMetadata": "a3e2bb9920e94e74ce5a1553bb5c142dbe9b4dcf1c3b3c048f7ece34c1e099c7",
          "withoutMetadata": "2e29e959cbbefe51354737eb9de04d5b635f4754dd16c26aa8b9b2a055ffade8",
          "linkedWithoutMetadata": "2e29e959cbbefe51354737eb9de04d5b635f4754dd16c26aa8b9b2a055ffade8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "aggregate(struct Multicall.Call[])",
          "blockAndAggregate(struct Multicall.Call[])",
          "getBlockHash(uint256)",
          "getBlockNumber()",
          "getCurrentBlockCoinbase()",
          "getCurrentBlockDifficulty()",
          "getCurrentBlockGasLimit()",
          "getCurrentBlockTimestamp()",
          "getEthBalance(address)",
          "getLastBlockHash()",
          "tryAggregate(bool,struct Multicall.Call[])",
          "tryBlockAndAggregate(bool,struct Multicall.Call[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Owned.sol:Owned": {
        "src": "contracts/base/Owned.sol:5",
        "version": {
          "withMetadata": "3c92fce7d2d9b3121d7476cbca65d375401bc699c727e9e7feda6fa47317d997",
          "withoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e",
          "linkedWithoutMetadata": "2ec3d5fdc4b771e050e0a34d5f037a5beb4902f8bcef50292c00faaac0f56e9e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "transferOwnership(address)",
          "acceptOwnership()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Owned",
            "src": "contracts/base/Owned.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:6"
            },
            {
              "label": "newOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Owned",
              "src": "contracts/base/Owned.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/base/Utils.sol:Utils": {
        "src": "contracts/base/Utils.sol:5",
        "version": {
          "withMetadata": "ccc93c1e69176d5ce6088fa53b77c852de905e867279ed6329d4d0c7bbd2a8aa",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IChainlinkPriceFeed.sol:IChainlinkPriceFeed": {
        "src": "contracts/interfaces/IChainlinkPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IERC20.sol:IERC20": {
        "src": "contracts/interfaces/IERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IGMXPriceFeed.sol:IGMXPriceFeed": {
        "src": "contracts/interfaces/IGMXPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "prices(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/interfaces/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getHighestPrice(address,address)",
          "getLowestPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IPriceFeedIntegration.sol:IPriceFeedIntegration": {
        "src": "contracts/interfaces/IPriceFeedIntegration.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PRECISION()",
          "getPrice(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/interfaces/IWETH.sol:IWETH": {
        "src": "contracts/interfaces/IWETH.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/ChainId.sol:ChainId": {
        "src": "contracts/libraries/ChainId.sol:5",
        "version": {
          "withMetadata": "45d2c767b2c7900f91b1fd222a384197d285f63a84151bc98561428e31f47b49",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/LowGasSafeMath.sol:LowGasSafeMath": {
        "src": "contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "621e81a296b69985fe90639533bcf2c38a60536c88d4ea3417cd29d6484d898c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/Math.sol:Math": {
        "src": "contracts/libraries/Math.sol:6",
        "version": {
          "withMetadata": "b9190c0d994b90df3e266d2e1d1ad480292ffab0d4d6fc0f60b1bcfa86583cf0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/PoolAddress.sol:PoolAddress": {
        "src": "contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "9780d42bf3ba5a656c3be0d4bddf72bed8c6adcb56f34d83df2db07c9e92300f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/libraries/TransferHelper.sol:TransferHelper": {
        "src": "contracts/libraries/TransferHelper.sol:5",
        "version": {
          "withMetadata": "ed5b07d263c2724fc044f96ad3b1c720aefa1ce89b0a0f35d04d9f18f7f8ad39",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      },
      "contracts/test/MockERC20.sol:MockERC20": {
        "src": "contracts/test/MockERC20.sol:7",
        "version": {
          "withMetadata": "3369b751d52c282cc6884a8551578aedd05f5adde74fe3b8f9f6950b0eaca72b",
          "withoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035",
          "linkedWithoutMetadata": "c0e44609ee4f4e1b3f385846b33b7b06c9749dc545b912713c628b96f34bb035"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/test/MockERC20.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "contracts/test/USDT.sol:Context": {
        "src": "contracts/test/USDT.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:ERC20": {
        "src": "contracts/test/USDT.sol:376",
        "version": {
          "withMetadata": "d6ab05a65c86d041baf1a28ef001020816abdbcf012046909f52cfb8a255bd2b",
          "withoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac",
          "linkedWithoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac"
        },
        "inherit": [
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [
          "contracts/test/USDT.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/USDT.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:IERC20": {
        "src": "contracts/test/USDT.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:LowGasSafeMath": {
        "src": "contracts/test/USDT.sol:127",
        "version": {
          "withMetadata": "20cc5c3d87189c1fa49d3a6113d18cc0ae824a1a5c30083375f9747386ddb5f3",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:Ownable": {
        "src": "contracts/test/USDT.sol:720",
        "inherit": [
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/USDT.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/USDT.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:USDT": {
        "src": "contracts/test/USDT.sol:778",
        "version": {
          "withMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "withoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "linkedWithoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559"
        },
        "inherit": [
          "contracts/test/USDT.sol:ERC20",
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "USDT",
            "src": "contracts/test/USDT.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/USDT.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct USDT.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct USDT.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct USDT.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WBTC.sol:Context": {
        "src": "contracts/test/WBTC.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:ERC20": {
        "src": "contracts/test/WBTC.sol:376",
        "version": {
          "withMetadata": "30f38635d5b2575c3374f2bdc3e0a1f38e76ee4b7ace3587e6d8a07bd389303c",
          "withoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176",
          "linkedWithoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176"
        },
        "inherit": [
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [
          "contracts/test/WBTC.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/WBTC.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:IERC20": {
        "src": "contracts/test/WBTC.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:LowGasSafeMath": {
        "src": "contracts/test/WBTC.sol:127",
        "version": {
          "withMetadata": "2c52ed7f3a33755dbc18e17c0d34a97909802ae73ec7312c33f5dcda63c8122c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:Ownable": {
        "src": "contracts/test/WBTC.sol:720",
        "inherit": [
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/WBTC.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/WBTC.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:WBTC": {
        "src": "contracts/test/WBTC.sol:778",
        "version": {
          "withMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "withoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "linkedWithoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171"
        },
        "inherit": [
          "contracts/test/WBTC.sol:ERC20",
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WBTC",
            "src": "contracts/test/WBTC.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/WBTC.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct WBTC.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct WBTC.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct WBTC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WETH.sol:WETH": {
        "src": "contracts/test/WETH.sol:24",
        "version": {
          "withMetadata": "915665bff19f0dfc1b2bdf84382799d66871950cd15494e34b93266beb48432e",
          "withoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3",
          "linkedWithoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/test/WETH.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/test/WETH.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/test/WETH.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:25"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:26"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "2",
              "type": "t_uint8",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:27"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:34"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/USDT.sol:Context": {
        "src": "contracts/test/USDT.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:ERC20": {
        "src": "contracts/test/USDT.sol:376",
        "version": {
          "withMetadata": "d6ab05a65c86d041baf1a28ef001020816abdbcf012046909f52cfb8a255bd2b",
          "withoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac",
          "linkedWithoutMetadata": "9bf9210d5dca0caa2230e0953fa76d43ece5fb45664ab400274849cbea85b3ac"
        },
        "inherit": [
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [
          "contracts/test/USDT.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/USDT.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:IERC20": {
        "src": "contracts/test/USDT.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:LowGasSafeMath": {
        "src": "contracts/test/USDT.sol:127",
        "version": {
          "withMetadata": "20cc5c3d87189c1fa49d3a6113d18cc0ae824a1a5c30083375f9747386ddb5f3",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:Ownable": {
        "src": "contracts/test/USDT.sol:720",
        "inherit": [
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/USDT.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/USDT.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/USDT.sol:USDT": {
        "src": "contracts/test/USDT.sol:778",
        "version": {
          "withMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "withoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559",
          "linkedWithoutMetadata": "26bf28468cb37fbd0a823a25f890e6f2d8bf6618822765d902ffa6fe1b4c0559"
        },
        "inherit": [
          "contracts/test/USDT.sol:ERC20",
          "contracts/test/USDT.sol:IERC20",
          "contracts/test/USDT.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "USDT",
            "src": "contracts/test/USDT.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/USDT.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/USDT.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "USDT",
              "src": "contracts/test/USDT.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct USDT.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct USDT.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct USDT.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WBTC.sol:Context": {
        "src": "contracts/test/WBTC.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:ERC20": {
        "src": "contracts/test/WBTC.sol:376",
        "version": {
          "withMetadata": "30f38635d5b2575c3374f2bdc3e0a1f38e76ee4b7ace3587e6d8a07bd389303c",
          "withoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176",
          "linkedWithoutMetadata": "32b4bde2bf00daa06e6ec01417ef5dd801f571901a5ad6c4bf8b1e2d32414176"
        },
        "inherit": [
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [
          "contracts/test/WBTC.sol:LowGasSafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts/test/WBTC.sol:398"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:IERC20": {
        "src": "contracts/test/WBTC.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:LowGasSafeMath": {
        "src": "contracts/test/WBTC.sol:127",
        "version": {
          "withMetadata": "2c52ed7f3a33755dbc18e17c0d34a97909802ae73ec7312c33f5dcda63c8122c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:Ownable": {
        "src": "contracts/test/WBTC.sol:720",
        "inherit": [
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/test/WBTC.sol:731"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts/test/WBTC.sol:721"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      },
      "contracts/test/WBTC.sol:WBTC": {
        "src": "contracts/test/WBTC.sol:778",
        "version": {
          "withMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "withoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171",
          "linkedWithoutMetadata": "048ad704a9c92ec0669ee21a5a45acbcc20aacbc19708e6896a3d6b89afbe171"
        },
        "inherit": [
          "contracts/test/WBTC.sol:ERC20",
          "contracts/test/WBTC.sol:IERC20",
          "contracts/test/WBTC.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WBTC",
            "src": "contracts/test/WBTC.sol:1073"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_initialSupply",
            "src": "contracts/test/WBTC.sol:779"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:379"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:381"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:383"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:385"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:386"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts/test/WBTC.sol:387"
            },
            {
              "label": "_initialSupply",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:779"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_address)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:836"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:845"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint32)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:848"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WBTC",
              "src": "contracts/test/WBTC.sol:861"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1162_storage))": {
              "label": "mapping(address => mapping(uint32 => struct WBTC.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1162_storage)": {
              "label": "mapping(uint32 => struct WBTC.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1162_storage": {
              "label": "struct WBTC.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    },
    {
      "contracts/test/WETH.sol:WETH": {
        "src": "contracts/test/WETH.sol:24",
        "version": {
          "withMetadata": "915665bff19f0dfc1b2bdf84382799d66871950cd15494e34b93266beb48432e",
          "withoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3",
          "linkedWithoutMetadata": "2d31fb58e90ec0a5b0a783f1185abe3c9cc033bed96c637683e96461e870d6b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/test/WETH.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/test/WETH.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/test/WETH.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:25"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:26"
            },
            {
              "label": "decimals",
              "offset": 0,
              "slot": "2",
              "type": "t_uint8",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:27"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:34"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "WETH",
              "src": "contracts/test/WETH.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.6.12"
      }
    }
  ]
}